<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>kk&#39;s Blog</title>
  
  
  <link href="https://nmk0718.github.io/atom.xml" rel="self"/>
  
  <link href="https://nmk0718.github.io/"/>
  <updated>2025-03-03T09:44:19.545Z</updated>
  <id>https://nmk0718.github.io/</id>
  
  <author>
    <name>kk</name>
    
  </author>
  
  <follow_challenge>
    <feedId>111612695395408896</feedId>
    <userId>110199199215347712</userId>
  </follow_challenge>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>获取客户端真实IP</title>
    <link href="https://nmk0718.github.io/2025/02/27/%E8%8E%B7%E5%8F%96%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%9C%9F%E5%AE%9EIP/"/>
    <id>https://nmk0718.github.io/2025/02/27/%E8%8E%B7%E5%8F%96%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%9C%9F%E5%AE%9EIP/</id>
    <published>2025-02-27T09:32:00.000Z</published>
    <updated>2025-03-03T09:44:19.545Z</updated>
    
    <content type="html"><![CDATA[<p>在访问网站时，会有以下几种方式访问到实际的后端服务，可忽略WAF，本文主要讲解如何把真实IP转发给后端</p><ul><li>DNS &gt; WAF &gt; CLB &gt; Ingress &gt; backend-service</li><li>DNS &gt; WAF &gt; CLB &gt; Nginx &gt; backend-service</li><li>DNS &gt; WAF &gt; CLB &gt; backend-service</li></ul><h4 id="Nginx-Ingress"><a href="#Nginx-Ingress" class="headerlink" title="Nginx Ingress"></a>Nginx Ingress</h4><p>在 Kubernetes 中，应用通过 Nginx Ingress 接收请求，有以下两种方式可以获取到客户端的真实 IP</p><ol><li><p>修改 Nginx Ingress 的 ConfigMap</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-configuration</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">use-forwarded-headers:</span> <span class="string">"true"</span>  <span class="comment"># 启用 use-forwarded-headers</span></span><br><span class="line">  <span class="attr">compute-full-forwarded-for:</span> <span class="string">"true"</span>  <span class="comment"># 启用 compute-full-forwarded-for</span></span><br></pre></td></tr></table></figure><p>详解：<br><code>use-forwarded-headers</code>：Nginx Ingress 会信任 X-Forwarded-For 和 X-Forwarded-Proto 头部，将它们传递给后端服务。<br><code>compute-full-forwarded-for</code>：Nginx Ingress 会将客户端的真实 IP 信息完整地记录在 X-Forwarded-For 头部中。</p><image src="https://qcloudimg.tencent-cloud.cn/image/document/7d017fe973aec9ad1f75659a3784db4e.jpeg"></image></li><li><p>通过 Service 资源的配置选项保留客户端源 IP<br>修改Nginx Ingress Controller 的 Service</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">externalTrafficPolicy:</span> <span class="string">Local</span></span><br></pre></td></tr></table></figure><p>详解<br><code>Cluster</code>：表示隐藏客户端源 IP，LoadBalancer 和 NodePort 类型服务流量可能会被转发到其他节点的 Pods。<br><code>Local</code>：表示保留客户端源 IP 并避免 LoadBalancer 和 NodePort 类型的服务流量转发到其他节点的 Pods。<br>⚠️Local的缺点：会存在潜在的 Pods（Endpoints）流量负载不均衡风险。<br><a href="https://kubernetes.io/zh/docs/tasks/access-application-cluster/create-external-load-balancer/" target="_blank" rel="noopener">https://kubernetes.io/zh/docs/tasks/access-application-cluster/create-external-load-balancer/</a></p><p>配置生效后，在后端获取 HTTP Header 中的 X-Forwarded-For 或 X-Real-IP 字段值得到客户端真实源 IP。</p></li></ol><image src="https://qcloudimg.tencent-cloud.cn/image/document/302d5e26fc4a6d492a232b36d7034870.jpeg"><h4 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h4><p>增加http_realip_module模块，重新编译nginx</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> nginx-1.17.0</span><br><span class="line">./configure --prefix=/path/server/nginx --with-http_realip_module</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p>vi /etc/nginx/nginx.conf</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="attribute">log_format</span> main <span class="string">'<span class="variable">$remote_addr</span> - <span class="variable">$remote_user</span> [<span class="variable">$time_local</span>] "<span class="variable">$request</span>" '</span></span><br><span class="line">                <span class="string">'<span class="variable">$status</span> <span class="variable">$body_bytes_sent</span> "<span class="variable">$http_referer</span>" '</span></span><br><span class="line">                <span class="string">'"<span class="variable">$http_user_agent</span>" "<span class="variable">$http_x_forwarded_for</span>"'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#若代理的回源IP比较分散，或不清楚代理回源IP时，可以写成0.0.0.0/0，代表所有请求都从XFF中获取源IP</span></span><br><span class="line">    <span class="attribute">set_real_ip_from</span> <span class="number">10.0.0.0</span>/<span class="number">8</span>;  <span class="comment"># 假设 CLB 的 IP 段是 10.0.0.0/8</span></span><br><span class="line">    <span class="attribute">real_ip_recursive</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">real_ip_header</span> X-Forwarded-For;</span><br><span class="line"></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">server_name</span> your_domain;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">            <span class="attribute">proxy_pass</span> http://backend;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">            <span class="comment">#把X-Forwarded-For 和 X-Real-IP 字段转发给后端</span></span><br><span class="line">            <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="CLB"><a href="#CLB" class="headerlink" title="CLB"></a>CLB</h4><p>使用云平台中的 CLB 直通 Pod 的转发功能（CLB 透传转发，并绕过 Kubernetes Service 流量转发），后端 Pods 收到的请求的源 IP 即为客户端真实源 IP<br>此方式适用于四层及七层服务的转发场景<br><image src="https://qcloudimg.tencent-cloud.cn/image/document/99f01ebf33d7a1ca525b9695395d7f8a.jpeg"></image></p><p><del>废弃方案,使用后不生效</del></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apiVersion: networking.k8s.io/v1</span><br><span class="line">kind: Ingress</span><br><span class="line">metadata:</span><br><span class="line">  name: ingress</span><br><span class="line">  annotations:</span><br><span class="line">    # 启用 X-Forwarded-* 请求头的处理</span><br><span class="line">    nginx.ingress.kubernetes.io/use-forwarded-headers: &quot;true&quot;</span><br><span class="line">    # 指定从 X-Forwarded-For 请求头中获取真实 IP</span><br><span class="line">    nginx.ingress.kubernetes.io/real-ip-header: &quot;X-Forwarded-For&quot;</span><br><span class="line">    # 将请求头中的 IP 设置为客户端的真实 IP</span><br><span class="line">    nginx.ingress.kubernetes.io/set-real-ip-header: &quot;true&quot;</span><br></pre></td></tr></table></figure><h4 id="踩坑记录："><a href="#踩坑记录：" class="headerlink" title="踩坑记录："></a>踩坑记录：</h4><p>查看到log_format有启用，access_log 被注释掉了，但仍然有日志输出，日志一直打印不出来真实IP<br>原因：<br>Nginx 默认会生成 access.log 文件，即使在配置文件中没有显式指定 access_log 指令。默认情况下，Nginx 会将访问日志写入 logs/access.log 文件。<br>如果你在配置文件中注释掉了 access_log 指令，但没有完全禁用日志记录，Nginx 仍然会使用默认配置生成日志。<br>解决方案：<br>把access.log开启，重新reload即可</p><p>参考文档：<br><a href="https://cloud.tencent.com/document/product/214/3728" target="_blank" rel="noopener">https://cloud.tencent.com/document/product/214/3728</a><br><a href="https://cloud.tencent.com/document/product/457/48949" target="_blank" rel="noopener">https://cloud.tencent.com/document/product/457/48949</a></p></image>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在访问网站时，会有以下几种方式访问到实际的后端服务，可忽略WAF，本文主要讲解如何把真实IP转发给后端&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DNS &amp;gt; WAF &amp;gt; CLB &amp;gt; Ingress &amp;gt; backend-service&lt;/li&gt;
&lt;li&gt;DNS &amp;gt</summary>
      
    
    
    
    
    <category term="k8s" scheme="https://nmk0718.github.io/tag/k8s/"/>
    
  </entry>
  
  <entry>
    <title>OpenTelemetry</title>
    <link href="https://nmk0718.github.io/2025/01/14/OpenTelemetry/"/>
    <id>https://nmk0718.github.io/2025/01/14/OpenTelemetry/</id>
    <published>2025-01-14T03:09:00.000Z</published>
    <updated>2025-02-10T04:01:00.674Z</updated>
    
    <content type="html"><![CDATA[<p>OpenTelemetry（简称OTel）是一个开源可观测性框架，用于仪表化、生成、收集和导出诸如跟踪、度量、日志等遥测数据<br><image src="https://opentelemetry.io/docs/collector/img/otel-collector.svg" alt="Collector"></image></p><p>部署参考文档：<br><a href="https://opentelemetry.io/zh/docs" target="_blank" rel="noopener">https://opentelemetry.io/zh/docs</a><br><a href="https://www.zhihu.com/question/545762884/answer/3323681028" target="_blank" rel="noopener">https://www.zhihu.com/question/545762884/answer/3323681028</a></p><h3 id="Instrumentation"><a href="#Instrumentation" class="headerlink" title="Instrumentation"></a>Instrumentation</h3><p>Instrumentation 是 OpenTelemetry 中用于对应用程序进行监控和数据收集。它包括手动仪表化（Manual Instrumentation）和自动仪表化（Automatic Instrumentation）两种方式。通过 Instrumentation，开发人员可以将应用程序的运行数据（如追踪、指标、日志）收集并发送到后端系统进行分析和可视化。</p><ol><li>手动仪表化：<ul><li>开发者通过在代码中显式地添加 OpenTelemetry API 调用，来创建和管理追踪、指标等遥测数据。</li><li>可以对应用程序的特定部分进行详细的监控和分析，获取更深入的性能和行为信息。</li><li>在关键的业务逻辑处手动创建 span 来记录操作的开始和结束时间，从而精确地监控特定代码段的执行情况。</li></ul></li><li>自动仪表化：<ul><li>无需修改应用程序源代码，通过特定的机制（如字节码注入、代理等）自动对应用程序中的各种库、框架等进行监控，收集遥测数据。</li><li>减少手动添加监控代码的工作量，快速为应用程序添加基本的监控能力。例如，OpenTelemetry 的 Java 自动仪表化可以通过一个 agent 自动收集日志、指标、trace 并上报。</li></ul></li></ol><h3 id="Collector"><a href="#Collector" class="headerlink" title="Collector"></a>Collector</h3><p>Collector 是一个开源的、可扩展的代理，用于接收、处理和导出遥测数据（如 traces、metrics 和 logs）。它提供了一种厂商中立的方式来收集、处理和导出遥测数据，消除了运行、操作和维护多个代理/收集器的需要。</p><h4 id="Deployment"><a href="#Deployment" class="headerlink" title="Deployment"></a>Deployment</h4><p>在不修改应用程序代码的情况下，收集和处理遥测数据。</p><ol><li>Agent：<ul><li>部署方式：每个客户端SDK或下游采集器都配置一个collector。收集器实例与应用程序在同一主机上运行，例如sidecar或者daemonset方式。</li><li>工作方式：应用程序中的SDK以OTLP协议发送遥测数据给collector。然后collector处理遥测数据并对接到可观测性后端。<image src="https://opentelemetry.io/zh/docs/collector/img/otel-agent-sdk.svg" alt="Agent形态"></image></li></ul></li><li>Gateway：<ul><li>部署方式：使用开箱即用的负载均衡器（比如nginx）在otel-collector之间分配负载。</li><li>工作方式：应用程序中的SDK以OTLP协议发送遥测数据给负载均衡器，负载均衡器根据算法选择其中一个collector实例进行处理并对接到可观测性后端<image src="https://opentelemetry.io/zh/docs/collector/img/otel-gateway-sdk.svg" alt="Gateway形态"></image></li></ul></li></ol><h4 id="Pipeline-components"><a href="#Pipeline-components" class="headerlink" title="Pipeline components"></a>Pipeline components</h4><ul><li><p>receiver：负责按照对应的协议格式监听接收遥测数据，并把数据转给一个或者多个processor。</p></li><li><p>processor：负责做遥测数据加工处理，如丢弃数据，增加信息，转批处理等，并把数据传递给下一个processor或者传递给一个或多个exporter。</p></li><li><p>exporter：负责把数据往下一个接收端发送（一般是遥测后端），exporter可以定义同时从多个不同的processor中获取遥测数据。</p></li></ul><p>Collector 除了提供让遥测数据收集与业务逻辑处理正交的能力，还充当了遥测数据对接遥测后端的适配器。Collector可以接收 Otlp、Zipkin、Jaeger等任意格式的数据，然后以 Otlp、Zipkin、Jaeger等任意格式的数据转发出去。这一切只取决于你需要输入或输出的格式是否有对应的 receiver 和 exporter 实现</p><h3 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h3><h4 id="Jaeger"><a href="#Jaeger" class="headerlink" title="Jaeger"></a>Jaeger</h4><p>为了便于演示这里使用  jaegertracing/all-in-one 镜像来部署 Jaeger，这个镜像包含了 Jaeger 收集器、内存存储、查询服务和 UI 等组件，非常适合开发和测试使用。通过环境变量 <code>COLLECTOR_OTLP_ENABLED</code> 启动对 OTLP（OpenTelemetry Protocol） 的支持。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">kubectl</span> <span class="string">apply</span> <span class="string">-f</span> <span class="bullet">-</span> <span class="string">&lt;&lt;EOF</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">jaeger</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">jaeger</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">jaeger</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">jaeger</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">jaegertracing/all-in-one:latest</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">COLLECTOR_OTLP_ENABLED</span></span><br><span class="line">          <span class="attr">value:</span> <span class="string">"true"</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">16686</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">14268</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">jaeger</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">jaeger</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">ClusterIP</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">ui</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">16686</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">16686</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">collector</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">14268</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">14268</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">http</span></span><br><span class="line">      <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">4318</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">4318</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">grpc</span></span><br><span class="line">      <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">4317</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">4317</span>      </span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><h4 id="​​OpenTelemetry-Operator"><a href="#​​OpenTelemetry-Operator" class="headerlink" title="​​OpenTelemetry Operator"></a>​​OpenTelemetry Operator</h4><p>OpenTelemetry Operator用于管理OpenTelemetry 收集器(OpenTelemetry Collectors)和工作负载的自动检测(auto-instrumentation)<br>安装OpenTelemetry Operator</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">helm repo add open-telemetry https://open-telemetry.github.io/opentelemetry-helm-charts</span><br><span class="line"></span><br><span class="line">helm install opentelemetry-operator open-telemetry/opentelemetry-operator \</span><br><span class="line">  --<span class="built_in">set</span> <span class="string">"manager.collectorImage.repository=otel/opentelemetry-collector-k8s"</span> \</span><br><span class="line">  --<span class="built_in">set</span> admissionWebhooks.certManager.enabled=<span class="literal">false</span> \</span><br><span class="line">  --<span class="built_in">set</span> admissionWebhooks.autoGenerateCert.enabled=<span class="literal">true</span></span><br></pre></td></tr></table></figure><ul><li><code>otel/opentelemetry-collector-k8s</code>专门为Kubernetes环境优化的，包含了在Kubernetes中运行所需的基本功能和插件。</li><li><code>opentelemetry-collector-contrib</code>包含了大量的扩展功能和实验性组件。这些组件包括各种接收器、处理器、导出器以及扩展功能，旨在提供更广泛的遥测数据处理能力<br>可以看到对应的 Pod 已经正常运行：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  ~ kubectl --namespace default get pods -l <span class="string">"app.kubernetes.io/name=opentelemetry-operator"</span></span><br><span class="line">NAME                                     READY   STATUS    RESTARTS   AGE</span><br><span class="line">opentelemetry-operator-f78f45ffc-sgns7   2/2     Running   0          2m44s</span><br></pre></td></tr></table></figure></li></ul><p>还会自动为我们添加OpenTelemetry 相关的 CRD：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  ~ kubectl get crd |grep opentelemetry</span><br><span class="line">instrumentations.opentelemetry.io                    2025-01-14T07:32:04Z</span><br><span class="line">opampbridges.opentelemetry.io                        2025-01-14T07:32:04Z</span><br><span class="line">opentelemetrycollectors.opentelemetry.io             2025-01-14T07:32:04Z</span><br></pre></td></tr></table></figure><h4 id="OpenTelemetry-Collector"><a href="#OpenTelemetry-Collector" class="headerlink" title="OpenTelemetry Collector"></a>OpenTelemetry Collector</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">kubectl</span> <span class="string">apply</span> <span class="string">-f</span> <span class="bullet">-</span> <span class="string">&lt;&lt;EOF</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">opentelemetry.io/v1alpha1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">OpenTelemetryCollector</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">otel</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">config:</span> <span class="string">|</span></span><br><span class="line">    <span class="attr">receivers:</span></span><br><span class="line">      <span class="attr">otlp:</span></span><br><span class="line">        <span class="attr">protocols:</span></span><br><span class="line">          <span class="attr">grpc:</span></span><br><span class="line">          <span class="attr">http:</span></span><br><span class="line">    <span class="attr">processors:</span></span><br><span class="line">      <span class="attr">memory_limiter:</span></span><br><span class="line">        <span class="attr">check_interval:</span> <span class="string">1s</span></span><br><span class="line">        <span class="attr">limit_percentage:</span> <span class="number">75</span></span><br><span class="line">        <span class="attr">spike_limit_percentage:</span> <span class="number">15</span></span><br><span class="line">      <span class="attr">batch:</span></span><br><span class="line">        <span class="attr">send_batch_size:</span> <span class="number">10000</span></span><br><span class="line">        <span class="attr">timeout:</span> <span class="string">10s</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">exporters:</span></span><br><span class="line">      <span class="attr">debug:</span></span><br><span class="line">      <span class="attr">otlp/jaeger:</span></span><br><span class="line">        <span class="attr">endpoint:</span> <span class="string">"jaeger.default:4317"</span></span><br><span class="line">        <span class="attr">tls:</span></span><br><span class="line">          <span class="attr">insecure:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">service:</span></span><br><span class="line">      <span class="attr">pipelines:</span></span><br><span class="line">        <span class="attr">traces:</span></span><br><span class="line">          <span class="attr">receivers:</span> <span class="string">[otlp]</span></span><br><span class="line">          <span class="attr">processors:</span> <span class="string">[]</span></span><br><span class="line">          <span class="attr">exporters:</span> <span class="string">[debug,otlp/jaeger]</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><p>创建 CR OpenTelemetryCollector 后，Otel Operator 会创建一个 deployment 和 多个 service。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  ~</span><br><span class="line">kubectl get deployment,service -l app.kubernetes.io/component=opentelemetry-collector</span><br><span class="line"></span><br><span class="line">NAME                             READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">deployment.apps/otel-collector   1/1     1            1           3m37s</span><br><span class="line"></span><br><span class="line">NAME                                TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)             AGE</span><br><span class="line">service/otel-collector              ClusterIP   10.111.0.124     &lt;none&gt;        4317/TCP,4318/TCP   3m36s</span><br><span class="line">service/otel-collector-headless     ClusterIP   None             &lt;none&gt;        4317/TCP,4318/TCP   3m36s</span><br><span class="line">service/otel-collector-monitoring   ClusterIP   10.111.151.111   &lt;none&gt;        8888/TCP            3m36s</span><br></pre></td></tr></table></figure><h4 id="Auto-instrumentation"><a href="#Auto-instrumentation" class="headerlink" title="Auto-instrumentation"></a>Auto-instrumentation</h4><p>创建一个Java 服务的基本检测资源</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">kubectl</span> <span class="string">apply</span> <span class="string">-f</span> <span class="bullet">-</span> <span class="string">&lt;&lt;EOF</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">opentelemetry.io/v1alpha1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Instrumentation</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">instrumentation-sample</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">propagators:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">tracecontext</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">baggage</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">b3</span></span><br><span class="line">  <span class="attr">sampler:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">parentbased_traceidratio</span></span><br><span class="line">    <span class="attr">argument:</span> <span class="string">"1"</span></span><br><span class="line">  <span class="attr">env:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">OTEL_EXPORTER_OTLP_ENDPOINT</span></span><br><span class="line">      <span class="attr">value:</span> <span class="string">otel-collector.default:4318</span></span><br><span class="line">  <span class="attr">java:</span>    </span><br><span class="line">    <span class="attr">env:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">OTEL_EXPORTER_OTLP_ENDPOINT</span></span><br><span class="line">        <span class="attr">value:</span> <span class="string">http://otel-collector.default:4317</span>   </span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><p>​Instrumentation​​ 由以下属性组成：<br><code>​​exporter.endpoint​</code>​ -（可选）将遥测数据发送到 OTLP 格式的地址。<br><code>​​propagators</code>​​ - 使所有数据源能够共享底层上下文机制，用于在事务的整个生命周期中存储状态和访问数据。<br>​<code>​sampler</code>​​​ - 通过减少收集和发送到后端的跟踪样本数量来引入的噪音和开销的机制。 OpenTelemetry 提供两种类型：​​StaticSampler​​​ 和 ​TraceIDRatioBased​​。<br>语言属性，即​​java​​​、​​nodejs​​​、​​python​​​ 和​​dotnet​​ - 根据 pod 注解中设置的语言，使用自动插桩的自定义镜像</p><p>默认情况下，自动检测 Java 服务的 Instrumentation 资源与协议otlp一起使用http/protobuf。这意味着配置的端点必须能够通过http有效protobuf负载接收 OTLP。因此，示例使用otel-collector.default:4318，它连接到 http上一步中创建的 Collector 的 otlpreceiver 的端口。</p><p>创建java示例应用</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">kubectl</span> <span class="string">apply</span> <span class="string">-f</span> <span class="bullet">-</span> <span class="string">&lt;&lt;EOF</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">java-sample</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">java-sample</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">java-sample</span></span><br><span class="line">      <span class="attr">annotations:</span></span><br><span class="line">        <span class="comment">#spec.template.metadata.annotations特定于语言的注解来完成自动检测</span></span><br><span class="line">        <span class="attr">instrumentation.opentelemetry.io/inject-java:</span> <span class="string">"true"</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">java-sample</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">pinakispecial/spring-boot-rest</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">8080</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><p>可用注解：<br>​<code>​true</code>​​ - 从命名空间注入和埋点资源。<br>​<code>​my-instrumentation​​</code>​ - 当前命名空间中注入​​Instrumentation​​ CR 实例的名称。<br>​<code>​my-other-namespace/my-instrumentation</code>​​​ - 另一个命名空间中​​Instrumentation​​ CR 实例的名称和命名空间。<br><code>​​false</code>​​ -不注入。</p><p>可以看到 Otel Operator 向 Pod 中注入了一个 otel 的初始化容器</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  ~ kubectl get pod java-sample-6f688ffb4f-gq95j -o jsonpath=<span class="string">'&#123;.spec.initContainers[*].image&#125; &#123;.spec.containers[*].image&#125;'</span></span><br><span class="line">ghcr.io/open-telemetry/opentelemetry-operator/autoinstrumentation-java:1.33.6 pinakispecial/spring-boot-rest%</span><br></pre></td></tr></table></figure><p>以及在 java 容器中注入了一系列的环境变量进行配置</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">env:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">OTEL_NODE_IP</span></span><br><span class="line">      <span class="attr">valueFrom:</span></span><br><span class="line">        <span class="attr">fieldRef:</span></span><br><span class="line">          <span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line">          <span class="attr">fieldPath:</span> <span class="string">status.hostIP</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">OTEL_POD_IP</span></span><br><span class="line">      <span class="attr">valueFrom:</span></span><br><span class="line">        <span class="attr">fieldRef:</span></span><br><span class="line">          <span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line">          <span class="attr">fieldPath:</span> <span class="string">status.podIP</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">OTEL_EXPORTER_OTLP_ENDPOINT</span></span><br><span class="line">      <span class="attr">value:</span> <span class="string">http://otel-collector.default:4317</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">JAVA_TOOL_OPTIONS</span></span><br><span class="line">      <span class="attr">value:</span> <span class="string">' -javaagent:/otel-auto-instrumentation-java/javaagent.jar'</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">OTEL_SERVICE_NAME</span></span><br><span class="line">      <span class="attr">value:</span> <span class="string">java-sample</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">OTEL_RESOURCE_ATTRIBUTES_POD_NAME</span></span><br><span class="line">      <span class="attr">valueFrom:</span></span><br><span class="line">        <span class="attr">fieldRef:</span></span><br><span class="line">          <span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line">          <span class="attr">fieldPath:</span> <span class="string">metadata.name</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">OTEL_RESOURCE_ATTRIBUTES_NODE_NAME</span></span><br><span class="line">      <span class="attr">valueFrom:</span></span><br><span class="line">        <span class="attr">fieldRef:</span></span><br><span class="line">          <span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line">          <span class="attr">fieldPath:</span> <span class="string">spec.nodeName</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">OTEL_PROPAGATORS</span></span><br><span class="line">      <span class="attr">value:</span> <span class="string">tracecontext,baggage,b3</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">OTEL_TRACES_SAMPLER</span></span><br><span class="line">      <span class="attr">value:</span> <span class="string">parentbased_traceidratio</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">OTEL_TRACES_SAMPLER_ARG</span></span><br><span class="line">      <span class="attr">value:</span> <span class="string">"1"</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">OTEL_RESOURCE_ATTRIBUTES</span></span><br><span class="line">      <span class="attr">value:</span> <span class="string">k8s.container.name=java-sample,k8s.deployment.name=java-sample,k8s.namespace.name=default,k8s.node.name=$(OTEL_RESOURCE_ATTRIBUTES_NODE_NAME),k8s.pod.name=$(OTEL_RESOURCE_ATTRIBUTES_POD_NAME),k8s.replicaset.name=java-sample-6f688ffb4f,service.instance.id=default.$(OTEL_RESOURCE_ATTRIBUTES_POD_NAME).java-sample</span></span><br></pre></td></tr></table></figure><p>请求服务接口</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#开放Java服务的端口访问</span></span><br><span class="line">➜  ~ kubectl port-forward java-sample-6f688ffb4f-gq95j 8080:8080</span><br><span class="line">Forwarding from 127.0.0.1:8080 -&gt; 8080</span><br><span class="line">Forwarding from [::1]:8080 -&gt; 8080</span><br><span class="line"><span class="comment">#请求接口</span></span><br><span class="line">➜  ~ curl localhost:8080</span><br><span class="line">OK%</span><br><span class="line"></span><br><span class="line"><span class="comment">#开放Jaeger UI的端口访问</span></span><br><span class="line">➜  ~ kubectl port-forward svc/jaeger 16686:16686</span><br><span class="line">Forwarding from 127.0.0.1:16686 -&gt; 16686</span><br><span class="line">Forwarding from [::1]:16686 -&gt; 16686</span><br></pre></td></tr></table></figure><p>访问 Jaeger UI 查看访问的链路信息<br><img src="https://nmk0718.github.io/image/JaegerUI.png" alt="Jaeger UI"></p><h4 id="接入prometheus"><a href="#接入prometheus" class="headerlink" title="接入prometheus"></a>接入prometheus</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">helm repo add prometheus-community https://prometheus-community.github.io/helm-charts</span><br><span class="line"></span><br><span class="line">helm show values  prometheus-community/prometheus &gt; values.yaml</span><br><span class="line"></span><br><span class="line">helm install prometheus prometheus-community/prometheus -f values.yaml</span><br><span class="line"></span><br><span class="line">kubectl port-forward svc/prometheus-server 9090:80</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">opentelemetry.io/v1alpha1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">OpenTelemetryCollector</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">otel-prometheus</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">config:</span> <span class="string">|</span></span><br><span class="line">    <span class="attr">receivers:</span></span><br><span class="line">      <span class="attr">otlp:</span></span><br><span class="line">        <span class="attr">protocols:</span></span><br><span class="line">          <span class="attr">grpc:</span></span><br><span class="line">          <span class="attr">http:</span></span><br><span class="line">    <span class="attr">processors:</span></span><br><span class="line">      <span class="attr">memory_limiter:</span></span><br><span class="line">        <span class="attr">check_interval:</span> <span class="string">1s</span></span><br><span class="line">        <span class="attr">limit_percentage:</span> <span class="number">75</span></span><br><span class="line">        <span class="attr">spike_limit_percentage:</span> <span class="number">15</span></span><br><span class="line">      <span class="attr">batch:</span></span><br><span class="line">        <span class="attr">send_batch_size:</span> <span class="number">10000</span></span><br><span class="line">        <span class="attr">timeout:</span> <span class="string">10s</span></span><br><span class="line">    <span class="attr">exporters:</span></span><br><span class="line">      <span class="attr">prometheus:</span></span><br><span class="line">        <span class="attr">endpoint:</span> <span class="string">"localhost:9090"</span></span><br><span class="line">    <span class="attr">service:</span></span><br><span class="line">      <span class="attr">pipelines:</span></span><br><span class="line">        <span class="attr">metrics:</span></span><br><span class="line">          <span class="attr">receivers:</span> <span class="string">[otlp]</span></span><br><span class="line">          <span class="attr">processors:</span> <span class="string">[memory_limiter,</span> <span class="string">batch]</span></span><br><span class="line">          <span class="attr">exporters:</span> <span class="string">[prometheus]</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;OpenTelemetry（简称OTel）是一个开源可观测性框架，用于仪表化、生成、收集和导出诸如跟踪、度量、日志等遥测数据&lt;br&gt;&lt;image src=&quot;https://opentelemetry.io/docs/collector/img/otel-collector.</summary>
      
    
    
    
    
    <category term="k8s" scheme="https://nmk0718.github.io/tag/k8s/"/>
    
    <category term="OpenTelemetry" scheme="https://nmk0718.github.io/tag/OpenTelemetry/"/>
    
  </entry>
  
  <entry>
    <title>Tampermonkey屏蔽腾讯云广告</title>
    <link href="https://nmk0718.github.io/2025/01/04/Tampermonkey%E5%B1%8F%E8%94%BD%E8%85%BE%E8%AE%AF%E4%BA%91%E5%B9%BF%E5%91%8A/"/>
    <id>https://nmk0718.github.io/2025/01/04/Tampermonkey%E5%B1%8F%E8%94%BD%E8%85%BE%E8%AE%AF%E4%BA%91%E5%B9%BF%E5%91%8A/</id>
    <published>2025-01-04T03:00:00.000Z</published>
    <updated>2025-02-10T04:00:59.767Z</updated>
    
    <content type="html"><![CDATA[<p>在使用腾讯云控制台过程中遇到很多广告，每次点x后还会弹🤮，影响页面展示。通过油猴脚本进行过滤广告<br>腾讯云原页面<br><img src="https://nmk0718.github.io/image/tencent_ads_cvm.png"><br><img src="https://nmk0718.github.io/image/tencent_ads_cdn.png"><br>通过kimi进行编写脚本，一开始想对接口直接拦截，但是配置后不生效，后续通过页面隐藏元素实现<br>通过F12检查元素查看广告对应的元素<br><img src="https://nmk0718.github.io/image/check_web_element.png"><br>让kimi通过元素进行隐藏，编写油猴脚本，最终脚本如下：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ==UserScript==</span></span><br><span class="line"><span class="comment">// @name         屏蔽特定页面的广告和提示</span></span><br><span class="line"><span class="comment">// @namespace    http://tampermonkey.net/</span></span><br><span class="line"><span class="comment">// @version      0.1</span></span><br><span class="line"><span class="comment">// @description  屏蔽特定页面的广告和提示</span></span><br><span class="line"><span class="comment">// @author       Kimi</span></span><br><span class="line"><span class="comment">// @match        https://console.cloud.tencent.com/*</span></span><br><span class="line"><span class="comment">// @grant        none</span></span><br><span class="line"><span class="comment">// @run-at       document-body</span></span><br><span class="line"><span class="comment">// ==/UserScript==</span></span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">    'use strict'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个函数来隐藏元素</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">hideElements</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> currentUrl = <span class="built_in">window</span>.location.href;</span><br><span class="line">        <span class="comment">// 隐藏具有 data-sid="opc-ads" 属性的 ins 元素</span></span><br><span class="line">        <span class="keyword">const</span> ads = <span class="built_in">document</span>.querySelectorAll(<span class="string">'ins[data-sid="opc-ads"]'</span>);</span><br><span class="line">        ads.forEach(<span class="function"><span class="params">ad</span> =&gt;</span> &#123;</span><br><span class="line">            ad.style.display = <span class="string">'none'</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 隐藏所有以 app- 开头并包含 alert 的 div 元素</span></span><br><span class="line">        <span class="keyword">const</span> alerts = <span class="built_in">document</span>.querySelectorAll(<span class="string">'div[class^="app-"][class*="alert"]'</span>);</span><br><span class="line">        alerts.forEach(<span class="function"><span class="params">alert</span> =&gt;</span> &#123;</span><br><span class="line">            alert.style.display = <span class="string">'none'</span>;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (currentUrl.includes(<span class="string">'/cvm/instance/index?rid=1'</span>)) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 隐藏具有 class="app-cvm-alert" 的 div 元素</span></span><br><span class="line">            <span class="keyword">const</span> alerts = <span class="built_in">document</span>.querySelectorAll(<span class="string">'div.app-cvm-alert'</span>);</span><br><span class="line">            alerts.forEach(<span class="function"><span class="params">alert</span> =&gt;</span> &#123;</span><br><span class="line">                alert.style.display = <span class="string">'none'</span>;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (currentUrl.includes(<span class="string">'/cdn'</span>)) &#123;</span><br><span class="line">            <span class="comment">// 隐藏具有 class="streams-to-eo-ads-bar" 的 div 元素</span></span><br><span class="line">            <span class="keyword">const</span> adsBar = <span class="built_in">document</span>.querySelector(<span class="string">'div.streams-to-eo-ads-bar'</span>);</span><br><span class="line">            <span class="keyword">if</span> (adsBar) &#123;</span><br><span class="line">                adsBar.style.display = <span class="string">'none'</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 隐藏具有 class="streams-to-eo-ads-content" 的 div 元素</span></span><br><span class="line">            <span class="keyword">const</span> adsContent = <span class="built_in">document</span>.querySelector(<span class="string">'div.streams-to-eo-ads-content'</span>);</span><br><span class="line">            <span class="keyword">if</span> (adsContent) &#123;</span><br><span class="line">                adsContent.style.display = <span class="string">'none'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始检查</span></span><br><span class="line">    hideElements();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 MutationObserver 监控 DOM 变化</span></span><br><span class="line">    <span class="keyword">const</span> observer = <span class="keyword">new</span> MutationObserver(<span class="function">(<span class="params">mutations</span>) =&gt;</span> &#123;</span><br><span class="line">        mutations.forEach(<span class="function">(<span class="params">mutation</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (mutation.addedNodes) &#123;</span><br><span class="line">                mutation.addedNodes.forEach(<span class="function">(<span class="params">node</span>) =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (node.nodeType === <span class="number">1</span>) &#123;</span><br><span class="line">                        hideElements();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 配置观察器选项</span></span><br><span class="line">    <span class="keyword">const</span> config = &#123;</span><br><span class="line">        childList: <span class="literal">true</span>,</span><br><span class="line">        subtree: <span class="literal">true</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 开始观察整个文档</span></span><br><span class="line">    observer.observe(<span class="built_in">document</span>.body, config);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>开启油猴插件后，重新访问腾讯云控制台，可看到屏蔽后效果图<br><img src="https://nmk0718.github.io/image/tencent_cvm.png"><br><img src="https://nmk0718.github.io/image/tencent_cdn.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在使用腾讯云控制台过程中遇到很多广告，每次点x后还会弹🤮，影响页面展示。通过油猴脚本进行过滤广告&lt;br&gt;腾讯云原页面&lt;br&gt;&lt;img src=&quot;https://nmk0718.github.io/image/tencent_ads_cvm.png&quot;&gt;&lt;br&gt;&lt;img sr</summary>
      
    
    
    
    
    <category term="windows" scheme="https://nmk0718.github.io/tag/windows/"/>
    
  </entry>
  
  <entry>
    <title>iterm2</title>
    <link href="https://nmk0718.github.io/2025/01/03/iterm2/"/>
    <id>https://nmk0718.github.io/2025/01/03/iterm2/</id>
    <published>2025-01-03T03:37:00.000Z</published>
    <updated>2025-02-10T04:00:59.747Z</updated>
    
    <content type="html"><![CDATA[<h3 id="ssh"><a href="#ssh" class="headerlink" title="ssh"></a>ssh</h3><ol><li><p>iterm2—&gt;Preferences—&gt;Profiles，配置一个新的profile</p><img src="https://nmk0718.github.io/image/jumpserver_profile.png"></li><li><p>iterm2—&gt;Window—&gt;Password Manager，AccountName只是提示，Password配置正确即可</p><img src="https://nmk0718.github.io/image/jumpserver_password.png"></li><li><p>对应Profiles里面的Advanced选项，找到Triggers，点击Edit</p><img src="https://nmk0718.github.io/image/jumpserver_triggers.png">配置触发打开Password Manager<img src="https://nmk0718.github.io/image/jumpserver_open_password.png"></li><li><p>配置SSH会话复制、会话保持<br>在~/.ssh/config文件里添加几行配置即可。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 会话复制相关配置</span></span><br><span class="line">Host *</span><br><span class="line">ControlMaster auto</span><br><span class="line">ControlPath ~/.ssh/%r@%h:%p.socket</span><br><span class="line"></span><br><span class="line">ControlPersist yes</span><br><span class="line">ServerAliveInterval 10 <span class="comment"># 每隔10s发一次心跳</span></span><br><span class="line">ServerAliveCountMax 3  <span class="comment"># 三次心跳没响应则关闭连接</span></span><br></pre></td></tr></table></figure></li><li><p><code>command + o</code>选择服务器连接，配置自动关闭窗口</p><img src="https://nmk0718.github.io/image/closewindow.png"></li></ol><p>参考文档：<a href="https://blog.csdn.net/weixin_52777294/article/details/112410350" target="_blank" rel="noopener">https://blog.csdn.net/weixin_52777294/article/details/112410350</a></p><h3 id="rzsz"><a href="#rzsz" class="headerlink" title="rzsz"></a>rzsz</h3><ol><li><p>在mac上安装lrzsz</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brew install lrzsz</span><br></pre></td></tr></table></figure></li><li><p>将iterm2-send-zmodem.sh和iterm2-recv-zmodem.sh脚本保存在/usr/local/bin/<br>iterm2-recv-zmodem.sh</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># Author: Matt Mastracci (matthew@mastracci.com)</span></span><br><span class="line"><span class="comment"># AppleScript from http://stackoverflow.com/questions/4309087/cancel-button-on-osascript-in-a-bash-script</span></span><br><span class="line"><span class="comment"># licensed under cc-wiki with attribution required </span></span><br><span class="line"><span class="comment"># Remainder of script public domain</span></span><br><span class="line"></span><br><span class="line">osascript -e <span class="string">'tell application "iTerm2" to version'</span> &gt; /dev/null 2&gt;&amp;1 &amp;&amp; NAME=iTerm2 || NAME=iTerm</span><br><span class="line"><span class="keyword">if</span> [[ <span class="variable">$NAME</span> = <span class="string">"iTerm"</span> ]]; <span class="keyword">then</span></span><br><span class="line">FILE=$(osascript -e <span class="string">'tell application "iTerm" to activate'</span> -e <span class="string">'tell application "iTerm" to set thefile to choose folder with prompt "Choose a folder to place received files in"'</span> -e <span class="string">"do shell script (\"echo \"&amp;(quoted form of POSIX path of thefile as Unicode text)&amp;\"\")"</span>)</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">FILE=$(osascript -e <span class="string">'tell application "iTerm2" to activate'</span> -e <span class="string">'tell application "iTerm2" to set thefile to choose folder with prompt "Choose a folder to place received files in"'</span> -e <span class="string">"do shell script (\"echo \"&amp;(quoted form of POSIX path of thefile as Unicode text)&amp;\"\")"</span>)</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [[ <span class="variable">$FILE</span> = <span class="string">""</span> ]]; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> Cancelled.</span><br><span class="line"><span class="comment"># Send ZModem cancel</span></span><br><span class="line"><span class="built_in">echo</span> -e \\x18\\x18\\x18\\x18\\x18</span><br><span class="line">sleep 1</span><br><span class="line"><span class="built_in">echo</span></span><br><span class="line"><span class="built_in">echo</span> \<span class="comment"># Cancelled transfer</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">cd</span> <span class="string">"<span class="variable">$FILE</span>"</span></span><br><span class="line">/usr/<span class="built_in">local</span>/bin/rz --rename --escape --binary --bufsize 4096 </span><br><span class="line">sleep 1</span><br><span class="line"><span class="built_in">echo</span></span><br><span class="line"><span class="built_in">echo</span></span><br><span class="line"><span class="built_in">echo</span> \<span class="comment"># Sent \-\&gt; $FILE</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p> iterm2-send-zmodem.sh</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># Author: Matt Mastracci (matthew@mastracci.com)</span></span><br><span class="line"><span class="comment"># AppleScript from http://stackoverflow.com/questions/4309087/cancel-button-on-osascript-in-a-bash-script</span></span><br><span class="line"><span class="comment"># licensed under cc-wiki with attribution required </span></span><br><span class="line"><span class="comment"># Remainder of script public domain</span></span><br><span class="line"></span><br><span class="line">osascript -e <span class="string">'tell application "iTerm2" to version'</span> &gt; /dev/null 2&gt;&amp;1 &amp;&amp; NAME=iTerm2 || NAME=iTerm</span><br><span class="line"><span class="keyword">if</span> [[ <span class="variable">$NAME</span> = <span class="string">"iTerm"</span> ]]; <span class="keyword">then</span></span><br><span class="line">FILE=$(osascript -e <span class="string">'tell application "iTerm" to activate'</span> -e <span class="string">'tell application "iTerm" to set thefile to choose file with prompt "Choose a file to send"'</span> -e <span class="string">"do shell script (\"echo \"&amp;(quoted form of POSIX path of thefile as Unicode text)&amp;\"\")"</span>)</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">FILE=$(osascript -e <span class="string">'tell application "iTerm2" to activate'</span> -e <span class="string">'tell application "iTerm2" to set thefile to choose file with prompt "Choose a file to send"'</span> -e <span class="string">"do shell script (\"echo \"&amp;(quoted form of POSIX path of thefile as Unicode text)&amp;\"\")"</span>)</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [[ <span class="variable">$FILE</span> = <span class="string">""</span> ]]; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> Cancelled.</span><br><span class="line"><span class="comment"># Send ZModem cancel</span></span><br><span class="line"><span class="built_in">echo</span> -e \\x18\\x18\\x18\\x18\\x18</span><br><span class="line">sleep 1</span><br><span class="line"><span class="built_in">echo</span></span><br><span class="line"><span class="built_in">echo</span> \<span class="comment"># Cancelled transfer</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">/usr/<span class="built_in">local</span>/bin/sz <span class="string">"<span class="variable">$FILE</span>"</span> --escape --binary --bufsize 4096</span><br><span class="line">sleep 1</span><br><span class="line"><span class="built_in">echo</span></span><br><span class="line"><span class="built_in">echo</span> \<span class="comment"># Received "$FILE"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure></li><li><p>在 iTerm 2 中设置触发器<br>Setting &gt;&gt; Profiles &gt;&gt; 自定义的Profile &gt;&gt; Advanced &gt;&gt; Tiggers &gt;&gt; Edit</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Regular expression: rz waiting to receive.\*\*B0100</span><br><span class="line">Action: Run Silent Coprocess</span><br><span class="line">Parameters: /usr/local/bin/iterm2-send-zmodem.sh</span><br><span class="line">Instant: checked</span><br><span class="line">Enabled: checked</span><br><span class="line"></span><br><span class="line">Regular expression: \*\*B00000000000000</span><br><span class="line">Action: Run Silent Coprocess</span><br><span class="line">Parameters: /usr/local/bin/iterm2-recv-zmodem.sh</span><br><span class="line">Instant: checked</span><br><span class="line">Enabled: checked</span><br></pre></td></tr></table></figure></li></ol><p>在控制台输入rz，选择本地机器上要发送的文件，即可上传文件到服务器,sz filename，在本地机器上选择要接收的文件夹，即可下载到本地<br>参考文档：<a href="https://github.com/robberphex/iTerm2-zmodem" target="_blank" rel="noopener">https://github.com/robberphex/iTerm2-zmodem</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;ssh&quot;&gt;&lt;a href=&quot;#ssh&quot; class=&quot;headerlink&quot; title=&quot;ssh&quot;&gt;&lt;/a&gt;ssh&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;iterm2—&amp;gt;Preferences—&amp;gt;Profiles，配置一个新的profile&lt;/p&gt;
&lt;im</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Windows热点共享5Ghz</title>
    <link href="https://nmk0718.github.io/2024/12/24/Windows%E7%83%AD%E7%82%B9%E5%85%B1%E4%BA%AB5Ghz/"/>
    <id>https://nmk0718.github.io/2024/12/24/Windows%E7%83%AD%E7%82%B9%E5%85%B1%E4%BA%AB5Ghz/</id>
    <published>2024-12-24T05:34:00.000Z</published>
    <updated>2025-02-10T04:00:59.703Z</updated>
    
    <content type="html"><![CDATA[<p>背景：</p><ul><li>办公电脑连接office网络共享热点，自带MacBook Pro连接热点内网办公，实现直接访问内网也不被监控。遇到的问题为连接共享热点后chrome访问页面很慢.</li></ul><p>解决方案:</p><ul><li>MacBook Pro按住option键,点击右上角wifi按钮,可看到为2.4Ghz频率</li><li>Windows打开设备管理器,找到wifi的设备，右键属性,更改为5Ghz<img src="https://nmk0718.github.io/image/change5g.jpg"></li><li>热点共享,编辑频率,改为5Ghz,打开热点<img src="https://nmk0718.github.io/image/frequency.jpg"></li><li>MacBook Pro连接后,打开页面很快,查看频率<img src="https://nmk0718.github.io/image/wifi5Ghz.png"></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;背景：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;办公电脑连接office网络共享热点，自带MacBook Pro连接热点内网办公，实现直接访问内网也不被监控。遇到的问题为连接共享热点后chrome访问页面很慢.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;解决方案:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MacBo</summary>
      
    
    
    
    
    <category term="windows" scheme="https://nmk0718.github.io/tag/windows/"/>
    
  </entry>
  
  <entry>
    <title>docker容器监控</title>
    <link href="https://nmk0718.github.io/2024/11/26/docker%E5%AE%B9%E5%99%A8%E7%9B%91%E6%8E%A7/"/>
    <id>https://nmk0718.github.io/2024/11/26/docker%E5%AE%B9%E5%99%A8%E7%9B%91%E6%8E%A7/</id>
    <published>2024-11-26T07:45:00.000Z</published>
    <updated>2024-12-27T06:07:20.063Z</updated>
    
    <content type="html"><![CDATA[<h3 id="背景信息："><a href="#背景信息：" class="headerlink" title="背景信息："></a>背景信息：</h3><blockquote><p>在现代企业运营中，Prometheus 已被广泛部署用于监控 Kubernetes 集群、中间件以及服务器，以实现快速的问题定位和预警。尽管 Prometheus 与 cAdvisor 结合使用可以收集一台机器上所有运行的容器信息，对节点机器上的 CPU 使用情况、内存使用情况、网络吞吐量及文件系统使用情况进行实时监控和性能数据采集，但这种监控方式存在一定的局限性。在监控单个主机内运行容器的服务健康状态方面存在不足。这种局限性可能导致在服务出现故障时无法及时感知，影响服务的连续性和稳定性</p></blockquote><h3 id="目的"><a href="#目的" class="headerlink" title="目的:"></a>目的:</h3><blockquote><p>有效地监控主机内运行的 Docker 容器运行状态，建立一个全面的监控和告警系统，预防服务中断，确保服务的高可用性和业务连续性</p></blockquote><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案:"></a>解决方案:</h3><p>编写GO脚本使用Docker Engine API的/stats端点来获取获取CPU,内存,容器运行状态,进程数。结合 nvidia_gpu_exporter 收集 GPU 指标，并通过 VictoriaMetrics 和 Grafana 实现监控与告警（因有的容器内需要手动激活环境后，启动服务，所以只监控容器状态不能确保容器存活，启动服务不是主进程容器不会挂掉，采用进程的方式更合理）<br>废弃方案:通过cAdvisor的container_processes指标获取进程数量进行监控，但是发现手动安装的没有该指标，k8s的kubelet是有该指标的。</p><h4 id="部署Docker-process-exporter"><a href="#部署Docker-process-exporter" class="headerlink" title="部署Docker_process_exporter"></a>部署Docker_process_exporter</h4><p>机器ip和docker版本：<br>10.1.16.250 Version: 24.0.7</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#把脚本上传到服务器上执行</span></span><br><span class="line">root@VM-ubuntu:~<span class="comment"># rz</span></span><br><span class="line">root@VM-ubuntu:~<span class="comment"># chmod +x Docker_process_exporter_v24.0.7</span></span><br><span class="line">root@VM-ubuntu:~<span class="comment"># nohup ./Docker_process_exporter_v24.0.7  &amp;</span></span><br></pre></td></tr></table></figure><h4 id="采集的指标格式"><a href="#采集的指标格式" class="headerlink" title="采集的指标格式"></a>采集的指标格式</h4><p>使用curl <a href="http://localhost:9190/metrics" target="_blank" rel="noopener">http://localhost:9190/metrics</a> 可以看到当前采集的指标</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#cpu使用率</span></span><br><span class="line">docker_container_cpu_usage&#123;</span><br><span class="line">    containerId=<span class="string">"142b0b391a1862f101623ba4739afa7e2dd45254fef4344fdf1d37cc2adde3e0"</span>, </span><br><span class="line">    containerName=<span class="string">"ailabel"</span>, </span><br><span class="line">    image=<span class="string">"ailabel:v1.9.5"</span>, </span><br><span class="line">    instance=<span class="string">"10.1.16.250:9190"</span>, </span><br><span class="line">    job=<span class="string">"go-process-exporter"</span>, </span><br><span class="line">    status=<span class="string">"running"</span>, </span><br><span class="line">    vmagent_ha=<span class="string">"victoria-metrics/vmagent-ha"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#内存使用率</span></span><br><span class="line">docker_container_mem_usage&#123;</span><br><span class="line">    containerId=<span class="string">"142b0b391a1862f101623ba4739afa7e2dd45254fef4344fdf1d37cc2adde3e0"</span>, </span><br><span class="line">    containerName=<span class="string">"ailabel"</span>, </span><br><span class="line">    image=<span class="string">"ailabel:v1.9.5"</span>, </span><br><span class="line">    instance=<span class="string">"10.1.16.250:9190"</span>, </span><br><span class="line">    job=<span class="string">"go-process-exporter"</span>, </span><br><span class="line">    status=<span class="string">"running"</span>, </span><br><span class="line">    vmagent_ha=<span class="string">"victoria-metrics/vmagent-ha"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#磁盘使用率</span></span><br><span class="line">docker_instance_disk_usage&#123;</span><br><span class="line">    device=<span class="string">"/dev/vda1"</span>, </span><br><span class="line">    instance=<span class="string">"10.1.16.250:9190"</span>, </span><br><span class="line">    job=<span class="string">"go-process-exporter"</span>, </span><br><span class="line">    mountPath=<span class="string">"/"</span>, </span><br><span class="line">    vmagent_ha=<span class="string">"victoria-metrics/vmagent-ha"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#容器运行状态</span></span><br><span class="line">docker_container_info&#123;</span><br><span class="line">    containerId=<span class="string">"142b0b391a1862f101623ba4739afa7e2dd45254fef4344fdf1d37cc2adde3e0"</span>, </span><br><span class="line">    containerName=<span class="string">"ailabel"</span>, </span><br><span class="line">    image=<span class="string">"ailabel:v1.9.5"</span>, </span><br><span class="line">    instance=<span class="string">"10.1.16.250:9190"</span>, </span><br><span class="line">    job=<span class="string">"go-process-exporter"</span>,</span><br><span class="line">    status=<span class="string">"running"</span>, </span><br><span class="line">    vmagent_ha=<span class="string">"victoria-metrics/vmagent-ha"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#容器进程信息</span></span><br><span class="line">docker_container_process_info&#123;</span><br><span class="line">    <span class="built_in">command</span>=<span class="string">"python OpenPCDet/tools/predict_openpcdet_produce.py"</span> </span><br><span class="line">    containerId=<span class="string">"142b0b391a1862f101623ba4739afa7e2dd45254fef4344fdf1d37cc2adde3e0"</span>, </span><br><span class="line">    containerName=<span class="string">"ailabel"</span>, </span><br><span class="line">    image=<span class="string">"ailabel:v1.9.5"</span>, </span><br><span class="line">    instance=<span class="string">"10.1.16.250:9190"</span>, </span><br><span class="line">    job=<span class="string">"go-process-exporter"</span>, </span><br><span class="line">    pid=<span class="string">"14781"</span>, </span><br><span class="line">    vmagent_ha=<span class="string">"victoria-metrics/vmagent-ha"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="配置采集"><a href="#配置采集" class="headerlink" title="配置采集"></a>配置采集</h4><p>新建job,把需要监控的主机和采集间隔填写进去</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">root@VM-victoria-metrics:~#</span> <span class="string">vi</span> <span class="string">/data/victoria-metrics/vmagent-victoriametrics.yaml</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">go-process-exporter</span></span><br><span class="line">      <span class="attr">scrape_interval:</span> <span class="string">15s</span></span><br><span class="line">      <span class="attr">static_configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">targets:</span> <span class="string">['10.1.7.151:9190','10.1.7.67:9190','10.1.16.154:9190','10.1.16.250:9190']</span></span><br></pre></td></tr></table></figure><p>加载配置文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@VM-victoria-metrics:~<span class="comment"># kubectl apply -f vmagent-victoriametrics.yaml -n victoria-metrics</span></span><br><span class="line">vmagent.operator.victoriametrics.com/vmagent-ha unchanged</span><br></pre></td></tr></table></figure><p>验证是否采集</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">使用victoriametrics的vmui页面进行查询</span><br><span class="line">http://&lt;vmselect&gt;:8481/select/&lt;accountID&gt;/vmui/</span><br><span class="line"></span><br><span class="line">或者使用grafana的Explore进行查询</span><br></pre></td></tr></table></figure><h4 id="配置图表"><a href="#配置图表" class="headerlink" title="配置图表"></a>配置图表</h4><ul><li><p>配置变量<br>通过CVM变量来过滤监控的机器,ContainerName变量来过滤机器内运行的容器<br><br><img src="\image\grafana-cvm.png"><br></p><img src="\image\grafana-containername.png"></li><li><p>配置面板<br>CPU使用率</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker_container_cpu_usage&#123;instance=<span class="string">"<span class="variable">$CVM</span>:9190"</span>,status=<span class="string">"running"</span>,containerName=<span class="string">"<span class="variable">$ContainerName</span>"</span>&#125;</span><br></pre></td></tr></table></figure><p>  内存使用率</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker_container_mem_usage&#123;instance=<span class="string">"<span class="variable">$CVM</span>:9190"</span>,status=<span class="string">"running"</span>,containerName=<span class="string">"<span class="variable">$ContainerName</span>"</span>&#125;</span><br></pre></td></tr></table></figure><p>  磁盘使用率</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sum(docker_instance_disk_usage&#123;instance=<span class="string">"<span class="variable">$CVM</span>:9190"</span>&#125;) by (device,mountPath)</span><br></pre></td></tr></table></figure><p>  GPU</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#GPU温度</span></span><br><span class="line">nvidia_smi_temperature_gpu&#123;instance=<span class="string">"<span class="variable">$CVM</span>:9835"</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#GPU显存使用量</span></span><br><span class="line">nvidia_smi_memory_used_bytes&#123;instance=<span class="string">"<span class="variable">$CVM</span>:9835"</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#GPU显存总量</span></span><br><span class="line">nvidia_smi_memory_total_bytes&#123;instance=<span class="string">"<span class="variable">$CVM</span>:9835"</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#GPU使用率</span></span><br><span class="line">(nvidia_smi_memory_used_bytes&#123;instance=<span class="string">"<span class="variable">$CVM</span>:9835"</span>&#125; / nvidia_smi_memory_total_bytes&#123;instance=<span class="string">"<span class="variable">$CVM</span>:9835"</span>&#125;)* 100</span><br></pre></td></tr></table></figure><p>  容器异常运行状态</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#退出状态的容器条数</span></span><br><span class="line">count(docker_container_info&#123;instance=<span class="string">"<span class="variable">$CVM</span>:9190"</span>,status=<span class="string">"exited"</span>&#125;) by (status)</span><br><span class="line"></span><br><span class="line"><span class="comment">#运行中状态的容器条数</span></span><br><span class="line">count(docker_container_info&#123;instance=<span class="string">"<span class="variable">$CVM</span>:9190"</span>,status=<span class="string">"running"</span>&#125;) by (status)</span><br></pre></td></tr></table></figure><p>  容器运行进程数</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#容器内启动的命令+pid+容器名称</span></span><br><span class="line">count(docker_container_process_info&#123;instance=<span class="string">"<span class="variable">$CVM</span>:9190"</span>,containerName=<span class="string">"<span class="variable">$ContainerName</span>"</span>&#125;) by (<span class="built_in">command</span>,pid,containerName)</span><br></pre></td></tr></table></figure></li></ul><h3 id="最终效果图："><a href="#最终效果图：" class="headerlink" title="最终效果图："></a>最终效果图：</h3><img src="\image\grafana.png">]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;背景信息：&quot;&gt;&lt;a href=&quot;#背景信息：&quot; class=&quot;headerlink&quot; title=&quot;背景信息：&quot;&gt;&lt;/a&gt;背景信息：&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;在现代企业运营中，Prometheus 已被广泛部署用于监控 Kubernetes 集群、</summary>
      
    
    
    
    
    <category term="docker" scheme="https://nmk0718.github.io/tag/docker/"/>
    
  </entry>
  
  <entry>
    <title>VictoriaMetrics</title>
    <link href="https://nmk0718.github.io/2024/11/25/VictoriaMetrics/"/>
    <id>https://nmk0718.github.io/2024/11/25/VictoriaMetrics/</id>
    <published>2024-11-25T08:30:00.000Z</published>
    <updated>2025-02-10T04:00:59.812Z</updated>
    
    <content type="html"><![CDATA[<p>VictoriaMetrics 是一款快速、经济高效且可扩展的时间序列数据库。可用作 Prometheus 的长期远程存储。如果提取率低于每秒​​一百万个数据点，建议使用单节点版本，而不是集群版本。</p><p>VictoriaMetrics集群由以下服务组成：</p><ul><li><code>vmstorage</code> 存储原始数据并返回给定标签过滤器在给定时间范围内的查询数据</li><li><code>vminsert</code> 接受采集的数据，并根据指标名称及其所有标签的一致性哈希，将其传播到 vmstorage 节点之间</li><li><code>vmselect</code> 通过从所有配置的 vmstorage 节点获取所需数据来执行传入查询</li><li><code>vmalert</code> 负责告警，和 Prometheus 一样支持纪录、告警两种规则配置与发送告警通知，允许在注解中使用 Go 模板来格式化数据、迭代或执行表达式，支持跨租户发送警报和记录规则</li><li><code>vmagent</code> 负责数据采集，重新标记和过滤收集到的指标，并通过 Prometheus 协议或通过 VictoriaMetrics 协议将它们存储在 VictoriaMetrics 或任何其他存储系统中。<img src="https://docs.victoriametrics.com/Cluster-VictoriaMetrics_cluster-scheme.webp"></li></ul><p>部署参考文档：<br><a href="https://docs.victoriametrics.com/helm/victoriametrics-operator/" target="_blank" rel="noopener">https://docs.victoriametrics.com/helm/victoriametrics-operator/</a><br><a href="https://docs.victoriametrics.com/cluster-victoriametrics/" target="_blank" rel="noopener">https://docs.victoriametrics.com/cluster-victoriametrics/</a><br><a href="https://zhuanlan.zhihu.com/p/715516533" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/715516533</a></p><p>⚠️本文档中的操作均在本地进行，如需生产部署，请把port-forward转换为ingress转发，vmcluster调整合适的配置.</p><h2 id="VictoriaMetrics-Helm-存储库"><a href="#VictoriaMetrics-Helm-存储库" class="headerlink" title="VictoriaMetrics Helm 存储库"></a>VictoriaMetrics Helm 存储库</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#helm添加repo</span></span><br><span class="line">➜  ~ helm repo add vm https://victoriametrics.github.io/helm-charts/</span><br><span class="line"><span class="string">"vm"</span> has been added to your repositories</span><br><span class="line"></span><br><span class="line"><span class="comment">#helm更新repo</span></span><br><span class="line">➜  ~ helm repo update</span><br><span class="line">Hang tight <span class="keyword">while</span> we grab the latest from your chart repositories...</span><br><span class="line">...Successfully got an update from the <span class="string">"aliyun"</span> chart repository</span><br><span class="line">...Successfully got an update from the <span class="string">"vm"</span> chart repository</span><br><span class="line">Update Complete. ⎈Happy Helming!⎈</span><br><span class="line"></span><br><span class="line"><span class="comment">#helm查看相关服务和版本</span></span><br><span class="line">➜  ~ helm search repo vm/</span><br><span class="line">NAME                           CHART VERSIONAPP VERSIONDESCRIPTION</span><br><span class="line">vm/victoria-logs-single        0.8.2        v1.0.0     Victoria Logs Single version - high-performance...</span><br><span class="line">vm/victoria-metrics-agent      0.14.9       v1.106.1   Victoria Metrics Agent - collects metrics from ...</span><br><span class="line">vm/victoria-metrics-alert      0.12.6       v1.106.1   Victoria Metrics Alert - executes a list of giv...</span><br><span class="line">vm/victoria-metrics-anomaly    1.6.7        v1.18.4    Victoria Metrics Anomaly Detection - a service ...</span><br><span class="line">vm/victoria-metrics-auth       0.7.7        v1.106.1   Victoria Metrics Auth - is a simple auth proxy ...</span><br><span class="line">vm/victoria-metrics-cluster    0.14.12      v1.106.1   Victoria Metrics Cluster version - high-perform...</span><br><span class="line">vm/victoria-metrics-common     0.0.31                  Victoria Metrics Common - contains shared templ...</span><br><span class="line">vm/victoria-metrics-distributed0.5.0        v1.106.1   A Helm chart <span class="keyword">for</span> Running VMCluster on Multiple ...</span><br><span class="line">vm/victoria-metrics-gateway    0.5.7        v1.106.1   Victoria Metrics Gateway - Auth &amp; Rate-Limittin...</span><br><span class="line">vm/victoria-metrics-k8s-stack  0.28.4       v1.106.1   Kubernetes monitoring on VictoriaMetrics stack....</span><br><span class="line">vm/victoria-metrics-operator   0.38.0       v0.49.1    Victoria Metrics Operator</span><br><span class="line">vm/victoria-metrics-single     0.12.7       v1.106.1   Victoria Metrics Single version - high-performa...</span><br></pre></td></tr></table></figure><h2 id="安装-VictoriaMetrics-Operator"><a href="#安装-VictoriaMetrics-Operator" class="headerlink" title="安装 VictoriaMetrics-Operator"></a>安装 VictoriaMetrics-Operator</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#使用命令安装</span></span><br><span class="line">➜  ~ helm install vmo vm/victoria-metrics-operator</span><br><span class="line">NAME: vmo</span><br><span class="line">LAST DEPLOYED: Tue Dec 24 14:38:21 2024</span><br><span class="line">NAMESPACE: default</span><br><span class="line">STATUS: deployed</span><br><span class="line">REVISION: 1</span><br><span class="line">TEST SUITE: None</span><br><span class="line">NOTES:</span><br><span class="line">victoria-metrics-operator has been installed. Check its status by running:</span><br><span class="line">  kubectl --namespace default get pods -l <span class="string">"app.kubernetes.io/instance=vmo"</span></span><br><span class="line"></span><br><span class="line">Get more information on https://github.com/VictoriaMetrics/helm-charts/tree/master/charts/victoria-metrics-operator.</span><br><span class="line">See <span class="string">"Getting started guide for VM Operator"</span> on https://docs.victoriametrics.com/guides/getting-started-with-vm-operator</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看pod状态</span></span><br><span class="line">➜  ~ kubectl get pods -A | grep <span class="string">'vmo'</span></span><br><span class="line">default       vmo-victoria-metrics-operator-54bf97548f-fj8j7   1/1     Running   0             1m</span><br></pre></td></tr></table></figure><h2 id="安装VictoriaMetrics-Cluster"><a href="#安装VictoriaMetrics-Cluster" class="headerlink" title="安装VictoriaMetrics Cluster"></a>安装VictoriaMetrics Cluster</h2><p>Operator 会根据我们的定义去部署集群,可以通过 kubectl explain VMCluster.spec 来查看对象可配置的属性</p><h4 id="vmcluster-yaml"><a href="#vmcluster-yaml" class="headerlink" title="vmcluster.yaml"></a>vmcluster.yaml</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">operator.victoriametrics.com/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">VMCluster</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">vmcluster</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">victoria-metrics</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="comment">#数据保留的时长,默认保留期为 1 个月， 默认单位为 m(月)，支持的单位有 h (hour), d (day), w (week), y (year)</span></span><br><span class="line">  <span class="attr">retentionPeriod:</span> <span class="string">"1w"</span></span><br><span class="line">  <span class="comment">#开启副本，并控制副本数量，会往多个vmstorage插入同一份样本数据</span></span><br><span class="line">  <span class="comment">#replicationFactor: 2</span></span><br><span class="line">  <span class="attr">vmstorage:</span></span><br><span class="line">    <span class="comment">#副本数</span></span><br><span class="line">    <span class="attr">replicaCount:</span> <span class="number">2</span></span><br><span class="line">    <span class="comment">#数据持久化</span></span><br><span class="line">    <span class="attr">storageDataPath:</span> <span class="string">/vm-data</span></span><br><span class="line">    <span class="attr">storage:</span></span><br><span class="line">      <span class="attr">volumeClaimTemplate:</span></span><br><span class="line">        <span class="attr">spec:</span></span><br><span class="line">          <span class="attr">storageClassName:</span> <span class="string">cbs</span></span><br><span class="line">          <span class="attr">resources:</span></span><br><span class="line">            <span class="attr">requests:</span></span><br><span class="line">              <span class="attr">storage:</span> <span class="string">10Gi</span></span><br><span class="line">    <span class="comment">#资源大小</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="attr">limits:</span></span><br><span class="line">        <span class="attr">cpu:</span> <span class="string">"0.5"</span></span><br><span class="line">        <span class="attr">memory:</span> <span class="string">500Mi</span></span><br><span class="line">  <span class="attr">vmselect:</span></span><br><span class="line">    <span class="attr">replicaCount:</span> <span class="number">2</span></span><br><span class="line">    <span class="attr">cacheMountPath:</span> <span class="string">"/select-cache"</span></span><br><span class="line">    <span class="attr">storage:</span></span><br><span class="line">      <span class="attr">volumeClaimTemplate:</span></span><br><span class="line">        <span class="attr">spec:</span></span><br><span class="line">          <span class="attr">storageClassName:</span> <span class="string">cbs</span></span><br><span class="line">          <span class="attr">resources:</span></span><br><span class="line">            <span class="attr">requests:</span></span><br><span class="line">              <span class="attr">storage:</span> <span class="string">"2Gi"</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="attr">limits:</span></span><br><span class="line">        <span class="attr">cpu:</span> <span class="string">"0.3"</span></span><br><span class="line">        <span class="attr">memory:</span> <span class="string">"300Mi"</span></span><br><span class="line">  <span class="attr">vminsert:</span></span><br><span class="line">    <span class="attr">replicaCount:</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><p><code>注意</code>：</p><ul><li>开启replicationFactor，vmagent会产生replicationFactor份冗余数据，需要dedup.minScrapeInterval参数，来去除重复数据。</li><li>开启或修改replicationFactor,可能造成数据部分丢失。</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#根据自定义的配置进行安装</span></span><br><span class="line">➜  ~ kubectl apply -f vmcluster.yaml</span><br><span class="line">vmcluster.operator.victoriametrics.com/vmcluster created</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看是否正常启动</span></span><br><span class="line">➜  ~ kubectl get pods</span><br><span class="line">NAME                                             READY   STATUS    RESTARTS   AGE</span><br><span class="line">vminsert-vmcluster-8587774678-2xxt6              1/1     Running   0          12s</span><br><span class="line">vminsert-vmcluster-8587774678-mplrr              1/1     Running   0          12s</span><br><span class="line">vmo-victoria-metrics-operator-5d4ff4d8f4-gk4gj   1/1     Running   0          3m58s</span><br><span class="line">vmselect-vmcluster-0                             1/1     Running   0          17s</span><br><span class="line">vmselect-vmcluster-1                             1/1     Running   0          17s</span><br><span class="line">vmstorage-vmcluster-0                            1/1     Running   0          23s</span><br><span class="line">vmstorage-vmcluster-1                            1/1     Running   0          23s</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看集群状态信息</span></span><br><span class="line">➜  ~ kubectl get vmclusters</span><br><span class="line">NAME        INSERT COUNT   STORAGE COUNT   SELECT COUNT   AGE   STATUS</span><br><span class="line">vmcluster   2              2               2              63s   operational</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取vminsert服务名</span></span><br><span class="line">➜  ~ kubectl get svc | grep vminsert</span><br><span class="line">vminsert-vmcluster              ClusterIP   10.105.160.47    &lt;none&gt;        8480/TCP                     6m49s</span><br></pre></td></tr></table></figure><h3 id="vmagent-yaml"><a href="#vmagent-yaml" class="headerlink" title="vmagent.yaml"></a>vmagent.yaml</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">operator.victoriametrics.com/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">VMAgent</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">vmagent</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">serviceScrapeNamespaceSelector:</span> <span class="string">&#123;&#125;</span></span><br><span class="line">  <span class="attr">podScrapeNamespaceSelector:</span> <span class="string">&#123;&#125;</span></span><br><span class="line">  <span class="attr">podScrapeSelector:</span> <span class="string">&#123;&#125;</span></span><br><span class="line">  <span class="attr">serviceScrapeSelector:</span> <span class="string">&#123;&#125;</span></span><br><span class="line">  <span class="attr">nodeScrapeSelector:</span> <span class="string">&#123;&#125;</span></span><br><span class="line">  <span class="attr">nodeScrapeNamespaceSelector:</span> <span class="string">&#123;&#125;</span></span><br><span class="line">  <span class="attr">staticScrapeSelector:</span> <span class="string">&#123;&#125;</span></span><br><span class="line">  <span class="attr">staticScrapeNamespaceSelector:</span> <span class="string">&#123;&#125;</span></span><br><span class="line">  <span class="attr">replicaCount:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">remoteWrite:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">url:</span> <span class="string">"http://vminsert-vmcluster.default.svc.cluster.local:8480/insert/0/prometheus/api/v1/write"</span></span><br></pre></td></tr></table></figure><blockquote><p>VMAgent的<code>remoteWrite.url</code> 由以下部分组成：</p><ul><li>“service_name.VMCluster_namespace.svc.kubernetes_cluster_domain”<br>在例子中，它是vminsert-vmcluster.default.svc.cluster.local</li></ul></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#根据自定义的配置进行安装</span></span><br><span class="line">➜  ~ kubectl apply -f vmagent.yaml</span><br><span class="line">vmagent.operator.victoriametrics.com/vmagent created</span><br><span class="line"></span><br><span class="line"><span class="comment">#配置本地端口转发访问(生产环境可使用ingress或nodeport转发访问)</span></span><br><span class="line">➜  ~ kubectl port-forward svc/vmagent-vmagent 8429:8429</span><br><span class="line">Forwarding from 127.0.0.1:8429 -&gt; 8429</span><br><span class="line">Forwarding from [::1]:8429 -&gt; 8429</span><br><span class="line">Handling connection <span class="keyword">for</span> 8429</span><br><span class="line">Handling connection <span class="keyword">for</span> 8429</span><br></pre></td></tr></table></figure><p>在浏览器中打开<a href="http://127.0.0.1:8429/targets" target="_blank" rel="noopener">http://127.0.0.1:8429/targets</a> 查看VMAgent是否从 K8s 集群收集指标</p><img src="https://docs.victoriametrics.com/guides/getting-started-with-vm-operator/vmcluster.webp"><h2 id="验证-VictoriaMetrics-Cluster"><a href="#验证-VictoriaMetrics-Cluster" class="headerlink" title="验证 VictoriaMetrics Cluster"></a>验证 VictoriaMetrics Cluster</h2><p>获取vmselect服务名</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜  ~ kubectl get svc | grep vmselect</span><br><span class="line">vmselect-vmcluster              ClusterIP   None             &lt;none&gt;        8481/TCP                     31m</span><br></pre></td></tr></table></figure><h3 id="安装Grafana"><a href="#安装Grafana" class="headerlink" title="安装Grafana"></a>安装Grafana</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">cat</span> <span class="string">&lt;&lt;EOF</span> <span class="string">|</span> <span class="string">helm</span> <span class="string">install</span> <span class="string">grafana</span> <span class="string">grafana/grafana</span> <span class="string">-f</span> <span class="bullet">-</span></span><br><span class="line">  <span class="attr">datasources:</span></span><br><span class="line">    <span class="attr">datasources.yaml:</span></span><br><span class="line">      <span class="attr">apiVersion:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">datasources:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">victoriametrics</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">prometheus</span></span><br><span class="line">          <span class="attr">orgId:</span> <span class="number">1</span></span><br><span class="line">          <span class="attr">url:</span> <span class="string">http://vmselect-vmcluster.default.svc.cluster.local:8481/select/0/prometheus/</span></span><br><span class="line">          <span class="attr">access:</span> <span class="string">proxy</span></span><br><span class="line">          <span class="attr">isDefault:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">updateIntervalSeconds:</span> <span class="number">10</span></span><br><span class="line">          <span class="attr">editable:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">dashboardProviders:</span></span><br><span class="line">   <span class="attr">dashboardproviders.yaml:</span></span><br><span class="line">     <span class="attr">apiVersion:</span> <span class="number">1</span></span><br><span class="line">     <span class="attr">providers:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">'default'</span></span><br><span class="line">       <span class="attr">orgId:</span> <span class="number">1</span></span><br><span class="line">       <span class="attr">folder:</span> <span class="string">''</span></span><br><span class="line">       <span class="attr">type:</span> <span class="string">file</span></span><br><span class="line">       <span class="attr">disableDeletion:</span> <span class="literal">true</span></span><br><span class="line">       <span class="attr">editable:</span> <span class="literal">true</span></span><br><span class="line">       <span class="attr">options:</span></span><br><span class="line">         <span class="attr">path:</span> <span class="string">/var/lib/grafana/dashboards/default</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">dashboards:</span></span><br><span class="line">    <span class="attr">default:</span></span><br><span class="line">      <span class="attr">victoriametrics:</span></span><br><span class="line">        <span class="attr">gnetId:</span> <span class="number">11176</span></span><br><span class="line">        <span class="attr">revision:</span> <span class="number">18</span></span><br><span class="line">        <span class="attr">datasource:</span> <span class="string">victoriametrics</span></span><br><span class="line">      <span class="attr">vmagent:</span></span><br><span class="line">        <span class="attr">gnetId:</span> <span class="number">12683</span></span><br><span class="line">        <span class="attr">revision:</span> <span class="number">7</span></span><br><span class="line">        <span class="attr">datasource:</span> <span class="string">victoriametrics</span></span><br><span class="line">      <span class="attr">kubernetes:</span></span><br><span class="line">        <span class="attr">gnetId:</span> <span class="number">14205</span></span><br><span class="line">        <span class="attr">revision:</span> <span class="number">1</span></span><br><span class="line">        <span class="attr">datasource:</span> <span class="string">victoriametrics</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><h2 id="浏览器验证"><a href="#浏览器验证" class="headerlink" title="浏览器验证"></a>浏览器验证</h2><h3 id="grafana"><a href="#grafana" class="headerlink" title="grafana"></a>grafana</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看admin密码</span></span><br><span class="line">➜  ~ kubectl get secret --namespace default grafana -o jsonpath=<span class="string">"&#123;.data.admin-password&#125;"</span> | base64 --decode ; <span class="built_in">echo</span></span><br><span class="line">wVj5Rdl1BuPClRy5qgxrztsaoE8v0e4m05DU1cUW</span><br><span class="line"><span class="comment">#转发配置本地端口转发访问</span></span><br><span class="line">➜  ~ <span class="built_in">export</span> POD_NAME=$(kubectl get pods --namespace default -l <span class="string">"app.kubernetes.io/name=grafana,app.kubernetes.io/instance=grafana"</span> -o jsonpath=<span class="string">"&#123;.items[0].metadata.name&#125;"</span>)</span><br><span class="line">➜  ~ kubectl --namespace default port-forward <span class="variable">$POD_NAME</span> 3000</span><br><span class="line">Forwarding from 127.0.0.1:3000 -&gt; 3000</span><br><span class="line">Forwarding from [::1]:3000 -&gt; 3000</span><br></pre></td></tr></table></figure><p>访问:<code>http://localhost:3000</code><br><img src="https://docs.victoriametrics.com/guides/getting-started-with-vm-operator/vmcluster-grafana1.webp"><br><img src="https://docs.victoriametrics.com/guides/getting-started-with-vm-operator/vmcluster-grafana2.webp"></p><h3 id="vmui"><a href="#vmui" class="headerlink" title="vmui"></a>vmui</h3><p>VictoriaMetrics Cluster提供了用于查询故障排除和探索的 UI</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜  ~ kubectl port-forward svc/vmselect-vmcluster 8481:8481</span><br><span class="line">Forwarding from 127.0.0.1:8481 -&gt; 8481</span><br><span class="line">Forwarding from [::1]:8481 -&gt; 8481</span><br></pre></td></tr></table></figure><p>访问:<code>http://localhost:8481/select/0/vmui/</code><br><img src="https://nmk0718.github.io/image/vmui.png"></p><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><h3 id="监控jvm"><a href="#监控jvm" class="headerlink" title="监控jvm"></a>监控jvm</h3><h4 id="在dce集群创建命名空间"><a href="#在dce集群创建命名空间" class="headerlink" title="在dce集群创建命名空间"></a>在dce集群创建命名空间</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建monitor的命名空间</span></span><br><span class="line">➜  ~ kubectl create ns monitor</span><br><span class="line">namespace/monitor created</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看k8s版本</span></span><br><span class="line">➜  ~ kubectl version --short</span><br><span class="line">Flag --short has been deprecated, and will be removed <span class="keyword">in</span> the future. The --short output will become the default.</span><br><span class="line">Client Version: v1.24.0</span><br><span class="line">Kustomize Version: v4.5.4</span><br><span class="line">Server Version: v1.18.20</span><br><span class="line">WARNING: version difference between client (1.24) and server (1.18) exceeds the supported minor version skew of +/-1</span><br></pre></td></tr></table></figure><h4 id="在monitor命名空间中创建serviceaccount："><a href="#在monitor命名空间中创建serviceaccount：" class="headerlink" title="在monitor命名空间中创建serviceaccount："></a>在monitor命名空间中创建serviceaccount：</h4><p>ServiceAccount.yaml</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/component:</span> <span class="string">prometheus</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/instance:</span> <span class="string">k8s</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">prometheus</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/part-of:</span> <span class="string">kube-prometheus</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/version:</span> <span class="number">1.18</span><span class="number">.20</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">prometheus-k8s</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">monitor</span></span><br></pre></td></tr></table></figure><h4 id="创建secret-会自动创建token"><a href="#创建secret-会自动创建token" class="headerlink" title="创建secret,会自动创建token"></a>创建secret,会自动创建token</h4><p>（k8s在1.24版本后创建serviceaccount不会自动创建绑定secret，需要事先创建secret来绑定到serviceaccount）<br>Secret.yaml</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Secret</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">kubernetes.io/service-account.name:</span> <span class="string">prometheus-k8s</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">prometheus-k8s-secret</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">monitor</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">kubernetes.io/service-account-token</span></span><br></pre></td></tr></table></figure><h4 id="创建cluster-role"><a href="#创建cluster-role" class="headerlink" title="创建cluster role"></a>创建cluster role</h4><p>ClusterRole.yaml</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/component:</span> <span class="string">prometheus</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/instance:</span> <span class="string">k8s</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">prometheus</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/part-of:</span> <span class="string">kube-prometheus</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/version:</span> <span class="number">1.18</span><span class="number">.20</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">prometheus-k8s</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">monitor</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">""</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">nodes</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">nodes/metrics</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">services</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">endpoints</span></span><br><span class="line">  <span class="comment">#- endpointslices  对于需要处理数千甚至数万个端点的大型服务，使用EndpointSlice可以提供更好的性能和可扩展性</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">pods</span></span><br><span class="line">  <span class="attr">verbs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">get</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">list</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">watch</span></span><br></pre></td></tr></table></figure><h4 id="授权给serviceaccount"><a href="#授权给serviceaccount" class="headerlink" title="授权给serviceaccount"></a>授权给serviceaccount</h4><p>ClusterRoleBinding.yaml</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/component:</span> <span class="string">prometheus</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/instance:</span> <span class="string">k8s</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">prometheus</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/part-of:</span> <span class="string">kube-prometheus</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/version:</span> <span class="number">1.18</span><span class="number">.20</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">prometheus-k8s</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">monitor</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">prometheus-k8s</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">prometheus-k8s</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">monitor</span></span><br></pre></td></tr></table></figure><h4 id="在vm集群中创建好dce集群的comfigmap并部署"><a href="#在vm集群中创建好dce集群的comfigmap并部署" class="headerlink" title="在vm集群中创建好dce集群的comfigmap并部署"></a>在vm集群中创建好dce集群的comfigmap并部署</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看prometheus-k8s-secret中的token</span></span><br><span class="line">➜  ~ kubectl get secret prometheus-k8s-secret -n monitor -o yaml | grep token</span><br><span class="line">  token: ZXlKaGJHY2lPaUpTVXpJMU5pSXNJbXRwWkNJNkltUnVibTFSYUVkbVdtTlBUR2hzZHpVd1dEZE9UVWhhZFdKdlJVZHpaMDV2Y1hOcmFqTnNTM1ZVYUhNaWZRLmV5SnBjM01pT2lKcmRXSmxjbTVsZEdWekwzTmxjblpwWTJWaFkyTnZkVzUwSWl3aWEzVmlaWEp1WlhSbGN5NXBieTl6WlhKMmFXTmxZV05qYjNWdWRDOXVZVzFsYzNCaFkyVWlPaUp0YjI1cGRHOXlJaXdpYTNWaVpYSnVaWFJsY3k1cGJ5OXpaWEoyYVdObFlXTmpiM1Z1ZEM5elpXTnlaWFF1Ym1GdFpTSTZJbkJ5YjIxbGRHaGxkWE10YXpoekxYTmxZM0psZENJc0ltdDFZbVZ5Ym1WMFpYTXVhVzh2YzJWeWRtbGpaV0ZqWTI5MWJuUXZjMlZ5ZG1salpTMWhZMk52ZFc1MExtNWhiV1VpT2lKd2NtOXRaWFJvWlhWekxXczRjeUlzSW10MVltVnlibVYwWlhNdWFXOHZjMlZ5ZG1salpXRmpZMjkxYm5RdmMyVnlkbWxqWlMxaFkyTnZkVzUwTG5WcFpDSTZJak5rTWpJd01qQm1MVEZsTXpjdE5EaGxaQzFpTVRkbExUazVOMlEwWVRSbVpUUTVOU0lzSW5OMVlpSTZJbk41YzNSbGJUcHpaWEoyYVdObFlXTmpiM1Z1ZERwdGIyNXBkRzl5T25CeWIyMWxkR2hsZFhNdGF6aHpJbjAuaVFGRjI3N3U5MGEtODR4aGR0dXVPeUdvWWdZRGpTNWJOQkhEVm1lSUZ3blVqMy1zY3U1RkJfTjhjYVc3d1JhUXNjaDN6Tk0tbWwwSVZUbXRSNjVFREZxVTNiRV85SGlKS1R1UlFfb2NUTVRjQUJKT3I5YnotY19IMFNsSlJlSUN6dlVlM0M1SUxhV2JERkJSRGxfVlRKTXBhVjMxZTlacXN6YTVMRGE5MkJDYldoaldzd2tOR1pSOUppeFVwTW1Mb2dKZFN2Nm0wcjFxelQwU2NjeEw2STRSa2JEUkhDZ1p5ZlhKc1Y3T1d5cmdoT0dwX2FJYTdJUHItbC00dEV0cGhoTFd4MjJMTWFFOW5odkJCZ2dHUVR4a2VDcEY1MWRjSzAtQ3phTjNWV1htckNHajJyT1BzTXdzaVdsOHJ3bk1BdmhYdmVaSGRCVFYwT2dQYkVkWXF3</span><br><span class="line">      &#123;<span class="string">"apiVersion"</span>:<span class="string">"v1"</span>,<span class="string">"kind"</span>:<span class="string">"Secret"</span>,<span class="string">"metadata"</span>:&#123;<span class="string">"annotations"</span>:&#123;<span class="string">"kubernetes.io/service-account.name"</span>:<span class="string">"prometheus-k8s"</span>&#125;,<span class="string">"name"</span>:<span class="string">"prometheus-k8s-secret"</span>,<span class="string">"namespace"</span>:<span class="string">"monitor"</span>&#125;,<span class="string">"type"</span>:<span class="string">"kubernetes.io/service-account-token"</span>&#125;</span><br><span class="line"><span class="built_in">type</span>: kubernetes.io/service-account-token</span><br><span class="line"></span><br><span class="line"><span class="comment">#对token进行base64解密</span></span><br><span class="line">➜  ~ <span class="built_in">echo</span> <span class="string">"ZXlKaGJHY2lPaUpTVXpJMU5pSXNJbXRwWkNJNkltUnVibTFSYUVkbVdtTlBUR2hzZHpVd1dEZE9UVWhhZFdKdlJVZHpaMDV2Y1hOcmFqTnNTM1ZVYUhNaWZRLmV5SnBjM01pT2lKcmRXSmxjbTVsZEdWekwzTmxjblpwWTJWaFkyTnZkVzUwSWl3aWEzVmlaWEp1WlhSbGN5NXBieTl6WlhKMmFXTmxZV05qYjNWdWRDOXVZVzFsYzNCaFkyVWlPaUp0YjI1cGRHOXlJaXdpYTNWaVpYSnVaWFJsY3k1cGJ5OXpaWEoyYVdObFlXTmpiM1Z1ZEM5elpXTnlaWFF1Ym1GdFpTSTZJbkJ5YjIxbGRHaGxkWE10YXpoekxYTmxZM0psZENJc0ltdDFZbVZ5Ym1WMFpYTXVhVzh2YzJWeWRtbGpaV0ZqWTI5MWJuUXZjMlZ5ZG1salpTMWhZMk52ZFc1MExtNWhiV1VpT2lKd2NtOXRaWFJvWlhWekxXczRjeUlzSW10MVltVnlibVYwWlhNdWFXOHZjMlZ5ZG1salpXRmpZMjkxYm5RdmMyVnlkbWxqWlMxaFkyTnZkVzUwTG5WcFpDSTZJak5rTWpJd01qQm1MVEZsTXpjdE5EaGxaQzFpTVRkbExUazVOMlEwWVRSbVpUUTVOU0lzSW5OMVlpSTZJbk41YzNSbGJUcHpaWEoyYVdObFlXTmpiM1Z1ZERwdGIyNXBkRzl5T25CeWIyMWxkR2hsZFhNdGF6aHpJbjAuaVFGRjI3N3U5MGEtODR4aGR0dXVPeUdvWWdZRGpTNWJOQkhEVm1lSUZ3blVqMy1zY3U1RkJfTjhjYVc3d1JhUXNjaDN6Tk0tbWwwSVZUbXRSNjVFREZxVTNiRV85SGlKS1R1UlFfb2NUTVRjQUJKT3I5YnotY19IMFNsSlJlSUN6dlVlM0M1SUxhV2JERkJSRGxfVlRKTXBhVjMxZTlacXN6YTVMRGE5MkJDYldoaldzd2tOR1pSOUppeFVwTW1Mb2dKZFN2Nm0wcjFxelQwU2NjeEw2STRSa2JEUkhDZ1p5ZlhKc1Y3T1d5cmdoT0dwX2FJYTdJUHItbC00dEV0cGhoTFd4MjJMTWFFOW5odkJCZ2dHUVR4a2VDcEY1MWRjSzAtQ3phTjNWV1htckNHajJyT1BzTXdzaVdsOHJ3bk1BdmhYdmVaSGRCVFYwT2dQYkVkWXF3"</span> |base64 --decode</span><br></pre></td></tr></table></figure><p>把上面base64 解密后文件写在如下 token里<br>dce-token-configmap.yaml</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">token:</span> <span class="string">|</span></span><br><span class="line">    <span class="string">eyJhbGciOiJSUzI1NiIsImtpZCI6ImRubm1RaEdmWmNPTGhsdzUwWDdOTUhadWJvRUdzZ05vcXNrajNsS3VUaHMifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJtb25pdG9yIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZWNyZXQubmFtZSI6InByb21ldGhldXMtazhzLXNlY3JldCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50Lm5hbWUiOiJwcm9tZXRoZXVzLWs4cyIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50LnVpZCI6IjNkMjIwMjBmLTFlMzctNDhlZC1iMTdlLTk5N2Q0YTRmZTQ5NSIsInN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudDptb25pdG9yOnByb21ldGhldXMtazhzIn0.iQFF277u90a-84xhdtuuOyGoYgYDjS5bNBHDVmeIFwnUj3-scu5FB_N8caW7wRaQsch3zNM-ml0IVTmtR65EDFqU3bE_9HiJKTuRQ_ocTMTcABJOr9bz-c_H0SlJReICzvUe3C5ILaWbDFBRDl_VTJMpaV31e9Zqsza5LDa92BCbWhjWswkNGZR9JixUpMmLogJdSv6m0r1qzT0SccxL6I4RkbDRHCgZyfXJsV7OWyrghOGp_aIa7IPr-l-4tEtphhLWx22LMaE9nhvBBggGQTxkeCpF51dcK0-CzaN3VWXmrCGj2rOPsMwsiWl8rwnMAvhXveZHdBTV0OgPbEdYqw</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">dce-token-configmap</span></span><br></pre></td></tr></table></figure><p>部署dce-token-configmap </p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  ~ kubectl apply -f dce-token-configmap.yaml</span><br><span class="line">configmap/dce-token-configmap created</span><br></pre></td></tr></table></figure><h4 id="在vmagent-yaml文件配置采集指标策略"><a href="#在vmagent-yaml文件配置采集指标策略" class="headerlink" title="在vmagent.yaml文件配置采集指标策略"></a>在vmagent.yaml文件配置采集指标策略</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">operator.victoriametrics.com/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">VMAgent</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">vmagent</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="comment">#抓取指标的时间间隔</span></span><br><span class="line">  <span class="attr">scrapeInterval:</span> <span class="string">20s</span></span><br><span class="line">  <span class="comment">#vmagent副本数量</span></span><br><span class="line">  <span class="attr">replicaCount:</span> <span class="number">1</span></span><br><span class="line">  <span class="comment">#资源大小</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">requests:</span></span><br><span class="line">      <span class="attr">cpu:</span> <span class="number">4</span></span><br><span class="line">      <span class="attr">memory:</span> <span class="string">8Gi</span></span><br><span class="line">    <span class="attr">limits:</span></span><br><span class="line">      <span class="attr">cpu:</span> <span class="number">4</span></span><br><span class="line">      <span class="attr">memory:</span> <span class="string">8Gi</span></span><br><span class="line">  <span class="comment">#挂载dce-token</span></span><br><span class="line">  <span class="attr">volumeMounts:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/var/run/secrets/kubernetes.io/serviceaccount/dce-token/</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">dce-token</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">configMap:</span></span><br><span class="line">      <span class="attr">defaultMode:</span> <span class="number">420</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">dce-token-configmap</span> </span><br><span class="line">    <span class="attr">name:</span> <span class="string">dce-token</span></span><br><span class="line">  <span class="comment">#远程写入</span></span><br><span class="line">  <span class="attr">remoteWrite:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">url:</span> <span class="string">"http://vminsert-vmcluster.default.svc.cluster.local:8480/insert/0/prometheus/api/v1/write"</span></span><br><span class="line">  <span class="attr">inlineScrapeConfig:</span> <span class="string">|</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">dce-jvm-exporter</span></span><br><span class="line">      <span class="comment">#是否尊重指标的时间戳</span></span><br><span class="line">      <span class="attr">honor_timestamps:</span> <span class="literal">true</span></span><br><span class="line">      <span class="comment">#抓取指标的时间间隔</span></span><br><span class="line">      <span class="attr">scrape_interval:</span> <span class="string">20s</span></span><br><span class="line">      <span class="comment">#抓取指标的超时时间</span></span><br><span class="line">      <span class="attr">scrape_timeout:</span> <span class="string">30s</span></span><br><span class="line">      <span class="comment">#抓取的指标路径</span></span><br><span class="line">      <span class="attr">metrics_path:</span> <span class="string">/actuator/prometheus</span></span><br><span class="line">      <span class="comment">#抓取协议</span></span><br><span class="line">      <span class="attr">scheme:</span> <span class="string">http</span></span><br><span class="line">      <span class="comment">#指定认证的用户名和密码</span></span><br><span class="line">      <span class="attr">basic_auth:</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">'actuator'</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">'actuator%2@nmk!@#'</span></span><br><span class="line">      <span class="comment">#跳过 TLS 证书验证</span></span><br><span class="line">      <span class="attr">tls_config:</span></span><br><span class="line">        <span class="attr">insecure_skip_verify:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">kubernetes_sd_configs:</span></span><br><span class="line">      <span class="comment">#Kubernetes API 服务器地址</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">api_server:</span> <span class="string">https://10.30.150.11:16443</span></span><br><span class="line">        <span class="comment">#指定要发现的资源类型(endpoints，service，pod，node，ingress)</span></span><br><span class="line">        <span class="attr">role:</span> <span class="string">pod</span></span><br><span class="line">        <span class="comment">#配置访问 Kubernetes API 的认证和 TLS 设置</span></span><br><span class="line">        <span class="attr">bearer_token_file:</span> <span class="string">/var/run/secrets/kubernetes.io/serviceaccount/dce-token/token</span></span><br><span class="line">        <span class="attr">tls_config:</span></span><br><span class="line">          <span class="attr">insecure_skip_verify:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">relabel_configs:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">source_labels:</span> <span class="string">[__meta_kubernetes_pod_annotation_prometheus_io_scrape]</span></span><br><span class="line">          <span class="attr">separator:</span> <span class="string">;</span></span><br><span class="line">          <span class="attr">regex:</span> <span class="string">"true"</span></span><br><span class="line">          <span class="attr">replacement:</span> <span class="string">$1</span></span><br><span class="line">          <span class="attr">action:</span> <span class="string">keep</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">source_labels:</span> <span class="string">[__meta_kubernetes_pod_annotation_prometheus_io_path]</span></span><br><span class="line">          <span class="attr">separator:</span> <span class="string">;</span></span><br><span class="line">          <span class="attr">regex:</span> <span class="string">(.+)</span></span><br><span class="line">          <span class="attr">target_label:</span> <span class="string">__metrics_path__</span></span><br><span class="line">          <span class="attr">replacement:</span> <span class="string">$1</span></span><br><span class="line">          <span class="attr">action:</span> <span class="string">replace</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">source_labels:</span> <span class="string">[__address__,</span> <span class="string">__meta_kubernetes_pod_annotation_prometheus_io_port]</span></span><br><span class="line">          <span class="attr">separator:</span> <span class="string">;</span></span><br><span class="line">          <span class="attr">regex:</span> <span class="string">([^:]+)(?::\d+)?;(\d+)</span></span><br><span class="line">          <span class="attr">target_label:</span> <span class="string">__address__</span></span><br><span class="line">          <span class="attr">replacement:</span> <span class="string">$1:$2</span></span><br><span class="line">          <span class="attr">action:</span> <span class="string">replace</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">separator:</span> <span class="string">;</span></span><br><span class="line">          <span class="attr">regex:</span> <span class="string">__meta_kubernetes_pod_label_(.+)</span></span><br><span class="line">          <span class="attr">replacement:</span> <span class="string">$1</span></span><br><span class="line">          <span class="attr">action:</span> <span class="string">labelmap</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">source_labels:</span> <span class="string">[__meta_kubernetes_namespace]</span></span><br><span class="line">          <span class="attr">separator:</span> <span class="string">;</span></span><br><span class="line">          <span class="attr">regex:</span> <span class="string">(.*)</span></span><br><span class="line">          <span class="attr">target_label:</span> <span class="string">kubernetes_namespace</span></span><br><span class="line">          <span class="attr">replacement:</span> <span class="string">$1</span></span><br><span class="line">          <span class="attr">action:</span> <span class="string">replace</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">source_labels:</span> <span class="string">[__meta_kubernetes_pod_name]</span></span><br><span class="line">          <span class="attr">separator:</span> <span class="string">;</span></span><br><span class="line">          <span class="attr">regex:</span> <span class="string">(.*)</span></span><br><span class="line">          <span class="attr">target_label:</span> <span class="string">kubernetes_pod_name</span></span><br><span class="line">          <span class="attr">replacement:</span> <span class="string">$1</span></span><br><span class="line">          <span class="attr">action:</span> <span class="string">replace</span></span><br></pre></td></tr></table></figure><p>relabel_configs: 过滤和重写目标标签</p><ol><li>source_labels: 指定用于匹配的源标签列表</li><li>separator: 指定分隔符</li><li>regex: 用于匹配 source_labels 提取的值的正则表达式，默认为匹配任意值（.*）</li><li>replacement: 用于替换操作的值</li><li>action：定义了对标签的处理方式，包括：<ul><li>replace：根据 regex 匹配 source_labels 的值，并将其写入 target_label</li><li>keep：仅保留匹配 regex 的标签，其余的将被丢弃</li><li>drop：丢弃匹配 regex 的标签，保留其余的</li><li>labelmap：根据 regex 匹配 Target 实例所有标签的名称，并以匹配到的内容为新的标签名称，其值作为新标签的值</li><li>labeldrop：移除匹配 regex 规则的标签</li><li>labelkeep：移除不匹配 regex 规则的标签，保留匹配的</li></ul></li></ol><p>要监控的Pod 中需要有以下注解才能正常采集</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">annotations:</span><br><span class="line">        prometheus.io/path: /actuator/prometheus</span><br><span class="line">        prometheus.io/port: &quot;20001&quot;</span><br><span class="line">        prometheus.io/scrape: &quot;true&quot;</span><br></pre></td></tr></table></figure><h4 id="加载配置文件："><a href="#加载配置文件：" class="headerlink" title="加载配置文件："></a>加载配置文件：</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  ~ kubectl apply -f vmagent.yaml</span><br><span class="line">vmagent.operator.victoriametrics.com/vmagent configured</span><br></pre></td></tr></table></figure><h4 id="vmagent查看配置是否生效："><a href="#vmagent查看配置是否生效：" class="headerlink" title="vmagent查看配置是否生效："></a>vmagent查看配置是否生效：</h4><img src="https://nmk0718.github.io/image/vmagent-jvm.jpg"><h4 id="Grafana查看面板"><a href="#Grafana查看面板" class="headerlink" title="Grafana查看面板"></a>Grafana查看面板</h4><p>打开Grafana,在Dashboards中import面板ID:4701<br><img src="https://nmk0718.github.io/image/vm-jvm.png"></p><h3 id="监控k8s集群状态"><a href="#监控k8s集群状态" class="headerlink" title="监控k8s集群状态"></a>监控k8s集群状态</h3><h4 id="kube-state-metrics"><a href="#kube-state-metrics" class="headerlink" title="kube-state-metrics"></a>kube-state-metrics</h4><p>选择合适的版本，进行安装部署<br><a href="https://github.com/kubernetes/kube-state-metrics" target="_blank" rel="noopener">https://github.com/kubernetes/kube-state-metrics</a></p><p>采集外部集群需要把kube-state-metrics的service改为NodePort</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- job_name: dce-kube-state-metrics</span><br><span class="line">  honor_timestamps: true</span><br><span class="line">  scrape_interval: 15s</span><br><span class="line">  metrics_path: &apos;/metrics&apos;</span><br><span class="line">  scheme: http</span><br><span class="line">  static_configs:</span><br><span class="line">  - targets: [&apos;10.30.150.1:33987&apos;]</span><br><span class="line">  #指标过大时可使用</span><br><span class="line">  params:</span><br><span class="line">  max_scrape_size: 33554432</span><br></pre></td></tr></table></figure><h4 id="cAdvisor"><a href="#cAdvisor" class="headerlink" title="cAdvisor"></a>cAdvisor</h4><p>⚠️必须要两个bearer_token_file，一个认证apiserver，一个通过apiserver进行cAdvisor采集指标</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- job_name: dce-cadvisor</span><br><span class="line">  metrics_path: /metrics</span><br><span class="line">  scheme: https</span><br><span class="line">  bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/dce-token/token</span><br><span class="line">  tls_config:</span><br><span class="line">    insecure_skip_verify: true</span><br><span class="line">  kubernetes_sd_configs:</span><br><span class="line">  - api_server: https://10.30.150.11:16443</span><br><span class="line">    role: node</span><br><span class="line">    bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/dce-token/token</span><br><span class="line">    tls_config:</span><br><span class="line">      insecure_skip_verify: true</span><br><span class="line">  relabel_configs:</span><br><span class="line">  - action: labelmap</span><br><span class="line">    regex: __meta_kubernetes_node_label_(.*)</span><br><span class="line">  - target_label: __address__</span><br><span class="line">    action: replace</span><br><span class="line">    regex: (.*)</span><br><span class="line">    source_labels: [&quot;__address__&quot;]</span><br><span class="line">    replacement: 10.30.150.11:16443</span><br><span class="line">  - source_labels: [__meta_kubernetes_node_name]</span><br><span class="line">    regex: (.*)</span><br><span class="line">    action: replace</span><br><span class="line">    target_label: __metrics_path__</span><br><span class="line">    replacement: /api/v1/nodes/$&#123;1&#125;/proxy/metrics/cadvisor</span><br><span class="line">  metric_relabel_configs:</span><br><span class="line">  - source_labels: [instance]</span><br><span class="line">    separator: ;</span><br><span class="line">    regex: (.+)</span><br><span class="line">    target_label: node</span><br><span class="line">    replacement: $1</span><br><span class="line">    action: replace</span><br></pre></td></tr></table></figure><p>查看大盘<br>打开Grafana,在Dashboards中import面板ID:13105<br><img src="https://nmk0718.github.io/image/vm-k8s.png"></p><h4 id="Node-Exporter"><a href="#Node-Exporter" class="headerlink" title="Node-Exporter"></a>Node-Exporter</h4><p>集群内部可通过VMNodeScrape资源对象进行配置,该资源对象不支持apiserver参数，所以无法采集外部集群的信息<br>VMNodeScrape.yaml</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">operator.victoriametrics.com/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">VMNodeScrape</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">node-exporter</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">/metrics</span></span><br><span class="line">  <span class="attr">port:</span> <span class="string">"9111"</span> <span class="comment"># 指定 node-exporter 的端口</span></span><br><span class="line">  <span class="attr">scrape_interval:</span> <span class="string">15s</span></span><br><span class="line">  <span class="comment"># relabelConfigs：  # relabel配置（如果需要）</span></span><br><span class="line">  <span class="comment"># selector:  # 过滤节点（如果需要）'</span></span><br></pre></td></tr></table></figure><p>集群外部通过Vmagent进行采集<br>⚠️通过node-exporter的service改为nodeport进行采集只有一台实例数据，所以改为多targets采集</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- job_name: dce-node-exporter</span><br><span class="line">      honor_timestamps: true</span><br><span class="line">      scrape_interval: 15s</span><br><span class="line">      metrics_path: &apos;/metrics&apos;</span><br><span class="line">      scheme: http</span><br><span class="line">      static_configs:</span><br><span class="line">      - targets: [&apos;10.30.150.1:12921&apos;,&apos;10.30.150.2:12921&apos;,&apos;10.30.150.3:12921&apos;,&apos;10.30.150.4:12921&apos;,&apos;10.30.150.5:12921&apos;,&apos;10.30.150.6:12921&apos;,&apos;10.30.150.8:12921&apos;,&apos;10.30.150.9:12921&apos;,&apos;10.30.150.10:12921&apos;]</span><br></pre></td></tr></table></figure><p>查看大盘<br>打开Grafana,在Dashboards中import面板ID:16098<br><img src="https://nmk0718.github.io/image/vm-nodeexporter.png"></p><h3 id="Vmalert"><a href="#Vmalert" class="headerlink" title="Vmalert"></a>Vmalert</h3><p>vmalert在内存中保存警报状态。重新启动该vmalert进程将重置内存中所有活动警报的状态。为防止vmalert在重新启动时丢失,通过<code>-remote.write.url</code>和<code>-remote.read.url</code>将其配置为将状态持久保存到远程数据库</p><h4 id="安装vmalert和alert-manager"><a href="#安装vmalert和alert-manager" class="headerlink" title="安装vmalert和alert manager"></a>安装vmalert和alert manager</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">cat</span> <span class="string">&lt;&lt;EOF</span> <span class="string">|</span> <span class="string">helm</span> <span class="string">install</span> <span class="string">vma</span> <span class="string">vm/victoria-metrics-alert</span> <span class="string">-f</span> <span class="bullet">-</span></span><br><span class="line">  <span class="attr">server:</span></span><br><span class="line">    <span class="attr">datasource:</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">http://vmselect-vmcluster.default.svc:8481/select/0/prometheus</span></span><br><span class="line">    <span class="attr">remote:</span></span><br><span class="line">      <span class="attr">write:</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">http://vminsert-vmcluster.default.svc:8480/insert/0/prometheus</span></span><br><span class="line">      <span class="attr">read:</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">http://vmselect-vmcluster.default.svc:8481/select/0/prometheus</span></span><br><span class="line">      <span class="attr">notifier:</span></span><br><span class="line">        <span class="attr">alertmanager:</span></span><br><span class="line">          <span class="attr">url:</span> <span class="string">http://vma-victoria-metrics-alert-alertmanager.default.svc:9093</span></span><br><span class="line">  <span class="attr">alertmanager:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><h4 id="配置alert-manager"><a href="#配置alert-manager" class="headerlink" title="配置alert manager"></a>配置alert manager</h4><p>kubectl edit configmap vma-victoria-metrics-alert-alertmanager-config</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">global:</span><br><span class="line">  smtp_smarthost: &apos;smtp.qq.com:465&apos;</span><br><span class="line">  smtp_from: &apos;2977358239@qq.com&apos;</span><br><span class="line">  smtp_auth_username: &apos;2977358239@qq.com&apos;</span><br><span class="line">  smtp_auth_password: &apos;jgigqzrlhycddhcf&apos; # 这里是邮箱的授权密码，不是登录密码</span><br><span class="line">  smtp_require_tls: false</span><br><span class="line">templates:</span><br><span class="line">  - &apos;/alertmanager/template/*.tmpl&apos;</span><br><span class="line">route:</span><br><span class="line">  group_by: [&apos;severity&apos;, &apos;source&apos;]</span><br><span class="line">  group_wait: 30s</span><br><span class="line">  group_interval: 5m</span><br><span class="line">  repeat_interval: 10m</span><br><span class="line">  receiver: email</span><br><span class="line">receivers:</span><br><span class="line">- name: &apos;email&apos;</span><br><span class="line">  email_configs:</span><br><span class="line">  - to: &apos;nimingkun@ruqimobility.com&apos;</span><br><span class="line">    send_resolved: true</span><br></pre></td></tr></table></figure><h4 id="配置vmalert"><a href="#配置vmalert" class="headerlink" title="配置vmalert"></a>配置vmalert</h4><p>kubectl edit configmap vma-victoria-metrics-alert-server-alert-rules-config</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">groups:</span><br><span class="line">- name: record</span><br><span class="line">  rules:</span><br><span class="line">  - record: job:node_memory_MemFree_bytes:percent  # 记录规则名称</span><br><span class="line">    expr: 100 - (100 * node_memory_MemFree_bytes / node_memory_MemTotal_bytes)</span><br><span class="line">- name: node</span><br><span class="line">  rules:  # 具体的报警规则</span><br><span class="line">  - alert: NodeMemoryUsage  # 报警规则的名称</span><br><span class="line">    expr: (node_memory_MemTotal_bytes - (node_memory_MemFree_bytes + node_memory_Buffers_bytes + node_memory_Cached_bytes)) / node_memory_MemTotal_bytes * 100 &gt; 30</span><br><span class="line">    for: 1m</span><br><span class="line">    labels:</span><br><span class="line">      source: node</span><br><span class="line">      severity: critical</span><br><span class="line">    annotations:</span><br><span class="line">      summary: &quot;Node &#123;&#123;$labels.instance&#125;&#125; High Memory usage detected&quot;</span><br><span class="line">      description: &quot;&#123;&#123;$labels.instance&#125;&#125;: Memory usage is above 30% (current value is: &#123;&#123; $value &#125;&#125;)&quot;</span><br></pre></td></tr></table></figure><p>record规则单独使用，不能与alert规则混合，record规则不需要alert、for、labels和annotations字段<br>record 记录规则的主要作用是将一个给定的表达式的结果保存为一个新的时间序列，这样可以在Grafana等可视化工具中直接使用这些数据，而不需要每次都重新计算表达式。</p><h4 id="alert页面查看是否正常"><a href="#alert页面查看是否正常" class="headerlink" title="alert页面查看是否正常"></a>alert页面查看是否正常</h4><p>kubectl port-forward svc/vma-victoria-metrics-alert-server 8880:8880</p><p>查看所有的 Groups<br><img src="https://nmk0718.github.io/image/vmalert_group.png"><br>查看报警规则列表的状态<br><img src="https://nmk0718.github.io/image/vmalert_state.png"><br>查看报警规则的详细信息<br><img src="https://nmk0718.github.io/image/vmalert_details.png"><br>查看邮箱(⚠️需确保发件邮箱的验证码正确)<br><img src="https://nmk0718.github.io/image/alertmanager_mail.png"></p><p>我们添加的记录规则会通过 remote write 传递给 vminsert 保留下来，我们也可以通过 vmselect 查询到<br><img src="https://nmk0718.github.io/image/vmui_select_record.png"></p><h4 id="排查过滤某些抓取指标过长导致卡主问题"><a href="#排查过滤某些抓取指标过长导致卡主问题" class="headerlink" title="排查过滤某些抓取指标过长导致卡主问题"></a>排查过滤某些抓取指标过长导致卡主问题</h4><p>先去查看vmstorage-vmcluster  vmstorage组件的日志，找到那条指标影响了<br>过滤customer服务的指标收集，在相应的job采集任务下添加如下配置即可</p><ul><li>source_labels: [__meta_kubernetes_pod_label_ruqi_app]<br>action: drop<br>regex: travel-platform-customerservice</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;VictoriaMetrics 是一款快速、经济高效且可扩展的时间序列数据库。可用作 Prometheus 的长期远程存储。如果提取率低于每秒​​一百万个数据点，建议使用单节点版本，而不是集群版本。&lt;/p&gt;
&lt;p&gt;VictoriaMetrics集群由以下服务组成：&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="k8s" scheme="https://nmk0718.github.io/tag/k8s/"/>
    
    <category term="VictoriaMetrics" scheme="https://nmk0718.github.io/tag/VictoriaMetrics/"/>
    
  </entry>
  
  <entry>
    <title>nginx-ingress配置</title>
    <link href="https://nmk0718.github.io/2024/11/18/nginx-ingress%E9%85%8D%E7%BD%AE%E8%B7%A8%E5%9F%9F/"/>
    <id>https://nmk0718.github.io/2024/11/18/nginx-ingress%E9%85%8D%E7%BD%AE%E8%B7%A8%E5%9F%9F/</id>
    <published>2024-11-18T03:46:00.000Z</published>
    <updated>2024-11-18T07:42:57.730Z</updated>
    
    <content type="html"><![CDATA[<h4 id="配置微信小程序或公众号认证"><a href="#配置微信小程序或公众号认证" class="headerlink" title="配置微信小程序或公众号认证"></a>配置微信小程序或公众号认证</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">nginx.ingress.kubernetes.io/configuration-snippet:</span> <span class="string">|</span></span><br><span class="line">      <span class="string">location</span> <span class="string">/MP_verify_CwtbVLWfGpMDmrcy.txt</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="string">add_header</span> <span class="string">Content-Type</span> <span class="string">text/plain;</span></span><br><span class="line">        <span class="string">return</span> <span class="number">200</span> <span class="string">"CwtbVLWfGpMDmrcy"</span><span class="string">;</span></span><br><span class="line">      <span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="跨域配置"><a href="#跨域配置" class="headerlink" title="跨域配置"></a>跨域配置</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">nginx.ingress.kubernetes.io/cors-allow-credentials:</span> <span class="string">'true'</span></span><br><span class="line">    <span class="attr">nginx.ingress.kubernetes.io/cors-allow-headers:</span> <span class="string">&gt;-</span></span><br><span class="line">      <span class="string">DNT,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization,X-Forwarded-For,X-CustomHeader,X-Token</span></span><br><span class="line">    <span class="attr">nginx.ingress.kubernetes.io/cors-allow-methods:</span> <span class="string">GET,</span> <span class="string">PUT,</span> <span class="string">POST,</span> <span class="string">DELETE,</span> <span class="string">PATCH,</span> <span class="string">OPTIONS</span></span><br><span class="line">    <span class="comment">#如果cors-allow-origin不能为*，可写死为对应的域名，也可使用下面的方案</span></span><br><span class="line">    <span class="attr">nginx.ingress.kubernetes.io/cors-allow-origin:</span> <span class="string">'*'</span></span><br><span class="line">    <span class="attr">nginx.ingress.kubernetes.io/cors-expose-headers:</span> <span class="string">Version,</span> <span class="string">X-CustomResponseHeader</span></span><br><span class="line">    <span class="attr">nginx.ingress.kubernetes.io/enable-cors:</span> <span class="string">'true'</span></span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">nginx.ingress.kubernetes.io/server-snippet:</span> <span class="string">&gt;</span></span><br><span class="line">      <span class="string">if</span> <span class="string">($http_origin</span> <span class="string">=</span> <span class="string">''</span><span class="string">)&#123;</span></span><br><span class="line">            <span class="string">set</span> <span class="string">$http_origin</span> <span class="string">"*"</span><span class="string">;</span></span><br><span class="line">        <span class="string">&#125;</span></span><br><span class="line">      <span class="string">add_header</span> <span class="string">Access-Control-Allow-Origin</span> <span class="string">$http_origin;</span></span><br><span class="line"></span><br><span class="line">      <span class="string">add_header</span> <span class="string">'Access-Control-Allow-Credentials'</span> <span class="string">'true'</span><span class="string">;</span></span><br><span class="line"></span><br><span class="line">      <span class="string">add_header</span> <span class="string">'Access-Control-Allow-Headers'</span></span><br><span class="line">      <span class="string">DNT,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization,X-Forwarded-For,X-CustomHeader,X-Token;</span></span><br><span class="line"></span><br><span class="line">      <span class="string">add_header</span> <span class="string">'Access-Control-Allow-Methods'</span> <span class="string">'GET, PUT, POST, DELETE,PATCH,OPTIONS'</span><span class="string">;</span></span><br><span class="line"></span><br><span class="line">      <span class="string">add_header</span> <span class="string">'Access-Control-Expose-Headers'</span> <span class="string">'Version,X-CustomResponseHeader'</span><span class="string">;</span></span><br><span class="line"></span><br><span class="line">      <span class="string">proxy_hide_header</span> <span class="string">'Access-Control-Allow-Origin'</span><span class="string">;</span></span><br><span class="line"></span><br><span class="line">      <span class="string">proxy_hide_header</span> <span class="string">'Access-Control-Allow-Credentials'</span><span class="string">;</span></span><br></pre></td></tr></table></figure><h4 id="常用配置"><a href="#常用配置" class="headerlink" title="常用配置"></a>常用配置</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">annotations:</span>    </span><br><span class="line">    <span class="comment">#http请求不会重定向到https</span></span><br><span class="line">    <span class="attr">nginx.ingress.kubernetes.io/proxy-body-size:</span> <span class="string">10m</span></span><br><span class="line">    <span class="comment">#请求允许的最大请求体大小</span></span><br><span class="line">    <span class="attr">nginx.ingress.kubernetes.io/ssl-redirect:</span> <span class="string">'false'</span></span><br><span class="line">    <span class="comment">#使用默认的后端返回头</span></span><br><span class="line">    <span class="attr">nginx.ingress.kubernetes.io/configuration-snippet:</span> <span class="string">proxy_hide_header</span> <span class="string">none;</span></span><br><span class="line">    <span class="comment">#配置超时等信息</span></span><br><span class="line">    <span class="attr">nginx.ingress.kubernetes.io/server-snippet:</span> <span class="string">|</span> </span><br><span class="line">      <span class="string">client_body_timeout</span> <span class="string">120s;</span></span><br><span class="line">      <span class="string">client_max_body_size</span> <span class="string">1024M;</span></span><br><span class="line">      <span class="string">client_header_buffer_size</span> <span class="string">10k;</span></span><br><span class="line">      <span class="string">proxy_request_buffering</span> <span class="string">off;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;配置微信小程序或公众号认证&quot;&gt;&lt;a href=&quot;#配置微信小程序或公众号认证&quot; class=&quot;headerlink&quot; title=&quot;配置微信小程序或公众号认证&quot;&gt;&lt;/a&gt;配置微信小程序或公众号认证&lt;/h4&gt;&lt;figure class=&quot;highlight yaml</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>限制直连pod访问</title>
    <link href="https://nmk0718.github.io/2024/10/24/%E9%99%90%E5%88%B6%E7%9B%B4%E8%BF%9Epod%E8%AE%BF%E9%97%AE/"/>
    <id>https://nmk0718.github.io/2024/10/24/%E9%99%90%E5%88%B6%E7%9B%B4%E8%BF%9Epod%E8%AE%BF%E9%97%AE/</id>
    <published>2024-10-24T03:30:00.000Z</published>
    <updated>2024-10-24T05:42:28.544Z</updated>
    
    <content type="html"><![CDATA[<p>问题：因公司通过专线与腾讯云打通，导致本地办公网络能直连集群内的pod ip和port进行访问</p><p>解决方案：</p><h4 id="使用NetworkPolicy限制"><a href="#使用NetworkPolicy限制" class="headerlink" title="使用NetworkPolicy限制"></a>使用NetworkPolicy限制</h4><p>进入tke&gt;组件管理&gt;新建&gt;勾选NetworkPolicy组件，进行保存，使用yaml文件创建限制策略</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apiVersion: networking.k8s.io/v1</span><br><span class="line">kind: NetworkPolicy</span><br><span class="line">metadata:</span><br><span class="line">  name: test-network-policy</span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  podSelector:</span><br><span class="line">    matchLabels: </span><br><span class="line">      app: test-app #服务的标签</span><br><span class="line">  policyTypes:</span><br><span class="line">  - Ingress</span><br><span class="line">  ingress:</span><br><span class="line">  - from:</span><br><span class="line">    - ipBlock:</span><br><span class="line">        cidr: 10.3.0.0/16 #允许网段访问</span><br><span class="line">        except:</span><br><span class="line">        - 10.80.0.0/16 #不允许网段访问</span><br><span class="line">    ports:</span><br><span class="line">    - protocol: TCP</span><br><span class="line">      port: 4000</span><br></pre></td></tr></table></figure><p>⚠️如果没有配置组件，创建yaml是不生效的<br>具体参考<br><a href="https://cloud.tencent.com/document/product/457/19793" target="_blank" rel="noopener">https://cloud.tencent.com/document/product/457/19793</a></p><h4 id="给VPC-CNI绑定安全组"><a href="#给VPC-CNI绑定安全组" class="headerlink" title="给VPC-CNI绑定安全组"></a>给VPC-CNI绑定安全组</h4><p>进入tke&gt;组件管理&gt;eniipamd的右侧更新配置&gt;勾选安全组，配置安全组即可<br><a href="https://cloud.tencent.com/document/product/457/50360" target="_blank" rel="noopener">https://cloud.tencent.com/document/product/457/50360</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;问题：因公司通过专线与腾讯云打通，导致本地办公网络能直连集群内的pod ip和port进行访问&lt;/p&gt;
&lt;p&gt;解决方案：&lt;/p&gt;
&lt;h4 id=&quot;使用NetworkPolicy限制&quot;&gt;&lt;a href=&quot;#使用NetworkPolicy限制&quot; class=&quot;headerlin</summary>
      
    
    
    
    
    <category term="k8s" scheme="https://nmk0718.github.io/tag/k8s/"/>
    
  </entry>
  
  <entry>
    <title>Adhell3 阻止广告（三星）</title>
    <link href="https://nmk0718.github.io/2024/09/29/Adhell3/"/>
    <id>https://nmk0718.github.io/2024/09/29/Adhell3/</id>
    <published>2024-09-29T05:35:00.000Z</published>
    <updated>2024-09-29T06:53:17.011Z</updated>
    
    <content type="html"><![CDATA[<h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><ol><li>需要先对三星手机进行adb授权启动黑域</li><li>NotifyRDS-Add-on-Samsung.apk,Adhell3.apk,三星手机</li></ol><p>⚠️本文尝试参考链接中的炼妖壶方案无法激活Adhell3,仅列出安全文件夹的激活步骤</p><h4 id="激活"><a href="#激活" class="headerlink" title="激活"></a>激活</h4><ol><li><p>启用 klms agent</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#黑域内运行命令</span><br><span class="line">pm enable com.samsung.klmsagent</span><br></pre></td></tr></table></figure></li><li><p>安装NotifyRDS-Add-on-Samsung</p></li><li><p>手机设置中开启安全文件夹，把NotifyRDS-Add-on-Samsung安装到安全文件夹中<br>安全文件夹：右上角加号——添加NotifyRDS-Add-on-Samsung</p></li><li><p>卸载手机自身安装的NotifyRDS-Add-on-Samsung<br>手机设置内搜索 <code>设备管理应用程序</code> 对第一个NotifyRDS-Add-on-Samsung进行取消激活和卸载</p></li><li><p>禁用 klms agent</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#黑域内运行命令</span><br><span class="line">pm disable-user com.samsung.klmsagent</span><br></pre></td></tr></table></figure></li><li><p>卸载安全文件夹中的NotifyRDS-Add-on-Samsung<br>安全文件夹：右上角三个点——设置——更多设置——卸载，【取消】将媒体文件移出安全文件</p></li><li><p>安装 Adhell<br>先安装Adhell3到手机内<br>黑域内运行命令</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pm enable com.samsung.klmsagent</span><br></pre></td></tr></table></figure></li></ol><p>手机设置内搜索 <code>设备管理应用程序</code> 对Adhell3进行激活<br>启动Adhell3即可</p><h4 id="配置作用域"><a href="#配置作用域" class="headerlink" title="配置作用域"></a>配置作用域</h4><p>在作用域的订阅源中配置</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https://raw.githubusercontent.com/VeleSila/yhosts/master/hosts</span><br><span class="line">https://raw.githubusercontent.com/AdAway/adaway.github.io/master/hosts.txt</span><br><span class="line">https://hblock.molinero.dev/hosts</span><br></pre></td></tr></table></figure><p>在作用域的白名单中配置</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">errnewlog.umeng.com</span><br><span class="line">errlog.umeng.com</span><br><span class="line">beacon.qq.com</span><br><span class="line">ssl.google-analytics.com</span><br><span class="line">loggw.alipay.com.cn</span><br><span class="line">dataflow.biliapi.com</span><br></pre></td></tr></table></figure><p>在主页启用作用域即可</p><p>参考文档:<br><a href="https://zhuanlan.zhihu.com/p/670139739" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/670139739</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;需要先对三星手机进行adb授权启动黑域&lt;/li&gt;
&lt;li&gt;NotifyRDS-Add-on-Samsung.ap</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>腾讯云只授权用户tke登陆容器权限</title>
    <link href="https://nmk0718.github.io/2024/09/23/%E8%85%BE%E8%AE%AF%E4%BA%91%E5%8F%AA%E6%8E%88%E6%9D%83%E7%94%A8%E6%88%B7tke%E7%99%BB%E9%99%86%E5%AE%B9%E5%99%A8%E6%9D%83%E9%99%90/"/>
    <id>https://nmk0718.github.io/2024/09/23/%E8%85%BE%E8%AE%AF%E4%BA%91%E5%8F%AA%E6%8E%88%E6%9D%83%E7%94%A8%E6%88%B7tke%E7%99%BB%E9%99%86%E5%AE%B9%E5%99%A8%E6%9D%83%E9%99%90/</id>
    <published>2024-09-23T08:00:00.000Z</published>
    <updated>2025-02-10T02:38:37.772Z</updated>
    
    <content type="html"><![CDATA[<h3 id="授权只读权限"><a href="#授权只读权限" class="headerlink" title="授权只读权限"></a>授权只读权限</h3><h4 id="选择策略生成器"><a href="#选择策略生成器" class="headerlink" title="选择策略生成器"></a>选择策略生成器</h4><img src="\image\RBAC-create.png"><h4 id="选择要授权的账号"><a href="#选择要授权的账号" class="headerlink" title="选择要授权的账号"></a>选择要授权的账号</h4><img src="\image\RBAC-auth-user.png"><h4 id="授权只读权限-1"><a href="#授权只读权限-1" class="headerlink" title="授权只读权限"></a>授权只读权限</h4><img src="\image\RBAC-auth.png"><h3 id="授权容器登录权限"><a href="#授权容器登录权限" class="headerlink" title="授权容器登录权限"></a>授权容器登录权限</h3><h4 id="创建ClusterRole"><a href="#创建ClusterRole" class="headerlink" title="创建ClusterRole"></a>创建ClusterRole</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">cloud.tencent.com/tke-rbac-generated:</span> <span class="string">"true"</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">tke:pod-exec</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">""</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">pods</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">pods/attach</span></span><br><span class="line">  <span class="attr">verbs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">get</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">list</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">patch</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">update</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">watch</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">""</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">pods/exec</span></span><br><span class="line">  <span class="attr">verbs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">create</span></span><br></pre></td></tr></table></figure><h4 id="创建RoleBinging授权给用户"><a href="#创建RoleBinging授权给用户" class="headerlink" title="创建RoleBinging授权给用户"></a>创建RoleBinging授权给用户</h4><p>复制只读权限中的相关信息<br><img src="\image\ClusterRoleBinding-yaml.png"></p><p>对账号进行授权容器登录权限</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">RoleBinding</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">cloud.tencent.com/tke-account-nickname:</span> <span class="string">nmk</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">cloud.tencent.com/tke-account:</span> <span class="string">"100023199976"</span></span><br><span class="line">  <span class="attr">name:</span> <span class="number">100023199976</span><span class="string">-Role-pod-exec</span>    </span><br><span class="line">  <span class="comment">#namespace: no-critical-service #填写namespace为针对某个命令空间</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">tke:pod-exec</span>    <span class="comment">#指定刚创建的ClusterRole</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">User</span></span><br><span class="line">  <span class="attr">name:</span> <span class="number">100023199976</span><span class="number">-1682220970</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;授权只读权限&quot;&gt;&lt;a href=&quot;#授权只读权限&quot; class=&quot;headerlink&quot; title=&quot;授权只读权限&quot;&gt;&lt;/a&gt;授权只读权限&lt;/h3&gt;&lt;h4 id=&quot;选择策略生成器&quot;&gt;&lt;a href=&quot;#选择策略生成器&quot; class=&quot;headerlink&quot; ti</summary>
      
    
    
    
    
    <category term="k8s" scheme="https://nmk0718.github.io/tag/k8s/"/>
    
  </entry>
  
  <entry>
    <title>arthas</title>
    <link href="https://nmk0718.github.io/2024/09/05/arthas/"/>
    <id>https://nmk0718.github.io/2024/09/05/arthas/</id>
    <published>2024-09-05T03:30:00.000Z</published>
    <updated>2024-09-23T08:42:39.656Z</updated>
    
    <content type="html"><![CDATA[<p>下载</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@platform-green-5d77977ffc-nw8dm:/<span class="comment"># curl -O https://arthas.aliyun.com/arthas-boot.jar</span></span><br><span class="line">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class="line">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class="line">100  138k  100  138k    0     0   367k      0 --:--:-- --:--:-- --:--:--  367k</span><br></pre></td></tr></table></figure><p>启动</p><p>启动后按1，1为进程ID</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@platform-green-5d77977ffc-nw8dm:/<span class="comment"># java -jar arthas-boot.jar</span></span><br><span class="line">[INFO] JAVA_HOME: /usr/<span class="built_in">local</span>/openjdk-11</span><br><span class="line">[INFO] arthas-boot version: 3.7.2</span><br><span class="line">[INFO] Found existing java process, please choose one and input the serial number of the process, eg : 1. Then hit ENTER.</span><br><span class="line">* [1]: 1 platform-0.5.6-SNAPSHOT.jar</span><br><span class="line">1</span><br><span class="line">[INFO] Start download arthas from remote server: https://arthas.aliyun.com/download/3.7.2?mirror=aliyun</span><br><span class="line">[INFO] Download arthas success.</span><br><span class="line">[INFO] arthas home: /root/.arthas/lib/3.7.2/arthas</span><br><span class="line">[INFO] Try to attach process 1</span><br><span class="line">Picked up JAVA_TOOL_OPTIONS: </span><br><span class="line">[INFO] Attach process 1 success.</span><br><span class="line">[INFO] arthas-client connect 127.0.0.1 3658</span><br><span class="line">  ,---.  ,------. ,--------.,--.  ,--.  ,---.   ,---.                           </span><br><span class="line"> /  O  \ |  .--. <span class="string">''</span>--.  .--<span class="string">'|  '</span>--<span class="string">'  | /  O  \ '</span>   .-<span class="string">'                          </span></span><br><span class="line"><span class="string">|  .-.  ||  '</span>--<span class="string">'.'</span>   |  |   |  .--.  ||  .-.  |`.  `-.                          </span><br><span class="line">|  | |  ||  |\  \    |  |   |  |  |  ||  | |  |.-<span class="string">'    |                         </span></span><br><span class="line"><span class="string">`--'</span> `--<span class="string">'`--'</span> <span class="string">'--'</span>   `--<span class="string">'   `--'</span>  `--<span class="string">'`--'</span> `--<span class="string">'`-----'</span>                          </span><br><span class="line"></span><br><span class="line">wiki       https://arthas.aliyun.com/doc                                        </span><br><span class="line">tutorials  https://arthas.aliyun.com/doc/arthas-tutorials.html                  </span><br><span class="line">version    3.7.2                                                                </span><br><span class="line">main_class                                                                      </span><br><span class="line">pid        1                                                                    </span><br><span class="line">time       2024-09-05 11:31:56</span><br></pre></td></tr></table></figure><p>查看内存信息</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[arthas@1]$ memory</span><br><span class="line">Memory                                                                    used                    total                    max                     usage                    </span><br><span class="line">heap                                                                      2819M                   10240M                   10240M                  27.54%                   </span><br><span class="line">g1_eden_space                                                             816M                    6220M                    -1                      13.12%                   </span><br><span class="line">g1_old_gen                                                                1771M                   3788M                    10240M                  17.30%                   </span><br><span class="line">g1_survivor_space                                                         232M                    232M                     -1                      100.00%                  </span><br><span class="line">nonheap                                                                   349M                    367M                     1256M                   27.85%                   </span><br><span class="line">codeheap_<span class="string">'non-nmethods'</span>                                                   1M                      2M                       5M                      31.82%                   </span><br><span class="line">metaspace                                                                 204M                    215M                     512M                    39.98%                   </span><br><span class="line">codeheap_<span class="string">'profiled_nmethods'</span>                                              65M                     67M                      117M                    56.26%                   </span><br><span class="line">compressed_class_space                                                    23M                     27M                      504M                    4.62%                    </span><br><span class="line">codeheap_<span class="string">'non-profiled_nmethods'</span>                                          54M                     54M                      117M                    46.12%                   </span><br><span class="line">mapped                                                                    0K                      0K                       -                       0.00%                    </span><br><span class="line">direct                                                                    69M                     69M                      -                       100.00%</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;下载&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;root@platform-green-5d77977ffc-nw8dm:/&lt;span cla</summary>
      
    
    
    
    
    <category term="arthas" scheme="https://nmk0718.github.io/tag/arthas/"/>
    
  </entry>
  
  <entry>
    <title>hexo更换字体</title>
    <link href="https://nmk0718.github.io/2024/08/27/hexo%E6%9B%B4%E6%8D%A2%E5%AD%97%E4%BD%93/"/>
    <id>https://nmk0718.github.io/2024/08/27/hexo%E6%9B%B4%E6%8D%A2%E5%AD%97%E4%BD%93/</id>
    <published>2024-08-27T03:30:00.000Z</published>
    <updated>2024-09-20T03:00:25.793Z</updated>
    
    <content type="html"><![CDATA[<h3 id="下载字体"><a href="#下载字体" class="headerlink" title="下载字体"></a>下载字体</h3><p>开源字体</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https://github.com/fontworks-fonts/Klee/tree/master/fonts/ttf</span><br></pre></td></tr></table></figure><p>下载后格式转换 </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https://www.fontsquirrel.com/tools/webfont-generator</span><br></pre></td></tr></table></figure><p>参考文档：<br><a href="https://blog.csdn.net/qq_30997503/article/details/109551074" target="_blank" rel="noopener">https://blog.csdn.net/qq_30997503/article/details/109551074</a></p><p>下载后复制到 hexo项目的themes/nmk_hexo/source/fonts下</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜ ~ tree  Klee_One</span><br><span class="line">Klee_One</span><br><span class="line">├── kleeone-regular-webfont.eot</span><br><span class="line">├── kleeone-regular-webfont.svg</span><br><span class="line">├── kleeone-regular-webfont.ttf</span><br><span class="line">├── kleeone-regular-webfont.woff</span><br><span class="line">└── kleeone-regular-webfont.woff2</span><br></pre></td></tr></table></figure><p>修改themes/nmk_hexo/source/css/font.styl的配置为</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@font-face &#123;</span><br><span class="line">    font-family: &apos;klee_oneregular&apos;;</span><br><span class="line">    src: url(&apos;../fonts/Klee_One/kleeone-regular-webfont.eot&apos;);</span><br><span class="line">    src: url(&apos;../fonts/Klee_One/kleeone-regular-webfont.eot?#iefix&apos;) format(&apos;embedded-opentype&apos;),</span><br><span class="line">         url(&apos;../fonts/Klee_One/kleeone-regular-webfont.woff2&apos;) format(&apos;woff2&apos;),</span><br><span class="line">         url(&apos;../fonts/Klee_One/kleeone-regular-webfont.woff&apos;) format(&apos;woff&apos;),</span><br><span class="line">         url(&apos;../fonts/Klee_One/kleeone-regular-webfont.ttf&apos;) format(&apos;truetype&apos;),</span><br><span class="line">         url(&apos;../fonts/Klee_One/kleeone-regular-webfont.svg#klee_oneregular&apos;) format(&apos;svg&apos;);</span><br><span class="line">    font-weight 300;</span><br><span class="line">    font-style: normal;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$font-family = klee_oneregular</span><br></pre></td></tr></table></figure><p>或者直接使用系统的</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$font-family = Helvetica Neue, Helvetica, PingFang SC, Hiragino Sans GB, Microsoft YaHei, Arial, sans-serif</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;下载字体&quot;&gt;&lt;a href=&quot;#下载字体&quot; class=&quot;headerlink&quot; title=&quot;下载字体&quot;&gt;&lt;/a&gt;下载字体&lt;/h3&gt;&lt;p&gt;开源字体&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=</summary>
      
    
    
    
    
    <category term="hexo" scheme="https://nmk0718.github.io/tag/hexo/"/>
    
  </entry>
  
  <entry>
    <title>helm</title>
    <link href="https://nmk0718.github.io/2024/08/23/helm/"/>
    <id>https://nmk0718.github.io/2024/08/23/helm/</id>
    <published>2024-08-23T08:29:00.000Z</published>
    <updated>2024-11-29T06:44:26.887Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装helm"><a href="#安装helm" class="headerlink" title="安装helm"></a>安装helm</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mac下载</span></span><br><span class="line">wget https://get.helm.sh/helm-v3.14.3-darwin-amd64.tar.gz</span><br><span class="line"><span class="comment"># linux下载</span></span><br><span class="line">wget https://get.helm.sh/helm-v3.14.3-linux-amd64.tar.gz</span><br><span class="line"></span><br><span class="line">tar zxvf helm-v3.14.3-darwin-amd64.tar.gz</span><br><span class="line"></span><br><span class="line">sudo mv darwin-amd64/helm /usr/<span class="built_in">local</span>/bin/helm</span><br><span class="line"></span><br><span class="line">helm version</span><br><span class="line">version.BuildInfo&#123;Version:<span class="string">"v3.14.3"</span>, GitCommit:<span class="string">"f03cc04caaa8f6d7c3e67cf918929150cf6f3f12"</span>, GitTreeState:<span class="string">"clean"</span>,GoVersion:<span class="string">"go1.21.7"</span>&#125;</span><br></pre></td></tr></table></figure><p>mac需要去 <code>系统设置&gt;隐私与安全性&gt;安全性</code> 允许helm运行</p><h3 id="helm命令"><a href="#helm命令" class="headerlink" title="helm命令"></a>helm命令</h3><h4 id="helm-create"><a href="#helm-create" class="headerlink" title="helm create"></a>helm create</h4><p>该命令用于初始化一个新的 Helm Chart。Helm Chart 是 Kubernetes 应用的包，包含了运行应用所需的所有资源定义。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">helm create nmk-app</span><br><span class="line">➜ ~ tree nmk-app</span><br><span class="line">nmk-app</span><br><span class="line">├── Chart.yaml</span><br><span class="line">├── charts</span><br><span class="line">├── templates</span><br><span class="line">│   ├── NOTES.txt</span><br><span class="line">│   ├── _helpers.tpl</span><br><span class="line">│   ├── deployment.yaml</span><br><span class="line">│   ├── hpa.yaml</span><br><span class="line">│   ├── ingress.yaml</span><br><span class="line">│   ├── service.yaml</span><br><span class="line">│   ├── serviceaccount.yaml</span><br><span class="line">│   └── tests</span><br><span class="line">│       └── <span class="built_in">test</span>-connection.yaml</span><br><span class="line">└── values.yaml</span><br></pre></td></tr></table></figure><h4 id="helm-install"><a href="#helm-install" class="headerlink" title="helm install"></a>helm install</h4><p>用于将 Helm Chart 安装到 Kubernetes 集群中。它会创建所有定义在 Chart 中的资源。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜ ~ helm install nmk-app nmk-app</span><br><span class="line">NAME: nmk-app</span><br><span class="line">LAST DEPLOYED: Mon Aug 23 16:06:14 2024</span><br><span class="line">NAMESPACE: default</span><br><span class="line">STATUS: deployed</span><br><span class="line">REVISION: 1</span><br><span class="line">TEST SUITE: None</span><br></pre></td></tr></table></figure><h4 id="helm-upgrade"><a href="#helm-upgrade" class="headerlink" title="helm upgrade"></a>helm upgrade</h4><p>用于升级已安装的 Helm Chart 到新版本。可以修改 Chart 的配置和资源。</p><p>将已有的 release 升级到一个新版本的 chart</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜ ~ helm upgrade nmk-app nmk-app</span><br><span class="line">Release <span class="string">"nmk-app"</span> has been upgraded. Happy Helming!</span><br><span class="line">NAME: nmk-app</span><br><span class="line">LAST DEPLOYED: Mon Aug 26 16:07:57 2024</span><br><span class="line">NAMESPACE: default</span><br><span class="line">STATUS: deployed</span><br><span class="line">REVISION: 2</span><br><span class="line">TEST SUITE: None</span><br></pre></td></tr></table></figure><h4 id="helm-rollback"><a href="#helm-rollback" class="headerlink" title="helm rollback"></a>helm rollback</h4><p>当 Helm Chart 升级后出现问题时，可以使用该命令回滚到之前的版本。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜ ~ helm rollback nmk-app 1</span><br><span class="line">Rollback was a success! Happy Helming!</span><br><span class="line">➜ ~ kubectl get pod  -n tke-docker-test -l app=nmk-app</span><br><span class="line">NAME      READY   STATUS    RESTARTS   AGE</span><br><span class="line">nmk-app   1/1     Running   0          8m49s</span><br></pre></td></tr></table></figure><h4 id="helm-lint"><a href="#helm-lint" class="headerlink" title="helm lint"></a>helm lint</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜ ~ helm lint nmk-app</span><br><span class="line">==&gt; Linting nmk-app</span><br><span class="line">[INFO] Chart.yaml: icon is recommended</span><br><span class="line"></span><br><span class="line">1 chart(s) linted, 0 chart(s) failed</span><br><span class="line"><span class="comment">#对1个chart进行了linting（代码审查），并且在审查过程中没有发现任何失败的问题</span></span><br></pre></td></tr></table></figure><h4 id="helm-show"><a href="#helm-show" class="headerlink" title="helm show"></a>helm show</h4><p>用于查看 Helm Chart 的内容，包括模板、配置文件和其他资源的定义。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">显示Chart的信息和元数据</span><br><span class="line"></span><br><span class="line">➜ ~ helm show chart nmk-app</span><br><span class="line">apiVersion: v2</span><br><span class="line">appVersion: 1.16.0</span><br><span class="line">description: A Helm chart <span class="keyword">for</span> Kubernetes</span><br><span class="line">name: nmk-app</span><br><span class="line"><span class="built_in">type</span>: application</span><br><span class="line">version: 0.1.0</span><br></pre></td></tr></table></figure><h4 id="helm-uninstall"><a href="#helm-uninstall" class="headerlink" title="helm uninstall"></a>helm uninstall</h4><p>移除已安装的 Helm Chart。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜ ~ helm uninstall nmk-app</span><br><span class="line">release <span class="string">"nmk-app"</span> uninstalled</span><br></pre></td></tr></table></figure><h4 id="helm-pull"><a href="#helm-pull" class="headerlink" title="helm pull"></a>helm pull</h4><p>从远程仓库下载或拉取一个 Helm Chart 到本地。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜ ~ helm repo add stable https://charts.helm.sh/stable</span><br><span class="line">➜ ~ helm pull stable/mysql --version 1.6.9</span><br><span class="line">常用参数：</span><br><span class="line"></span><br><span class="line">--version：允许指定一个版本约束，用于下载特定版本的 Helm 图表。默认使用latest版本；</span><br><span class="line">--untar：下载Chart后是否自动解压缩。如果设置为<span class="literal">true</span>，则Helm会在下载后自动解压缩</span><br><span class="line">--untardir：指定图表提取到的目录；</span><br><span class="line">--repo：指定从中下载图表的存储库的 URL；</span><br><span class="line">--username和--password：提供访问私人存储库的凭证；</span><br><span class="line">--verify：可以在使用图表之前对其进行验证，确保图表的完整性和安全性。</span><br></pre></td></tr></table></figure><h3 id="制作helm-chart"><a href="#制作helm-chart" class="headerlink" title="制作helm chart"></a>制作helm chart</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">helm create nmk-app</span><br><span class="line">➜  Downloads tree nmk-app</span><br><span class="line">nmk-test</span><br><span class="line">├── Chart.yaml</span><br><span class="line">├── charts</span><br><span class="line">├── templates</span><br><span class="line">│   ├── NOTES.txt</span><br><span class="line">│   ├── _helpers.tpl</span><br><span class="line">│   ├── deployment.yaml</span><br><span class="line">│   ├── hpa.yaml</span><br><span class="line">│   ├── ingress.yaml</span><br><span class="line">│   ├── service.yaml</span><br><span class="line">│   ├── serviceaccount.yaml</span><br><span class="line">│   └── tests</span><br><span class="line">│       └── <span class="built_in">test</span>-connection.yaml</span><br><span class="line">└── values.yaml</span><br></pre></td></tr></table></figure><p>删除没用的配置文件，只保留以下文件</p><h4 id="deployment-yaml"><a href="#deployment-yaml" class="headerlink" title="deployment.yaml"></a>deployment.yaml</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">&#123;&#123;</span> <span class="string">.Values.appname</span> <span class="string">&#125;&#125;</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">&#123;&#123;</span> <span class="string">.Values.namespace</span> <span class="string">&#125;&#125;</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">&#123;&#123;</span> <span class="string">.Values.appname</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">&#123;&#123;</span> <span class="string">.Values.appname</span> <span class="string">&#125;&#125;</span></span><br><span class="line">  <span class="attr">strategy:</span></span><br><span class="line">    <span class="attr">rollingUpdate:</span></span><br><span class="line">      <span class="attr">maxSurge:</span> <span class="number">25</span><span class="string">%</span></span><br><span class="line">      <span class="attr">maxUnavailable:</span> <span class="number">25</span><span class="string">%</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">RollingUpdate</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">&#123;&#123;</span> <span class="string">.Values.appname</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">imagePullSecrets:</span> </span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&#123;&#123;</span> <span class="string">.Values.imagepullsecrets</span> <span class="string">&#125;&#125;</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&#123;&#123;</span> <span class="string">.Values.appname</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">env:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">JAVA_OPTS</span></span><br><span class="line">              <span class="attr">value:</span> <span class="string">&#123;&#123;</span> <span class="string">.Values.env.javaoptions</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">"<span class="template-variable">&#123;&#123; .Values.image.repository &#125;&#125;</span><span class="template-variable">&#123;&#123; .Values.appname &#125;&#125;</span>:<span class="template-variable">&#123;&#123; .Values.image.tag &#125;&#125;</span>"</span></span><br><span class="line">          <span class="attr">imagePullPolicy:</span> <span class="string">&#123;&#123;</span> <span class="string">.Values.image.pullPolicy</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">lifecycle:</span></span><br><span class="line">            <span class="attr">preStop:</span></span><br><span class="line">              <span class="attr">exec:</span></span><br><span class="line">                <span class="attr">command:</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">sleep</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">20s</span></span><br><span class="line">          <span class="attr">readinessProbe:</span></span><br><span class="line">            <span class="attr">failureThreshold:</span> <span class="number">10</span></span><br><span class="line">            <span class="attr">httpGet:</span></span><br><span class="line">              <span class="attr">path:</span> <span class="string">/actuator/</span></span><br><span class="line">              <span class="attr">port:</span> <span class="string">&#123;&#123;</span> <span class="string">.Values.service.port</span> <span class="string">&#125;&#125;</span></span><br><span class="line">              <span class="attr">scheme:</span> <span class="string">HTTP</span></span><br><span class="line">            <span class="attr">initialDelaySeconds:</span> <span class="number">10</span></span><br><span class="line">            <span class="attr">periodSeconds:</span> <span class="number">15</span></span><br><span class="line">            <span class="attr">successThreshold:</span> <span class="number">1</span></span><br><span class="line">            <span class="attr">timeoutSeconds:</span> <span class="number">5</span></span><br><span class="line">          <span class="attr">startupProbe:</span></span><br><span class="line">            <span class="attr">failureThreshold:</span> <span class="number">10</span></span><br><span class="line">            <span class="attr">httpGet:</span></span><br><span class="line">              <span class="attr">path:</span> <span class="string">/actuator/</span></span><br><span class="line">              <span class="attr">port:</span> <span class="string">&#123;&#123;</span> <span class="string">.Values.service.port</span> <span class="string">&#125;&#125;</span></span><br><span class="line">              <span class="attr">scheme:</span> <span class="string">HTTP</span></span><br><span class="line">            <span class="attr">initialDelaySeconds:</span> <span class="number">10</span></span><br><span class="line">            <span class="attr">periodSeconds:</span> <span class="number">10</span></span><br><span class="line">            <span class="attr">successThreshold:</span> <span class="number">1</span></span><br><span class="line">            <span class="attr">timeoutSeconds:</span> <span class="number">5</span></span><br><span class="line">          <span class="attr">resources:</span></span><br><span class="line">            <span class="attr">limits:</span></span><br><span class="line">              <span class="attr">cpu:</span> <span class="string">&#123;&#123;</span> <span class="string">.Values.resource.limitCpu</span> <span class="string">&#125;&#125;</span></span><br><span class="line">              <span class="attr">memory:</span> <span class="string">&#123;&#123;</span> <span class="string">.Values.resource.limitMemory</span> <span class="string">&#125;&#125;</span></span><br><span class="line">            <span class="attr">requests:</span></span><br><span class="line">              <span class="attr">cpu:</span> <span class="string">&#123;&#123;</span> <span class="string">.Values.resource.requestCpu</span> <span class="string">&#125;&#125;</span></span><br><span class="line">              <span class="attr">memory:</span> <span class="string">&#123;&#123;</span> <span class="string">.Values.resource.requestMemory</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure><h4 id="service-yaml"><a href="#service-yaml" class="headerlink" title="service.yaml"></a>service.yaml</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">&#123;&#123;</span> <span class="string">.Values.appname</span> <span class="string">&#125;&#125;</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">&#123;&#123;</span> <span class="string">.Values.namespace</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">&#123;&#123;</span> <span class="string">.Values.service.type</span> <span class="string">&#125;&#125;</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="string">&#123;&#123;</span> <span class="string">.Values.service.port</span> <span class="string">&#125;&#125;</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="string">&#123;&#123;</span> <span class="string">.Values.service.port</span> <span class="string">&#125;&#125;</span></span><br><span class="line">      <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">&#123;&#123;</span> <span class="string">.Values.appname</span> <span class="string">&#125;&#125;</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">&#123;&#123;</span> <span class="string">.Values.appname</span> <span class="string">&#125;&#125;</span></span><br><span class="line">  <span class="attr">sessionAffinity:</span> <span class="string">None</span></span><br></pre></td></tr></table></figure><h4 id="ingress-yaml"><a href="#ingress-yaml" class="headerlink" title="ingress.yaml"></a>ingress.yaml</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">&#123;&#123;-</span> <span class="string">if</span> <span class="string">.Values.ingress.enabled</span> <span class="string">-&#125;&#125;</span></span><br><span class="line"><span class="string">&#123;&#123;-</span> <span class="string">$fullName</span> <span class="string">:=</span> <span class="string">.Values.appName</span> <span class="string">-&#125;&#125;</span></span><br><span class="line"><span class="string">&#123;&#123;-</span> <span class="string">$svcPort</span> <span class="string">:=</span> <span class="string">.Values.service.port</span> <span class="string">-&#125;&#125;</span></span><br><span class="line"><span class="string">&#123;&#123;-</span> <span class="string">if</span> <span class="string">and</span> <span class="string">.Values.ingress.className</span> <span class="string">(not</span> <span class="string">(semverCompare</span> <span class="string">"&gt;=1.18-0"</span> <span class="string">.Capabilities.KubeVersion.GitVersion))</span> <span class="string">&#125;&#125;</span></span><br><span class="line">  <span class="string">&#123;&#123;-</span> <span class="string">if</span> <span class="string">not</span> <span class="string">(hasKey</span> <span class="string">.Values.ingress.annotations</span> <span class="string">"kubernetes.io/ingress.class"</span><span class="string">)</span> <span class="string">&#125;&#125;</span></span><br><span class="line">  <span class="string">&#123;&#123;-</span> <span class="string">$_</span> <span class="string">:=</span> <span class="string">set</span> <span class="string">.Values.ingress.annotations</span> <span class="string">"kubernetes.io/ingress.class"</span> <span class="string">.Values.ingress.className&#125;&#125;</span></span><br><span class="line">  <span class="string">&#123;&#123;-</span> <span class="string">end</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="string">&#123;&#123;-</span> <span class="string">end</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="string">&#123;&#123;-</span> <span class="string">if</span> <span class="string">semverCompare</span> <span class="string">"&gt;=1.19-0"</span> <span class="string">.Capabilities.KubeVersion.GitVersion</span> <span class="string">-&#125;&#125;</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.k8s.io/v1</span></span><br><span class="line"><span class="string">&#123;&#123;-</span> <span class="string">else</span> <span class="string">if</span> <span class="string">semverCompare</span> <span class="string">"&gt;=1.14-0"</span> <span class="string">.Capabilities.KubeVersion.GitVersion</span> <span class="string">-&#125;&#125;</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.k8s.io/v1beta1</span></span><br><span class="line"><span class="string">&#123;&#123;-</span> <span class="string">else</span> <span class="string">-&#125;&#125;</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="string">&#123;&#123;-</span> <span class="string">end</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">&#123;&#123;</span> <span class="string">$fullName</span> <span class="string">&#125;&#125;</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">&#123;&#123;</span> <span class="string">.Values.namespace</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="string">&#123;&#123;-</span> <span class="string">if</span> <span class="string">and</span> <span class="string">.Values.ingress.className</span> <span class="string">(semverCompare</span> <span class="string">"&gt;=1.18-0"</span> <span class="string">.Capabilities.KubeVersion.GitVersion)</span> <span class="string">&#125;&#125;</span></span><br><span class="line">  <span class="attr">ingressClassName:</span> <span class="string">&#123;&#123;</span> <span class="string">.Values.ingress.className</span> <span class="string">&#125;&#125;</span></span><br><span class="line">  <span class="string">&#123;&#123;-</span> <span class="string">end</span> <span class="string">&#125;&#125;</span></span><br><span class="line">  <span class="string">&#123;&#123;-</span> <span class="string">if</span> <span class="string">.Values.ingress.tls</span> <span class="string">&#125;&#125;</span></span><br><span class="line">  <span class="attr">tls:</span></span><br><span class="line">    <span class="string">&#123;&#123;-</span> <span class="string">range</span> <span class="string">.Values.ingress.tls</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">hosts:</span></span><br><span class="line">        <span class="string">&#123;&#123;-</span> <span class="string">range</span> <span class="string">.hosts</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">&#123;&#123;</span> <span class="string">.</span> <span class="string">|</span> <span class="string">quote</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="string">&#123;&#123;-</span> <span class="string">end</span> <span class="string">&#125;&#125;</span></span><br><span class="line">      <span class="attr">secretName:</span> <span class="string">&#123;&#123;</span> <span class="string">.secretName</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="string">&#123;&#123;-</span> <span class="string">end</span> <span class="string">&#125;&#125;</span></span><br><span class="line">  <span class="string">&#123;&#123;-</span> <span class="string">end</span> <span class="string">&#125;&#125;</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">    <span class="string">&#123;&#123;-</span> <span class="string">range</span> <span class="string">.Values.ingress.hosts</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">host:</span> <span class="string">&#123;&#123;</span> <span class="string">.host</span> <span class="string">|</span> <span class="string">quote</span> <span class="string">&#125;&#125;</span></span><br><span class="line">      <span class="attr">http:</span></span><br><span class="line">        <span class="attr">paths:</span></span><br><span class="line">          <span class="string">&#123;&#123;-</span> <span class="string">range</span> <span class="string">.paths</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">&#123;&#123;</span> <span class="string">.path</span> <span class="string">&#125;&#125;</span></span><br><span class="line">            <span class="string">&#123;&#123;-</span> <span class="string">if</span> <span class="string">and</span> <span class="string">.pathType</span> <span class="string">(semverCompare</span> <span class="string">"&gt;=1.18-0"</span> <span class="string">$.Capabilities.KubeVersion.GitVersion)</span> <span class="string">&#125;&#125;</span></span><br><span class="line">            <span class="attr">pathType:</span> <span class="string">&#123;&#123;</span> <span class="string">.pathType</span> <span class="string">&#125;&#125;</span></span><br><span class="line">            <span class="string">&#123;&#123;-</span> <span class="string">end</span> <span class="string">&#125;&#125;</span></span><br><span class="line">            <span class="attr">backend:</span></span><br><span class="line">              <span class="string">&#123;&#123;-</span> <span class="string">if</span> <span class="string">semverCompare</span> <span class="string">"&gt;=1.19-0"</span> <span class="string">$.Capabilities.KubeVersion.GitVersion</span> <span class="string">&#125;&#125;</span></span><br><span class="line">              <span class="attr">service:</span></span><br><span class="line">                <span class="attr">name:</span> <span class="string">&#123;&#123;</span> <span class="string">$fullName</span> <span class="string">&#125;&#125;</span></span><br><span class="line">                <span class="attr">port:</span></span><br><span class="line">                  <span class="attr">number:</span> <span class="string">&#123;&#123;</span> <span class="string">$svcPort</span> <span class="string">&#125;&#125;</span></span><br><span class="line">              <span class="string">&#123;&#123;-</span> <span class="string">else</span> <span class="string">&#125;&#125;</span></span><br><span class="line">              <span class="attr">serviceName:</span> <span class="string">&#123;&#123;</span> <span class="string">$fullName</span> <span class="string">&#125;&#125;</span></span><br><span class="line">              <span class="attr">servicePort:</span> <span class="string">&#123;&#123;</span> <span class="string">$svcPort</span> <span class="string">&#125;&#125;</span></span><br><span class="line">              <span class="string">&#123;&#123;-</span> <span class="string">end</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="string">&#123;&#123;-</span> <span class="string">end</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="string">&#123;&#123;-</span> <span class="string">end</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="string">&#123;&#123;-</span> <span class="string">end</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure><h4 id="values-yaml"><a href="#values-yaml" class="headerlink" title="values.yaml"></a>values.yaml</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">appname:</span> <span class="string">nmk-app</span></span><br><span class="line"></span><br><span class="line"><span class="attr">namespace:</span> <span class="string">tke-docker-test</span></span><br><span class="line"></span><br><span class="line"><span class="attr">replicaCount:</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="attr">image:</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">helm-hub.com/nmk/</span></span><br><span class="line">  <span class="attr">pullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">  <span class="attr">tag:</span> <span class="string">app-20240806110148</span></span><br><span class="line"></span><br><span class="line"><span class="attr">imagepullsecrets:</span> <span class="string">qcloudregistrykey</span></span><br><span class="line"></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line">  <span class="attr">javaoptions:</span> <span class="string">-Xms2g</span> <span class="string">-Xmx2g</span> <span class="string">-XX:MetaspaceSize=512M</span> <span class="string">-XX:MaxMetaspaceSize=512M</span> <span class="string">-Dspring.profiles.active=test</span> <span class="string">-Dspring.cloud.consul.enabled=false</span> <span class="string">-Dtsf.discovery.ribbon.enabled=false</span></span><br><span class="line"></span><br><span class="line"><span class="attr">service:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">ClusterIP</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">resource:</span></span><br><span class="line">  <span class="attr">limitCpu:</span> <span class="string">'2'</span></span><br><span class="line">  <span class="attr">limitMemory:</span> <span class="string">2Gi</span></span><br><span class="line">  <span class="attr">requestCpu:</span> <span class="string">'1'</span></span><br><span class="line">  <span class="attr">requestMemory:</span> <span class="string">1Gi</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">ingress:</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">className:</span> <span class="string">"nginx"</span></span><br><span class="line">  <span class="attr">annotations:</span> <span class="string">&#123;&#125;</span></span><br><span class="line">    <span class="comment">#kubernetes.io/ingress.class: nginx</span></span><br><span class="line">  <span class="attr">hosts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">host:</span> <span class="string">nmk.com</span></span><br><span class="line">      <span class="attr">paths:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">/</span></span><br><span class="line">          <span class="attr">pathType:</span> <span class="string">ImplementationSpecific</span></span><br><span class="line">  <span class="attr">tls:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">secretName:</span> <span class="string">ssl-2024</span></span><br><span class="line">      <span class="attr">hosts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">nmk.com</span></span><br></pre></td></tr></table></figure><h4 id="Chart-yaml"><a href="#Chart-yaml" class="headerlink" title="Chart.yaml"></a>Chart.yaml</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v2</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">nmk-app</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">A</span> <span class="string">Helm</span> <span class="string">chart</span> <span class="string">for</span> <span class="string">Kubernetes</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">application</span></span><br><span class="line"><span class="attr">version:</span> <span class="number">0.1</span><span class="number">.0</span></span><br><span class="line"><span class="attr">appVersion:</span> <span class="string">"1.16.0"</span></span><br></pre></td></tr></table></figure><h4 id="安装后查看"><a href="#安装后查看" class="headerlink" title="安装后查看"></a>安装后查看</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜ ~ Downloads helm list</span><br><span class="line">nmk-app        default  1       2024-08-26 16:06:14.735267 +0800 CST   deployednmk-app-0.1.0 1.16.0</span><br><span class="line"></span><br><span class="line">➜ ~ Downloads kubectl get pods -n tke-docker-test</span><br><span class="line">nmk-app-6fdc57bd55-gx6mn                                    1/1     Running            0          117s</span><br><span class="line"></span><br><span class="line">➜ ~ Downloads kubectl get service -n tke-docker-test</span><br><span class="line">nmk-app                                    ClusterIP      172.31.159.244   &lt;none&gt;         8080/TCP                        4m14s</span><br><span class="line"></span><br><span class="line">➜ ~ Downloads kubectl get ingress -n tke-docker-test</span><br><span class="line">nmk-app                                 nginx    nmk.com                          10.30.150.3   80, 443   4m24s</span><br></pre></td></tr></table></figure><p>可使用以下参数指定变量进行多应用部署使用</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">--<span class="built_in">set</span> appName=demo --<span class="built_in">set</span> version=v1.1</span><br></pre></td></tr></table></figure><p>参考文献：<br><a href="https://blog.csdn.net/dhf880913/article/details/138125561" target="_blank" rel="noopener">https://blog.csdn.net/dhf880913/article/details/138125561</a><br><a href="https://blog.csdn.net/zhuganlai168/article/details/131483308" target="_blank" rel="noopener">https://blog.csdn.net/zhuganlai168/article/details/131483308</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;安装helm&quot;&gt;&lt;a href=&quot;#安装helm&quot; class=&quot;headerlink&quot; title=&quot;安装helm&quot;&gt;&lt;/a&gt;安装helm&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code</summary>
      
    
    
    
    
    <category term="helm" scheme="https://nmk0718.github.io/tag/helm/"/>
    
  </entry>
  
  <entry>
    <title>容器内安装基础工具</title>
    <link href="https://nmk0718.github.io/2024/07/22/%E5%AE%B9%E5%99%A8%E5%86%85%E5%AE%89%E8%A3%85%E5%9F%BA%E7%A1%80%E5%B7%A5%E5%85%B7/"/>
    <id>https://nmk0718.github.io/2024/07/22/%E5%AE%B9%E5%99%A8%E5%86%85%E5%AE%89%E8%A3%85%E5%9F%BA%E7%A1%80%E5%B7%A5%E5%85%B7/</id>
    <published>2024-07-22T06:25:00.000Z</published>
    <updated>2025-02-18T07:04:37.187Z</updated>
    
    <content type="html"><![CDATA[<p>使用openjdk:8和openjdk:11作为基础镜像构建业务镜像，但是使用中发现镜像里面没有ping、telnet等基础命令</p><h3 id="在容器中使用"><a href="#在容器中使用" class="headerlink" title="在容器中使用:"></a>在容器中使用:</h3><h4 id="将源更换为清华源"><a href="#将源更换为清华源" class="headerlink" title="将源更换为清华源"></a>将源更换为清华源</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat &gt; /etc/apt/sources.list &lt;&lt; EOF</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/debian/ bullseye main contrib non-free</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/debian/ bullseye-updates main contrib non-free</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/debian/ bullseye-backports main contrib non-free</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/debian-security bullseye-security main contrib non-free</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h4 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get clean</span><br><span class="line">apt-get update</span><br><span class="line">apt-get install -y curl telnet vim iputils-ping net-tools</span><br><span class="line"><span class="comment">#安装mysql</span></span><br><span class="line">apt install -y default-mysql-client</span><br></pre></td></tr></table></figure><h4 id="Dockerfile中使用"><a href="#Dockerfile中使用" class="headerlink" title="Dockerfile中使用:"></a>Dockerfile中使用:</h4><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">echo</span> <span class="string">"deb https://mirrors.tuna.tsinghua.edu.cn/debian/ bullseye main contrib non-free"</span> &gt;/etc/apt/sources.list </span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">echo</span> <span class="string">"deb https://mirrors.tuna.tsinghua.edu.cn/debian/ bullseye-updates main contrib non-free"</span> &gt;&gt;/etc/apt/sources.list </span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">echo</span> <span class="string">"deb https://mirrors.tuna.tsinghua.edu.cn/debian/ bullseye-backports main contrib non-free"</span> &gt;&gt;/etc/apt/sources.list </span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">echo</span> <span class="string">"deb https://mirrors.tuna.tsinghua.edu.cn/debian-security bullseye-security main contrib non-free"</span> &gt;&gt;/etc/apt/sources.list</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash">  apt-get clean</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash">  apt-get update</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash">  apt-get install -y curl telnet vim iputils-ping net-tools</span></span><br></pre></td></tr></table></figure><h3 id="alpine安装telnet、curl等命令"><a href="#alpine安装telnet、curl等命令" class="headerlink" title="alpine安装telnet、curl等命令"></a>alpine安装telnet、curl等命令</h3><p>很多镜像是使用alpine作为基础镜像，体积小，但apline精简了很多基础组件因此调试起来很麻烦，下方总结了常用的alpine组件安装方法：</p><table><thead><tr><th align="center">功能</th><th align="center">命令</th><th align="center">备注</th></tr></thead><tbody><tr><td align="center">镜像加速</td><td align="center">sed -i ‘s/dl-cdn.alpinelinux.org/mirrors.ustc.edu.cn/g’ /etc/apk/repositories</td><td align="center">将原装的alpine库替换成国内的ustc库</td></tr><tr><td align="center">apk库更新</td><td align="center">apk update</td><td align="center"></td></tr><tr><td align="center">安装curl</td><td align="center">apk add curl</td><td align="center"></td></tr><tr><td align="center">安装telnet</td><td align="center">apk add busybox-extras</td><td align="center"></td></tr><tr><td align="center">偷懒N合1</td><td align="center">sed -i ‘s/dl-cdn.alpinelinux.org/mirrors.ustc.edu.cn/g’ /etc/apk/repositories &amp;&amp; apk update &amp;&amp; apk add curl &amp;&amp; apk add busybox-extras</td><td align="center"></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;使用openjdk:8和openjdk:11作为基础镜像构建业务镜像，但是使用中发现镜像里面没有ping、telnet等基础命令&lt;/p&gt;
&lt;h3 id=&quot;在容器中使用&quot;&gt;&lt;a href=&quot;#在容器中使用&quot; class=&quot;headerlink&quot; title=&quot;在容器中使用:&quot;</summary>
      
    
    
    
    
    <category term="k8s" scheme="https://nmk0718.github.io/tag/k8s/"/>
    
    <category term="docker" scheme="https://nmk0718.github.io/tag/docker/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu安装Docker和GPU驱动</title>
    <link href="https://nmk0718.github.io/2023/12/05/Ubuntu%E5%AE%89%E8%A3%85Docker%E5%92%8CGPU%E9%A9%B1%E5%8A%A8/"/>
    <id>https://nmk0718.github.io/2023/12/05/Ubuntu%E5%AE%89%E8%A3%85Docker%E5%92%8CGPU%E9%A9%B1%E5%8A%A8/</id>
    <published>2023-12-05T07:30:00.000Z</published>
    <updated>2024-11-29T06:41:49.378Z</updated>
    
    <content type="html"><![CDATA[<h4 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install     ca-certificates     curl     gnupg     lsb-release -y</span><br><span class="line">sudo mkdir -p /etc/apt/keyrings</span><br></pre></td></tr></table></figure><h4 id="添加官方GPG密钥："><a href="#添加官方GPG密钥：" class="headerlink" title="添加官方GPG密钥："></a>添加官方GPG密钥：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo curl -fsSL http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -</span><br></pre></td></tr></table></figure><h4 id="添加Docker的稳定版本仓库："><a href="#添加Docker的稳定版本仓库：" class="headerlink" title="添加Docker的稳定版本仓库："></a>添加Docker的稳定版本仓库：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository &quot;deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable&quot;</span><br></pre></td></tr></table></figure><h4 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo useradd docker</span><br><span class="line">sudo usermod -aG docker $USER</span><br></pre></td></tr></table></figure><h4 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h4><p>腾讯云使用</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install docker.io -y</span><br></pre></td></tr></table></figure><h4 id="挂载磁盘"><a href="#挂载磁盘" class="headerlink" title="挂载磁盘"></a>挂载磁盘</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@ubuntu:/var/lib# fdisk -l</span><br><span class="line"></span><br><span class="line">Disk /dev/vda: 50 GiB, 53687091200 bytes, 104857600 sectors</span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disklabel type: gpt</span><br><span class="line">Disk identifier: 884D39AE-2030-4231-B486-520515A9ADD7</span><br><span class="line"></span><br><span class="line">Device     Start       End   Sectors Size Type</span><br><span class="line">/dev/vda1   2048      4095      2048   1M BIOS boot</span><br><span class="line">/dev/vda2   4096 104857566 104853471  50G Linux filesystem</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disk /dev/vdb: 200 GiB, 214748364800 bytes, 419430400 sectors</span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">root@ubuntu:/var/lib# fdisk /dev/vdb</span><br><span class="line"></span><br><span class="line">Welcome to fdisk (util-linux 2.34).</span><br><span class="line">Changes will remain in memory only, until you decide to write them.</span><br><span class="line">Be careful before using the write command.</span><br><span class="line"></span><br><span class="line">Device does not contain a recognized partition table.</span><br><span class="line">Created a new DOS disklabel with disk identifier 0x1c765732.</span><br><span class="line"></span><br><span class="line">Command (m for help): `p`</span><br><span class="line">Disk /dev/vdb: 200 GiB, 214748364800 bytes, 419430400 sectors</span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disklabel type: dos</span><br><span class="line">Disk identifier: 0x1c765732</span><br><span class="line"></span><br><span class="line">Command (m for help): `n`</span><br><span class="line">Partition type</span><br><span class="line">   p   primary (0 primary, 0 extended, 4 free)</span><br><span class="line">   e   extended (container for logical partitions)</span><br><span class="line">Select (default p): `p`</span><br><span class="line">Partition number (1-4, default 1):</span><br><span class="line">First sector (2048-419430399, default 2048):</span><br><span class="line">Last sector, +/-sectors or +/-size&#123;K,M,G,T,P&#125; (2048-419430399, default 419430399):</span><br><span class="line"></span><br><span class="line">Created a new partition 1 of type &apos;Linux&apos; and of size 200 GiB.</span><br><span class="line"></span><br><span class="line">Command (m for help): `w`</span><br><span class="line">The partition table has been altered.</span><br><span class="line">Calling ioctl() to re-read partition table.</span><br><span class="line">Syncing disks.</span><br><span class="line"></span><br><span class="line">root@ubuntu:/var/lib# mkfs.ext4 /dev/vdb1</span><br><span class="line">mke2fs 1.45.5 (07-Jan-2020)</span><br><span class="line">Creating filesystem with 52428544 4k blocks and 13107200 inodes</span><br><span class="line">Filesystem UUID: a75b2a51-daa1-4d05-a6ee-0871fb0cf059</span><br><span class="line">Superblock backups stored on blocks:</span><br><span class="line">32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632, 2654208,</span><br><span class="line">4096000, 7962624, 11239424, 20480000, 23887872</span><br><span class="line"></span><br><span class="line">Allocating group tables: done</span><br><span class="line">Writing inode tables: done</span><br><span class="line">Creating journal (262144 blocks): done</span><br><span class="line">Writing superblocks and filesystem accounting information: done</span><br><span class="line"></span><br><span class="line">root@ubuntu:/var/lib# mkdir /data</span><br><span class="line">root@ubuntu:/# mount /dev/vdb1 /data</span><br><span class="line">root@ubuntu:/# df -h</span><br><span class="line">Filesystem      Size  Used Avail Use% Mounted on</span><br><span class="line">udev             16G     0   16G   0% /dev</span><br><span class="line">tmpfs           3.1G  808K  3.1G   1% /run</span><br><span class="line">/dev/vda2        50G   19G   29G  39% /</span><br><span class="line">tmpfs            16G   24K   16G   1% /dev/shm</span><br><span class="line">tmpfs           5.0M     0  5.0M   0% /run/lock</span><br><span class="line">tmpfs            16G     0   16G   0% /sys/fs/cgroup</span><br><span class="line">tmpfs           3.1G     0  3.1G   0% /run/user/1000</span><br><span class="line">/dev/vdb1       196G   28K  186G   1% /data</span><br></pre></td></tr></table></figure><h4 id="修改存储路径"><a href="#修改存储路径" class="headerlink" title="修改存储路径"></a>修改存储路径</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#Docker的镜像需在大量的存储空间，默认的存储路径在 /var/lib/docker, 可以按实际需求修改存储路径。</span><br><span class="line">#停止docker</span><br><span class="line">systemctl stop docker</span><br><span class="line">#移动目录到新路径</span><br><span class="line">sudo mv /var/lib/docker /data/docker</span><br><span class="line">#做个软链接</span><br><span class="line">ln -s /data/docker /var/lib/docker </span><br><span class="line">#启动docker</span><br><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure><h4 id="安装GPU驱动"><a href="#安装GPU驱动" class="headerlink" title="安装GPU驱动"></a>安装GPU驱动</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">distribution=$(. /etc/os-release;echo $ID$VERSION_ID)</span><br><span class="line">curl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | sudo apt-key add -</span><br><span class="line">curl -s -L https://nvidia.github.io/nvidia-docker/$distribution/nvidia-docker.list | sudo tee /etc/apt/sources.list.d/nvidia-docker.list</span><br><span class="line">sudo apt-get update &amp;&amp; sudo apt-get install -y nvidia-container-toolkit</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><h4 id="验证驱动"><a href="#验证驱动" class="headerlink" title="验证驱动"></a>验证驱动</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo nvidia-smi</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;安装依赖&quot;&gt;&lt;a href=&quot;#安装依赖&quot; class=&quot;headerlink&quot; title=&quot;安装依赖&quot;&gt;&lt;/a&gt;安装依赖&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;</summary>
      
    
    
    
    
    <category term="ubuntu" scheme="https://nmk0718.github.io/tag/ubuntu/"/>
    
    <category term="docker" scheme="https://nmk0718.github.io/tag/docker/"/>
    
  </entry>
  
  <entry>
    <title>coredns域名解析</title>
    <link href="https://nmk0718.github.io/2023/10/12/coredns%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90/"/>
    <id>https://nmk0718.github.io/2023/10/12/coredns%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90/</id>
    <published>2023-10-12T10:20:00.000Z</published>
    <updated>2024-11-29T06:42:53.041Z</updated>
    
    <content type="html"><![CDATA[<p>编辑coredns的配置文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl edit configmap coredns -n kube-system</span><br></pre></td></tr></table></figure><p>增加解析</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">hosts</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="string">nacos.com</span></span><br><span class="line">        <span class="string">fallthrough</span></span><br><span class="line">        <span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>以下为示例</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">coredns</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line">  <span class="attr">selfLink:</span> <span class="string">/api/v1/namespaces/kube-system/configmaps/coredns</span></span><br><span class="line">  <span class="attr">uid:</span> <span class="string">afe82210-48ab-4e74-a190-7d401a8af49a</span></span><br><span class="line">  <span class="attr">resourceVersion:</span> <span class="string">'240420099'</span></span><br><span class="line">  <span class="attr">creationTimestamp:</span> <span class="string">'2022-09-29T03:44:33Z'</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">forward_config:</span> <span class="string">''</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">Corefile:</span> <span class="string">|-</span></span><br><span class="line">    <span class="string">.:53</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="string">errors</span></span><br><span class="line">        <span class="string">health</span></span><br><span class="line">        <span class="string">ready</span></span><br><span class="line">        <span class="string">hosts</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="string">nacos.com</span></span><br><span class="line">        <span class="string">fallthrough</span></span><br><span class="line">        <span class="string">&#125;</span></span><br><span class="line">        <span class="string">kubernetes</span> <span class="string">cluster.local</span> <span class="string">in-addr.arpa</span> <span class="string">ip6.arpa</span> <span class="string">&#123;</span></span><br><span class="line">           <span class="string">pods</span> <span class="string">insecure</span></span><br><span class="line">           <span class="string">upstream</span></span><br><span class="line">           <span class="string">fallthrough</span> <span class="string">in-addr.arpa</span> <span class="string">ip6.arpa</span></span><br><span class="line">           <span class="string">ttl</span> <span class="number">30</span></span><br><span class="line">        <span class="string">&#125;</span>      </span><br><span class="line">       <span class="string">prometheus</span> <span class="string">:9153</span></span><br><span class="line">        <span class="string">log</span> <span class="string">.</span> <span class="string">&#123;</span></span><br><span class="line">            <span class="string">class</span> <span class="string">all</span></span><br><span class="line">        <span class="string">&#125;</span></span><br><span class="line">        <span class="string">cache</span> <span class="number">30</span></span><br><span class="line">        <span class="string">loop</span></span><br><span class="line">        <span class="string">reload</span></span><br><span class="line">        <span class="string">loadbalance</span></span><br><span class="line">        <span class="string">forward</span> <span class="string">.</span> <span class="string">/etc/resolv.conf</span></span><br><span class="line">    <span class="string">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;编辑coredns的配置文件&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;kubectl edit configmap coredns -n k</summary>
      
    
    
    
    
    <category term="k8s" scheme="https://nmk0718.github.io/tag/k8s/"/>
    
  </entry>
  
  <entry>
    <title>istio</title>
    <link href="https://nmk0718.github.io/2022/08/11/istio/"/>
    <id>https://nmk0718.github.io/2022/08/11/istio/</id>
    <published>2022-08-11T06:43:00.000Z</published>
    <updated>2024-11-29T06:44:33.324Z</updated>
    
    <content type="html"><![CDATA[<p>安装 Istio</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@master-01 ~]# istioctl install --set profile=demo -y</span><br><span class="line">✔ Istio core installed</span><br><span class="line">✔ Istiod installed</span><br><span class="line">✔ Egress gateways installed</span><br><span class="line">✔ Ingress gateways installed</span><br><span class="line">✔ Installation complete</span><br></pre></td></tr></table></figure><p>创建命名空间</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@master-01 ~]# kubectl create ns tnmk</span><br><span class="line">namespace/tnmk created</span><br></pre></td></tr></table></figure><p>Istio 默认<a href="https://istio.io/latest/zh/docs/setup/additional-setup/sidecar-injection/#automatic-sidecar-injection" target="_blank" rel="noopener">自动注入 Sidecar</a>. 为 tnmk 命名空间打上标签 <code>istio-injection=enabled</code>：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@master-01 ~]# kubectl label namespace tnmk istio-injection=enabled</span><br><span class="line">namespace/tnmk labeled</span><br></pre></td></tr></table></figure><p><a href="https://raw.githubusercontent.com/istio/istio/release-1.14/samples/bookinfo/platform/kube/bookinfo.yaml" target="_blank" rel="noopener">bookinfo.yaml</a></p><p>使用 <code>kubectl</code> 部署应用</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@master-01 ~]# kubectl apply -f bookinfo.yaml -n tnmk</span><br><span class="line">service/details created</span><br><span class="line">serviceaccount/bookinfo-details created</span><br><span class="line">deployment.apps/details-v1 created</span><br><span class="line">service/ratings created</span><br><span class="line">serviceaccount/bookinfo-ratings created</span><br><span class="line">deployment.apps/ratings-v1 created</span><br><span class="line">service/reviews created</span><br><span class="line">serviceaccount/bookinfo-reviews created</span><br><span class="line">deployment.apps/reviews-v1 created</span><br><span class="line">deployment.apps/reviews-v2 created</span><br><span class="line">deployment.apps/reviews-v3 created</span><br><span class="line">service/productpage created</span><br><span class="line">serviceaccount/bookinfo-productpage created</span><br><span class="line">deployment.apps/productpage-v1 created</span><br></pre></td></tr></table></figure><p>确认所有的服务和 Pod 都已经启动</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@master-01 ~]# kubectl get services -n tnmk</span><br><span class="line">NAME          TYPE        CLUSTER-IP        EXTERNAL-IP   PORT(S)    AGE</span><br><span class="line">details       ClusterIP   172.101.98.173    &lt;none&gt;        9080/TCP   112s</span><br><span class="line">productpage   ClusterIP   172.101.139.235   &lt;none&gt;        9080/TCP   112s</span><br><span class="line">ratings       ClusterIP   172.101.24.172    &lt;none&gt;        9080/TCP   112s</span><br><span class="line">reviews       ClusterIP   172.101.40.212    &lt;none&gt;        9080/TCP   112s</span><br><span class="line">[root@master-01 ~]# kubectl get pods -n tnmk</span><br><span class="line">NAME                              READY   STATUS    RESTARTS   AGE</span><br><span class="line">details-v1-7d88846999-hggx9       2/2     Running   0          3m23s</span><br><span class="line">productpage-v1-7795568889-tqjrv   2/2     Running   0          3m23s</span><br><span class="line">ratings-v1-754f9c4975-tqrqj       2/2     Running   0          3m23s</span><br><span class="line">reviews-v1-55b668fc65-nns2c       2/2     Running   0          3m23s</span><br><span class="line">reviews-v2-858f99c99-l8vv5        2/2     Running   0          3m23s</span><br><span class="line">reviews-v3-7886dd86b9-wpkkl       2/2     Running   0          3m23s</span><br></pre></td></tr></table></figure><p>要确认 Bookinfo 应用是否正在运行，请在某个 Pod 中用 <code>curl</code> 命令对应用发送请求，例如 <code>ratings</code>：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@master-01 ~]# kubectl exec -it -n tnmk $(kubectl get pod -l app=ratings -n tnmk -o jsonpath=&apos;&#123;.items[0].metadata.name&#125;&apos;) -c ratings -- curl productpage:9080/productpage | grep -o &quot;&lt;title&gt;.*&lt;/title&gt;&quot;</span><br><span class="line">&lt;title&gt;Simple Bookstore App&lt;/title&gt;</span><br></pre></td></tr></table></figure><p>为应用程序定义 Ingress 网关</p><p><a href="https://raw.githubusercontent.com/istio/istio/release-1.14/samples/bookinfo/networking/bookinfo-gateway.yaml" target="_blank" rel="noopener">bookinfo-gateway.yaml</a></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@master-01 ~]# kubectl apply -f bookinfo-gateway.yaml -n tnmk</span><br><span class="line">gateway.networking.istio.io/bookinfo-gateway created</span><br><span class="line">virtualservice.networking.istio.io/bookinfo created</span><br></pre></td></tr></table></figure><p>查看规则</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubectl get VirtualService -A</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;安装 Istio&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[root@master-01 ~]# istioctl install --s</summary>
      
    
    
    
    
    <category term="istio" scheme="https://nmk0718.github.io/tag/istio/"/>
    
  </entry>
  
  <entry>
    <title>verdaccio</title>
    <link href="https://nmk0718.github.io/2022/06/20/verdaccio/"/>
    <id>https://nmk0718.github.io/2022/06/20/verdaccio/</id>
    <published>2022-06-20T11:20:00.000Z</published>
    <updated>2025-02-10T04:00:59.682Z</updated>
    
    <content type="html"><![CDATA[<p>yum指定node版本</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl --silent --location https://rpm.nodesource.com/setup_12.x | sudo bash -</span><br></pre></td></tr></table></figure><p>安装node</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum -y install nodejs</span><br></pre></td></tr></table></figure><p>查看node版本</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure><p>全局安装verdaccio</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install verdaccio -g</span><br></pre></td></tr></table></figure><p>查看版本号</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">verdaccio  -v</span><br></pre></td></tr></table></figure><p>复制两个配置文件到/root/.config/下</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">config.yaml  htpasswd</span><br></pre></td></tr></table></figure><p>拷贝私服库的包到服务器的/data下 解压</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar zxvf /data/npm-storage.tar</span><br></pre></td></tr></table></figure><p>启动</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">verdaccio</span><br><span class="line"></span><br><span class="line"> info --- Creating default config file in /root/.config/verdaccio/config.yaml</span><br><span class="line"> warn --- config file  - /root/.config/verdaccio/config.yaml</span><br><span class="line">(node:1835) Warning: Verdaccio doesn't need superuser privileges. don't run it under root</span><br><span class="line">(node:1835) Warning: Verdaccio doesn't need superuser privileges. don't run it under root</span><br><span class="line"> warn --- "crypt" algorithm is deprecated consider switch to "bcrypt". Read more: https://github.com/verdaccio/monorepo/pull/580</span><br><span class="line"> info --- plugin successfully loaded: verdaccio-htpasswd</span><br><span class="line"> info --- plugin successfully loaded: verdaccio-audit</span><br><span class="line"> warn --- http address - http://localhost:4873/ - verdaccio/5.13.0</span><br></pre></td></tr></table></figure><p>访问页面</p><img src="https://nmk0718.github.io/image/image-20220620192826502.png"><p>注册成服务</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> vi /etc/systemd/system/verdaccio.service</span><br><span class="line"> </span><br><span class="line">[Unit]</span><br><span class="line">Description=Verdaccio lightweight npm proxy registry</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">Restart=on-failure</span><br><span class="line">#User=root</span><br><span class="line">ExecStart=/usr/bin/verdaccio --config /root/.config/verdaccio/config.yaml</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>重新加载,配置开机启动</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl enable verdaccio.service</span><br></pre></td></tr></table></figure><p>使用服务启动</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl start verdaccio.service</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;yum指定node版本&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;curl --silent --location https://rpm.</summary>
      
    
    
    
    
    <category term="verdaccio" scheme="https://nmk0718.github.io/tag/verdaccio/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes查看pod关联的pvc</title>
    <link href="https://nmk0718.github.io/2022/06/13/Kubernetes%E6%9F%A5%E7%9C%8Bpod%E5%85%B3%E8%81%94%E7%9A%84pvc/"/>
    <id>https://nmk0718.github.io/2022/06/13/Kubernetes%E6%9F%A5%E7%9C%8Bpod%E5%85%B3%E8%81%94%E7%9A%84pvc/</id>
    <published>2022-06-13T09:20:00.000Z</published>
    <updated>2025-01-05T15:55:13.020Z</updated>
    
    <content type="html"><![CDATA[<h3 id="kubernetes-查看哪些-pod-正在使用-pvc"><a href="#kubernetes-查看哪些-pod-正在使用-pvc" class="headerlink" title="kubernetes 查看哪些 pod 正在使用 pvc"></a>kubernetes 查看哪些 pod 正在使用 pvc</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@k8s ~]<span class="comment"># cat pvc-pod.sh</span></span><br><span class="line">kubectl get pods --all-namespaces -o=json | jq -c <span class="string">'.items[] | &#123;name: .metadata.name, namespace: .metadata.namespace, claimName:.spec.volumes[] | select( has ("persistentVolumeClaim") ).persistentVolumeClaim.claimName &#125;'</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@k8s ~]# sh pvc-pod.sh</span><br><span class="line">&#123;&quot;name&quot;:&quot;archery-mysql-master-0&quot;,&quot;namespace&quot;:&quot;archery&quot;,&quot;claimName&quot;:&quot;data-archery-mysql-master-0&quot;&#125;</span><br><span class="line">&#123;&quot;name&quot;:&quot;clash-d59b74867-rlj7j&quot;,&quot;namespace&quot;:&quot;default&quot;,&quot;claimName&quot;:&quot;ruleset-cache&quot;&#125;</span><br><span class="line">&#123;&quot;name&quot;:&quot;sonarqube-postgresql-postgresql-0&quot;,&quot;namespace&quot;:&quot;default&quot;,&quot;claimName&quot;:&quot;data-sonarqube-postgresql-postgresql-0&quot;&#125;</span><br><span class="line">&#123;&quot;name&quot;:&quot;sonarqube-sonarqube-7b548fdb4f-45ww8&quot;,&quot;namespace&quot;:&quot;default&quot;,&quot;claimName&quot;:&quot;sonarqube-sonarqube&quot;&#125;</span><br></pre></td></tr></table></figure><h3 id="查看k8s集群有哪些在使用的端口对应的服务"><a href="#查看k8s集群有哪些在使用的端口对应的服务" class="headerlink" title="查看k8s集群有哪些在使用的端口对应的服务"></a>查看k8s集群有哪些在使用的端口对应的服务</h3><p>导出所有svc到文本</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubectl get svc --all-namespaces &gt;svc.txt</span><br></pre></td></tr></table></figure><p>过滤nodeport显示</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grep NodePort svc.txt</span><br></pre></td></tr></table></figure><p>通过NodePort可知道映射的服务</p><h4 id="缩减所有空间的pod副本数为0"><a href="#缩减所有空间的pod副本数为0" class="headerlink" title="缩减所有空间的pod副本数为0"></a>缩减所有空间的pod副本数为0</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubectl get ns -o name | awk &apos;&#123;print $1&#125;&apos; |awk -F &apos;/&apos; &apos;&#123;print $2&#125;&apos; &gt;ns.txt</span><br></pre></td></tr></table></figure><h4 id="缩减所有空间的deployment副本数为0"><a href="#缩减所有空间的deployment副本数为0" class="headerlink" title="缩减所有空间的deployment副本数为0"></a>缩减所有空间的deployment副本数为0</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat start.sh</span><br><span class="line"></span><br><span class="line">while read line</span><br><span class="line"></span><br><span class="line">do</span><br><span class="line"></span><br><span class="line">echo $line</span><br><span class="line">kubectl scale --replicas=0 $(kubectl get deploy -o name -n $line) -n $line</span><br><span class="line"></span><br><span class="line">done &lt; ns.txt</span><br></pre></td></tr></table></figure><p>./start.sh</p><h3 id="缩减所有空间的statefulsets副本数为0"><a href="#缩减所有空间的statefulsets副本数为0" class="headerlink" title="缩减所有空间的statefulsets副本数为0"></a>缩减所有空间的statefulsets副本数为0</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat start.sh</span><br><span class="line"></span><br><span class="line">while read line</span><br><span class="line"></span><br><span class="line">do</span><br><span class="line"></span><br><span class="line">echo $line</span><br><span class="line">kubectl scale --replicas=0 $(kubectl get statefulsets -o name -n $line) -n $line</span><br><span class="line"></span><br><span class="line">done &lt; ns.txt</span><br></pre></td></tr></table></figure><p>./start.sh</p><p><a href="https://www.e-learn.cn/topic/3816776" target="_blank" rel="noopener">https://www.e-learn.cn/topic/3816776</a></p><p>使用<code>kubectl delete jobs --all</code>可以删除当前namespaces下所有的job</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;kubernetes-查看哪些-pod-正在使用-pvc&quot;&gt;&lt;a href=&quot;#kubernetes-查看哪些-pod-正在使用-pvc&quot; class=&quot;headerlink&quot; title=&quot;kubernetes 查看哪些 pod 正在使用 pvc&quot;&gt;&lt;/a&gt;ku</summary>
      
    
    
    
    
    <category term="k8s" scheme="https://nmk0718.github.io/tag/k8s/"/>
    
  </entry>
  
  <entry>
    <title>Flutter中使用SetState无效</title>
    <link href="https://nmk0718.github.io/2022/03/08/flutter%E6%9B%B4%E6%96%B0%E7%8A%B6%E6%80%81%E6%97%A0%E6%95%88/"/>
    <id>https://nmk0718.github.io/2022/03/08/flutter%E6%9B%B4%E6%96%B0%E7%8A%B6%E6%80%81%E6%97%A0%E6%95%88/</id>
    <published>2022-03-08T06:21:48.575Z</published>
    <updated>2022-03-08T06:21:48.575Z</updated>
    
    <content type="html"><![CDATA[<h3 id="在Flutter中使用SetState无效？可能是忽略了这个！"><a href="#在Flutter中使用SetState无效？可能是忽略了这个！" class="headerlink" title="在Flutter中使用SetState无效？可能是忽略了这个！"></a>在Flutter中使用SetState无效？可能是忽略了这个！</h3><p>问题：在某个组件中调用setState()方法更新该组件状态，结果是无法做到更新效果，组件仍然维持原状。<br>下面我们用代码示例还原问题场景：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class _MyHomePageState extends State&lt;MyHomePage&gt; &#123;</span><br><span class="line">  bool isChecked = false;</span><br><span class="line"></span><br><span class="line">  showTestDialog() &#123;</span><br><span class="line">    showDialog(</span><br><span class="line">      context: context,</span><br><span class="line">      builder: (BuildContext context) &#123;</span><br><span class="line">        return SimpleDialog(title: Text(&quot;测试对话框标题&quot;), children: &lt;Widget&gt;[</span><br><span class="line">          Row(children: &lt;Widget&gt;[</span><br><span class="line">            Checkbox(</span><br><span class="line">                value: this.isChecked,</span><br><span class="line">                onChanged: (bool val) &#123;</span><br><span class="line">                  setState(() &#123;</span><br><span class="line">                    this.isChecked = !this.isChecked;</span><br><span class="line">                  &#125;);</span><br><span class="line">                  debugPrint(this.isChecked.toString());</span><br><span class="line">                &#125;),</span><br><span class="line">            Text(&quot;测试复选框&quot;)</span><br><span class="line">          ])</span><br><span class="line">        ]);</span><br><span class="line">      &#125;,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: Text(widget.title),</span><br><span class="line">      ),</span><br><span class="line">      body: Center(</span><br><span class="line">          child: RaisedButton(</span><br><span class="line">        child: Text(&quot;点击出现弹窗&quot;),</span><br><span class="line">        onPressed: () &#123;</span><br><span class="line">          showTestDialog();</span><br><span class="line">        &#125;,</span><br><span class="line">      )),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了突出问题点，减少不必要的干扰，我简化了原有代码内容。通过阅读上述代码，我们得知整个Demo的界面有一个按钮构成，当按钮被点击时，showTestDialog()方法被执行。界面将显示一个小窗口，里面有一个复选框。<br>我们要实现的效果当然是用户点击复选框的时候，改变复选框的状态。因此，在复选框的onChanged()方法中改变了决定复选框状态的布尔值，并setState()。<br>然而真实的运行结果并非像预期那样产生效果。<br>究其原因，我们还需从setState()说起。<br>顾名思义，setState()要求其作用对象必须是一个有状态的组件。如果作用对象本身无状态，那么setState()将无法起作用。<br>因此，我们找到原因：SimpleDialog()中的子组件默认是无状态的。<br>接下来的解决办法就简单了，只需要在SimpleDialog组件外部“套”一个StatefulBuilder组件即可。参考下面的代码：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class _MyHomePageState extends State&lt;MyHomePage&gt; &#123;</span><br><span class="line">  bool isChecked = false;</span><br><span class="line"></span><br><span class="line">  showTestDialog() &#123;</span><br><span class="line">    showDialog(</span><br><span class="line">      context: context,</span><br><span class="line">      builder: (BuildContext context) &#123;</span><br><span class="line">        return StatefulBuilder(</span><br><span class="line">          builder:</span><br><span class="line">              (BuildContext context, void Function(void Function()) setState) &#123;</span><br><span class="line">            return SimpleDialog(title: Text(&quot;测试对话框标题&quot;), children: &lt;Widget&gt;[</span><br><span class="line">              Row(children: &lt;Widget&gt;[</span><br><span class="line">                Checkbox(</span><br><span class="line">                    value: this.isChecked,</span><br><span class="line">                    onChanged: (bool val) &#123;</span><br><span class="line">                      setState(() &#123;</span><br><span class="line">                        this.isChecked = !this.isChecked;</span><br><span class="line">                      &#125;);</span><br><span class="line">                      debugPrint(this.isChecked.toString());</span><br><span class="line">                    &#125;),</span><br><span class="line">                Text(&quot;测试复选框&quot;)</span><br><span class="line">              ])</span><br><span class="line">            ]);</span><br><span class="line">          &#125;,</span><br><span class="line">        );</span><br><span class="line">      &#125;,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: Text(widget.title),</span><br><span class="line">      ),</span><br><span class="line">      body: Center(</span><br><span class="line">          child: RaisedButton(</span><br><span class="line">        child: Text(&quot;点击出现弹窗&quot;),</span><br><span class="line">        onPressed: () &#123;</span><br><span class="line">          showTestDialog();</span><br><span class="line">        &#125;,</span><br><span class="line">      )),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再次运行，对话框中的复选框可以正常响应。至此，问题解决。</p><p>参考链接：<a href="https://juejin.cn/post/6844904195531735048" target="_blank" rel="noopener">https://juejin.cn/post/6844904195531735048</a>  </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;在Flutter中使用SetState无效？可能是忽略了这个！&quot;&gt;&lt;a href=&quot;#在Flutter中使用SetState无效？可能是忽略了这个！&quot; class=&quot;headerlink&quot; title=&quot;在Flutter中使用SetState无效？可能是忽略了这个</summary>
      
    
    
    
    
    <category term="flutter" scheme="https://nmk0718.github.io/tag/flutter/"/>
    
  </entry>
  
  <entry>
    <title>Flutter自定义Tabbar的长度</title>
    <link href="https://nmk0718.github.io/2022/03/08/flutter%E8%87%AA%E5%AE%9A%E4%B9%89Tabbar%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>https://nmk0718.github.io/2022/03/08/flutter%E8%87%AA%E5%AE%9A%E4%B9%89Tabbar%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2022-03-08T06:21:20.805Z</published>
    <updated>2024-09-20T02:23:09.885Z</updated>
    
    <content type="html"><![CDATA[<p>效果:用户可自定义Tabbar的长度和排序,通过滑动或点击Tabbar进行请求接口渲染不同的页面</p><p>问题:让用户自定义Tabbar的长度,当用户删除Tabbar的一项时出现报错</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Controller&apos;s length property (5) does not match the number of tabs (4) prese</span><br></pre></td></tr></table></figure><p>代码为:</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">TabController tabController;  </span><br><span class="line">  </span><br><span class="line"><span class="meta">@override</span>  </span><br><span class="line"><span class="keyword">void</span> initState() &#123;  </span><br><span class="line">  <span class="comment">// <span class="doctag">TODO:</span> implement initState  </span></span><br><span class="line">  <span class="keyword">super</span>.initState(); </span><br><span class="line"> tabController = TabController(  </span><br><span class="line">      length: websiteList.length, vsync: <span class="keyword">this</span>);  </span><br><span class="line">  tabController..addListener(() &#123;  </span><br><span class="line">    <span class="keyword">if</span>(tabController.indexIsChanging)&#123;  </span><br><span class="line">      <span class="built_in">print</span>(tabController.index.toString());  </span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;);  </span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@override</span>  </span><br><span class="line">Widget build(BuildContext context) &#123;  </span><br><span class="line">  <span class="keyword">return</span> Scaffold(  </span><br><span class="line">      appBar: AppBar(  </span><br><span class="line">        bottom: TabBar(  </span><br><span class="line">              indicatorColor: Color(<span class="number">0xFFFE1483</span>),  </span><br><span class="line">              labelColor: Color(<span class="number">0xFFFE1483</span>),  </span><br><span class="line">              controller: tabController,  </span><br><span class="line">              unselectedLabelColor: Colors.black54,  </span><br><span class="line">              isScrollable: <span class="keyword">true</span>,  </span><br><span class="line">              indicatorSize: TabBarIndicatorSize.label,  </span><br><span class="line">              tabs: TabList()),  </span><br><span class="line">        ),</span><br><span class="line">      body: TabBarView(  </span><br><span class="line">        controller: tabController,  </span><br><span class="line">        children: CardList(),  </span><br><span class="line">      ),);</span><br></pre></td></tr></table></figure><p>initState(){}只初始化一次,当用户删除websiteList中的值时,websiteList.length发生变化,用户再次进入该界面就会出现报错<br>解决:</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="meta">@override</span>  </span><br><span class="line"><span class="keyword">void</span> initState() &#123;  </span><br><span class="line">  <span class="comment">// <span class="doctag">TODO:</span> implement initState  </span></span><br><span class="line">  <span class="keyword">super</span>.initState();  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@override</span>  </span><br><span class="line">Widget build(BuildContext context) &#123;  </span><br><span class="line">  <span class="keyword">return</span> DefaultTabController(  </span><br><span class="line">    length: websiteList.length,  </span><br><span class="line">    child: Builder(  </span><br><span class="line">      builder: (BuildContext context)&#123;  </span><br><span class="line">        <span class="keyword">final</span> TabController tabController = DefaultTabController.of(context);  </span><br><span class="line">        tabController.addListener(() &#123;   </span><br><span class="line"> <span class="keyword">if</span> (tabController.index.toDouble() ==  </span><br><span class="line">                tabController.animation.value) &#123;  </span><br><span class="line">              <span class="built_in">print</span>(tabController.index.toString());  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;);  </span><br><span class="line">        <span class="keyword">return</span> Scaffold(  </span><br><span class="line">          appBar: AppBar(  </span><br><span class="line">            elevation: <span class="number">2</span>,  </span><br><span class="line">            bottom: TabBar(  </span><br><span class="line">                  indicatorColor: Color(<span class="number">0xFFFE1483</span>),  </span><br><span class="line">                  labelColor: Color(<span class="number">0xFFFE1483</span>),  </span><br><span class="line">                  unselectedLabelColor: Colors.black54,  </span><br><span class="line">                  isScrollable: <span class="keyword">true</span>,  </span><br><span class="line">                  indicatorSize: TabBarIndicatorSize.label,  </span><br><span class="line">                  tabs: TabList()),  </span><br><span class="line">            ),  </span><br><span class="line">          body: TabBarView(  </span><br><span class="line">            children: CardList(),  </span><br><span class="line">          ),  </span><br><span class="line">        );  </span><br><span class="line">      &#125;,  </span><br><span class="line">    )  </span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>通过DefaultTabController解决因websiteList发生变化出现的问题,通过Builder()进行监听用户是否点击和滑动tabbar,即可解决问题</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;效果:用户可自定义Tabbar的长度和排序,通过滑动或点击Tabbar进行请求接口渲染不同的页面&lt;/p&gt;
&lt;p&gt;问题:让用户自定义Tabbar的长度,当用户删除Tabbar的一项时出现报错&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table</summary>
      
    
    
    
    
    <category term="flutter" scheme="https://nmk0718.github.io/tag/flutter/"/>
    
  </entry>
  
  <entry>
    <title>adb卸载系统自带软件</title>
    <link href="https://nmk0718.github.io/2022/01/18/ADB%E5%8D%B8%E8%BD%BD%E7%B3%BB%E7%BB%9F%E8%87%AA%E5%B8%A6%E8%BD%AF%E4%BB%B6/"/>
    <id>https://nmk0718.github.io/2022/01/18/ADB%E5%8D%B8%E8%BD%BD%E7%B3%BB%E7%BB%9F%E8%87%AA%E5%B8%A6%E8%BD%AF%E4%BB%B6/</id>
    <published>2022-01-18T09:42:00.000Z</published>
    <updated>2025-02-10T04:00:59.681Z</updated>
    
    <content type="html"><![CDATA[<p>ADB</p><p>手机端通过多次点击版本号开启开发者选项,勾选USB调试</p><img src="https://nmk0718.github.io/image/Screenshot_20210910-175528.png" style="zoom:50%;"><p>使用手机数据线连接电脑,此时手机会提示是否允许USB调试,允许即可</p><p>电脑端下载platform-tools</p><p><a href="https://developer.android.google.cn/studio/releases/platform-tools" target="_blank" rel="noopener">https://developer.android.google.cn/studio/releases/platform-tools</a></p><img src="https://nmk0718.github.io/image/image-20210910175440529.png" style="zoom:50%;"><p>解压下载的压缩包,进入platform-tools目录,在地址栏输入adb,确认</p><img src="https://nmk0718.github.io/image/image-20210910175755437.png" style="zoom:50%;"><p>查看当前连接设备：</p><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">adb devices</span><br></pre></td></tr></table></figure><p>如果发现多个设备：</p><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">adb devices -s 设备名</span><br></pre></td></tr></table></figure><p>卸载软件</p><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">adb shell</span><br><span class="line"></span><br><span class="line">pm uninstall</span><br><span class="line">pm uninstall -k --user <span class="number">0</span> 软件包名</span><br></pre></td></tr></table></figure><p>去除wifi感叹号</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">删除变量：（删除以后默认启用）</span><br><span class="line">adb shell settings delete global captive_portal_mode</span><br><span class="line">关闭检测：</span><br><span class="line">adb shell settings put global captive_portal_mode 0</span><br><span class="line">查看当前状态：</span><br><span class="line">adb shell settings get global captive_portal_mode</span><br><span class="line">服务器地址相关（同7.1.1）：</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">删除（删除默认用HTTPS）</span><br><span class="line">adb shell settings delete global captive_portal_https_url</span><br><span class="line">adb shell settings delete global captive_portal_http_url</span><br><span class="line">分别修改两个地址</span><br><span class="line">adb shell settings put global captive_portal_http_url http://captive.v2ex.co/generate_204</span><br><span class="line">adb shell settings put global captive_portal_https_url https://captive.v2ex.co/generate_204</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;ADB&lt;/p&gt;
&lt;p&gt;手机端通过多次点击版本号开启开发者选项,勾选USB调试&lt;/p&gt;
&lt;img src=&quot;https://nmk0718.github.io/image/Screenshot_20210910-175528.png&quot; style=&quot;zoom:50%;&quot;&gt;

</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>goproxy</title>
    <link href="https://nmk0718.github.io/2022/01/10/goproxy/"/>
    <id>https://nmk0718.github.io/2022/01/10/goproxy/</id>
    <published>2022-01-10T08:56:35.000Z</published>
    <updated>2024-09-29T07:06:41.525Z</updated>
    
    <content type="html"><![CDATA[<h3 id="goproxy"><a href="#goproxy" class="headerlink" title="goproxy"></a>goproxy</h3><p>GoProxy是一款轻量级、功能强大、高性能的http代理、https代理、socks5代理、内网穿透代理服务器、ss代理、游戏盾、游戏代理，支持API代理认证。websocke代理、tcp代理、udp代理、socket代理、高防服务器。支持正向代理、反向代理、透明代理、TCP内网穿透、UDP内网穿透、HTTP内网穿透、HTTPS内网穿透、https代理负载均衡、http代理负载均衡、socks5代理负载均衡、socket代理负载均衡、ss代理负载均衡、TCP/UDP端口映射、SSH中转、TLS加密传输、协议转换、防污染DNS代理，限速，限连接数。</p><ul><li><a href="https://github.com/snail007/goproxy/releases" target="_blank" rel="noopener">下载地址</a><h4 id="windows开启代理"><a href="#windows开启代理" class="headerlink" title="windows开启代理"></a>windows开启代理</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\Users\admin&gt;cd Desktop\proxy-windows-amd64</span><br><span class="line"></span><br><span class="line">C:\Users\admin\Desktop\proxy-windows-amd64&gt;proxy.exe http -t tcp -p &quot;:7002&quot;</span><br><span class="line"></span><br><span class="line">proxy free version 8.6  by snail , email : arraykeys@gmail.com</span><br><span class="line">2022/01/12 10:12:13 tcp http(s) proxy on [::]:7002</span><br></pre></td></tr></table></figure></li></ul><h4 id="linux服务器配置全局代理"><a href="#linux服务器配置全局代理" class="headerlink" title="linux服务器配置全局代理"></a>linux服务器配置全局代理</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos ~]# vi /etc/profile</span><br><span class="line"><span class="meta">#</span><span class="bash"> 在最后面加入以下配置</span></span><br><span class="line"></span><br><span class="line">http_proxy=192.168.10.117:7002 </span><br><span class="line">https_proxy=192.168.10.117:7002</span><br><span class="line">ftp_proxy=192.168.10.117:7002</span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定代理所在的ip和port</span></span><br><span class="line">export http_proxy https_proxy ftp_proxy no_proxy</span><br><span class="line"><span class="meta">#</span><span class="bash"> 分别指定http、https、ftp协议使用的代理服务器地址</span></span><br><span class="line"></span><br><span class="line">no_proxy=*.abc.com,192.168.20.*,192.168.50.*,*.local,localhost,127.0.0.1  # 访问局域网地址（ip/网段）时不使用代理，可以用逗号分隔多个&gt;地址</span><br><span class="line"></span><br><span class="line">[root@centos ~]# source /etc/profile</span><br></pre></td></tr></table></figure><p>测试是否走代理</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos ~]# curl https://myip.ipip.net/</span><br><span class="line">当前 IP：119.130.113.243  来自于：中国 广东 广州  电信</span><br></pre></td></tr></table></figure><p>查看是否使用代理</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\Users\admin\Desktop\proxy-windows-amd64&gt;proxy.exe http -t tcp -p &quot;:7002&quot;</span><br><span class="line"></span><br><span class="line">proxy free version 8.6  by snail , email : arraykeys@gmail.com</span><br><span class="line">2022/01/12 10:12:13 tcp http(s) proxy on [::]:7002</span><br><span class="line">2022/01/12 10:46:48 CONNECT:myip.ipip.net:443</span><br><span class="line">2022/01/12 10:46:48 use parent : false, myip.ipip.net:443</span><br><span class="line">2022/01/12 10:46:48 conn 192.168.50.54:45768 - 116.211.155.164:443 connected [myip.ipip.net:443]</span><br><span class="line">2022/01/12 10:46:48 conn 192.168.50.54:45768 - 116.211.155.164:443 released [myip.ipip.net:443]</span><br></pre></td></tr></table></figure><h4 id="JAVA配置代理"><a href="#JAVA配置代理" class="headerlink" title="JAVA配置代理"></a>JAVA配置代理</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># JVM中加入以下配置</span></span><br><span class="line"></span><br><span class="line">-Dhttp.proxyHost=192.168.10.117 -Dhttp.proxyPort=7002 -Dhttps.proxyHost=192.168.10.117 -Dhttps.proxyPort=7002 -Dhttp.nonProxyHosts=<span class="string">'localhost|127.0.0.1|192.168.20.*|192.168.50.*'</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;goproxy&quot;&gt;&lt;a href=&quot;#goproxy&quot; class=&quot;headerlink&quot; title=&quot;goproxy&quot;&gt;&lt;/a&gt;goproxy&lt;/h3&gt;&lt;p&gt;GoProxy是一款轻量级、功能强大、高性能的http代理、https代理、socks5代理、内网穿</summary>
      
    
    
    
    
    <category term="proxy" scheme="https://nmk0718.github.io/tag/proxy/"/>
    
  </entry>
  
  <entry>
    <title>生产告警</title>
    <link href="https://nmk0718.github.io/2021/11/02/%E7%94%9F%E4%BA%A7%E5%91%8A%E8%AD%A6/"/>
    <id>https://nmk0718.github.io/2021/11/02/%E7%94%9F%E4%BA%A7%E5%91%8A%E8%AD%A6/</id>
    <published>2021-11-02T10:10:00.000Z</published>
    <updated>2025-02-10T04:00:59.747Z</updated>
    
    <content type="html"><![CDATA[<p>新增报警联系人</p><img src="https://nmk0718.github.io/image/image-20211102142732840.png"><p>配置报警联系人</p><img src="https://nmk0718.github.io/image/image-20211102142749711.png"><p>获取Webhook地址:</p><p>钉钉群聊&gt;群设置&gt;智能群助手&gt;添加自定义机器人</p><img src="https://nmk0718.github.io/image/image-20211102143103962.png"><p>把Webhook复制下来,粘贴到报警联系人处,配置钉钉机器人接受的消息,包含有自定义的关键词该钉钉机器人才能告警</p><img src="https://nmk0718.github.io/image/image-20211102143149384.png"><p>添加新建的报警联系人到报警联系组里</p><img src="https://nmk0718.github.io/image/image-20211102143358722.png"><p>开启已使用服务的一键告警</p><img src="https://nmk0718.github.io/image/image-20211102143552738.png"><p>添加告警规则</p><img src="https://nmk0718.github.io/image/image-20211102144026183.png"><p>创建站点监控</p><img src="https://nmk0718.github.io/image/image-20211102144614290.png"><p>添加监控地址</p><img src="https://nmk0718.github.io/image/image-20211102144708411.png"><p>选择默认探测点</p><img src="https://nmk0718.github.io/image/image-20211102144729537.png"><p>添加状态码监控</p><img src="https://nmk0718.github.io/image/image-20211102144849168.png"><p>选择通知联系人</p><img src="https://nmk0718.github.io/image/image-20211102144907626.png"><p>添加事件报警规则</p><img src="https://nmk0718.github.io/image/image-20211102145059404.png"><p>因节约开支,暂时使用的免费版,这里不介绍日志监控</p><p>添加容器监控</p><img src="https://nmk0718.github.io/image/image-20211102145557851.png"><p>创建报警规则</p><img src="https://nmk0718.github.io/image/image-20211102145848290.png"><p>kubernetes集群报警</p><img src="https://nmk0718.github.io/image/image-20211102150127881.png"><p>开启事件告警</p><img src="https://nmk0718.github.io/image/image-20211102150323136.png"><p>点击编辑,更改告警策略,新增行动策略</p><img src="https://nmk0718.github.io/image/image-20211102164419525.png"><p>配置钉钉和短信告警的通知内容和通知人员,可自定义内容模板配置通知的消息样式</p><img src="https://nmk0718.github.io/image/image-20211102164508877.png"><p>钉钉的Webhook需要进行新建在告警管理&gt;Webhook继承中新增配置</p><img src="https://nmk0718.github.io/image/image-20211102164717899.png"><p>查询服务报错的日志通过日志监控进行告警</p><img src="https://nmk0718.github.io/image/image-20211102171254181.png"><p>配置每15分钟监控日志,如果日志中有该数据会进行告警</p><img src="https://nmk0718.github.io/image/image-20211102171409665.png"><p>可在告警看到创建的告警,该告警的执行状态,是否触发通知</p><img src="https://nmk0718.github.io/image/image-20211102171609247.png">]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;新增报警联系人&lt;/p&gt;
&lt;img src=&quot;https://nmk0718.github.io/image/image-20211102142732840.png&quot;&gt;

&lt;p&gt;配置报警联系人&lt;/p&gt;
&lt;img src=&quot;https://nmk0718.github.io/i</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>sql审核</title>
    <link href="https://nmk0718.github.io/2021/10/19/sql%E5%AE%A1%E6%A0%B8/"/>
    <id>https://nmk0718.github.io/2021/10/19/sql%E5%AE%A1%E6%A0%B8/</id>
    <published>2021-10-19T07:58:00.000Z</published>
    <updated>2025-02-10T04:00:59.747Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SQL审核"><a href="#SQL审核" class="headerlink" title="SQL审核"></a>SQL审核</h2><p>Archey更全面,支持多种类数据库,但是使用过程中建表语句未能通过提交SQL审核,略有不足</p><p>Yearning只支持mysql数据库 功能相对比较全面,但不支持其它数据库.</p><h3 id="Archery"><a href="#Archery" class="headerlink" title="Archery"></a>Archery</h3><p>Archery是<a href="https://github.com/jly8866/archer" target="_blank" rel="noopener">archer</a>的分支项目，定位于SQL审核查询平台，旨在提升DBA的工作效率，支持多数据库的SQL上线和查询，同时支持丰富的MySQL运维功能，所有功能都兼容手机端操作</p><p>相关文档可查看<a href="https://archerydms.com/" target="_blank" rel="noopener">https://archerydms.com/</a></p><h4 id="功能清单"><a href="#功能清单" class="headerlink" title="功能清单"></a>功能清单</h4><table><thead><tr><th></th><th>查询</th><th>审核</th><th>执行</th><th>备份</th><th>数据字典</th><th>慢日志</th><th>会话管理</th><th>账号管理</th><th>参数管理</th><th>数据归档</th></tr></thead><tbody><tr><td>MySQL</td><td>√</td><td>√</td><td>√</td><td>√</td><td>√</td><td>√</td><td>√</td><td>√</td><td>√</td><td>√</td></tr><tr><td>MsSQL</td><td>√</td><td>×</td><td>√</td><td>×</td><td>×</td><td>×</td><td>×</td><td>×</td><td>×</td><td>×</td></tr><tr><td>Redis</td><td>√</td><td>×</td><td>√</td><td>×</td><td>×</td><td>×</td><td>×</td><td>×</td><td>×</td><td>×</td></tr><tr><td>PgSQL</td><td>√</td><td>×</td><td>√</td><td>×</td><td>×</td><td>×</td><td>×</td><td>×</td><td>×</td><td>×</td></tr><tr><td>Oracle</td><td>√</td><td>×</td><td>√</td><td>✔️</td><td>×</td><td>×</td><td>×</td><td>×</td><td>×</td><td>×</td></tr><tr><td>MongoDB</td><td>√</td><td>√</td><td>√</td><td>×</td><td>×</td><td>×</td><td>×</td><td>×</td><td>×</td><td>×</td></tr></tbody></table><p>下载文件</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https://github.com/hhyo/archery/releases/</span><br></pre></td></tr></table></figure><p>解压Archery-1.8.1.zip,进入src/docker-compose</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#启动</span><br><span class="line">docker-compose -f docker-compose.yml up -d</span><br><span class="line"></span><br><span class="line">#表结构初始化</span><br><span class="line">docker exec -ti archery /bin/bash</span><br><span class="line">cd /opt/archery</span><br><span class="line">source /opt/venv4archery/bin/activate</span><br><span class="line">python3 manage.py makemigrations sql  </span><br><span class="line">python3 manage.py migrate</span><br><span class="line"></span><br><span class="line">#数据初始化</span><br><span class="line">python3 manage.py dbshell&lt;sql/fixtures/auth_group.sql</span><br><span class="line">python3 manage.py dbshell&lt;src/init_sql/mysql_slow_query_review.sql</span><br><span class="line"></span><br><span class="line">#创建管理用户</span><br><span class="line">python3 manage.py createsuperuser</span><br><span class="line"></span><br><span class="line">#重启服务</span><br><span class="line">docker restart archery</span><br><span class="line"></span><br><span class="line">#日志查看和问题排查</span><br><span class="line">docker logs archery -f --tail=10</span><br><span class="line">logs/archery.log</span><br></pre></td></tr></table></figure><h4 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:9123/</span><br></pre></td></tr></table></figure><h4 id="管理后台"><a href="#管理后台" class="headerlink" title="管理后台"></a>管理后台</h4><img src="https://nmk0718.github.io/image/image-20211018170733013.png"><h5 id="SQL工单"><a href="#SQL工单" class="headerlink" title="SQL工单"></a>SQL工单</h5><img src="https://nmk0718.github.io/image/image-20211019152901342.png"><h5 id="实例标签"><a href="#实例标签" class="headerlink" title="实例标签"></a>实例标签</h5><img src="https://nmk0718.github.io/image/image-20211019152940335.png"><h5 id="资源组"><a href="#资源组" class="headerlink" title="资源组"></a>资源组</h5><p>配置钉钉webhook地址</p><img src="https://nmk0718.github.io/image/image-20211019153118639.png"><h5 id="组"><a href="#组" class="headerlink" title="组"></a>组</h5><p>DBA持有所有权限,研发持有各菜单权限+提交查看工单等权限,不给予删除等权限</p><img src="https://nmk0718.github.io/image/image-20211019153734553.png"><h5 id="添加实例数据库"><a href="#添加实例数据库" class="headerlink" title="添加实例数据库"></a>添加实例数据库</h5><p>配置用对应数据库类型和账号密码</p><img src="https://nmk0718.github.io/image/image-20211019153002684.png"><p>绑定对应的资源组和实例标签</p><img src="https://nmk0718.github.io/image/image-20211019153227623.png"><h5 id="工作流审批列表"><a href="#工作流审批列表" class="headerlink" title="工作流审批列表"></a>工作流审批列表</h5><img src="https://nmk0718.github.io/image/image-20211019153303927.png"><h5 id="工作流日志"><a href="#工作流日志" class="headerlink" title="工作流日志"></a>工作流日志</h5><img src="https://nmk0718.github.io/image/image-20211019153351803.png"><h5 id="SQL查询日志"><a href="#SQL查询日志" class="headerlink" title="SQL查询日志"></a>SQL查询日志</h5><img src="https://nmk0718.github.io/image/image-20211019153423219.png"><h5 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h5><img src="https://nmk0718.github.io/image/image-20211019153447362.png"><p>配置用户权限</p><img src="https://nmk0718.github.io/image/image-20211019153526237.png"><h4 id="SQL上线"><a href="#SQL上线" class="headerlink" title="SQL上线"></a>SQL上线</h4><p>提交要上线的脚本</p><img src="https://nmk0718.github.io/image/image-20211018171429300.png"><p>支持10M内SQL文件导入,上线单名称(必填),选择对应的资源组,对应的数据库,对应的表,sql提交前需要进行一次SQL检测,检测通过后才能进行SQL提交</p><img src="https://nmk0718.github.io/image/image-20211018171816343.png"><p>SQL检测不通过的情况,数据库中没有id为3的数据,直接进行更新name会进行报错,并提示</p><img src="https://nmk0718.github.io/image/image-20211018172052899.png"><p>审核状态:error,warning,pass,当审核状态处于error时执行会有错误,当审核状态为warning时,适当时情况而定是否继续提交,审核状态为pass时,通过sql检测 </p><p>提交后可看到工单状态,审核流程有谁审批,工单的审批日志和提交的完整SQL内容,也可改为定时执行和终止流程</p><img src="https://nmk0718.github.io/image/image-20211018173051844.png"><p>工单执行完成后可看到工单状态是否执行完毕,影响行数,执行耗时,自动生成的回滚SQL</p><img src="https://nmk0718.github.io/image/image-20211018173826642.png"><p>查看回滚SQL,也可直接提交回滚请求</p><img src="https://nmk0718.github.io/image/image-20211018173955618.png"><p>提交人可直接在SQL上线中查看操作日志</p><img src="https://nmk0718.github.io/image/image-20211018174134029.png"><p>可根据工单状态,数据库实例,资源组进行过滤提交的工单,也可进行导出当前页面中的表格数据</p><img src="https://nmk0718.github.io/image/image-20211018174418244.png"><h4 id="SQL查询"><a href="#SQL查询" class="headerlink" title="SQL查询"></a>SQL查询</h4><h5 id="在线查询"><a href="#在线查询" class="headerlink" title="在线查询"></a>在线查询</h5><p>查询历史,表结构,执行结果,返回行数,导出数据</p><img src="https://nmk0718.github.io/image/image-20211018174825785.png"><h5 id="数据字典"><a href="#数据字典" class="headerlink" title="数据字典"></a>数据字典</h5><p>可查看导出数据库实例对应的数据字典(该功能仅支持mysql)</p><img src="https://nmk0718.github.io/image/image-20211018175148172.png"><h5 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h5><p>开发可申请该账号看不到的表或库权限</p><img src="https://nmk0718.github.io/image/image-20211018180204780.png"><h4 id="SQL优化"><a href="#SQL优化" class="headerlink" title="SQL优化"></a>SQL优化</h4><h5 id="SQL优化建议"><a href="#SQL优化建议" class="headerlink" title="SQL优化建议"></a>SQL优化建议</h5><p>可通过三种工具进行SQL语句分析进行提供优化建议(该功能仅支持mysql)</p><img src="https://nmk0718.github.io/image/image-20211019144055657.png"><h5 id="慢日志查询"><a href="#慢日志查询" class="headerlink" title="慢日志查询"></a>慢日志查询</h5><img src="https://nmk0718.github.io/image/image-20211019144304751.png"><h4 id="实例管理"><a href="#实例管理" class="headerlink" title="实例管理"></a>实例管理</h4><h5 id="实例列表"><a href="#实例列表" class="headerlink" title="实例列表"></a>实例列表</h5><p><strong>测试:</strong>可进行对数据库进行测试连接</p><p><strong>Binlog清理:</strong>可以对Mysql进行binlog清理</p><img src="https://nmk0718.github.io/image/image-20211019144620159.png"><p>点击蓝色实例名称,可进行编辑</p><img src="https://nmk0718.github.io/image/image-20211019150124460.png"><h5 id="回话管理"><a href="#回话管理" class="headerlink" title="回话管理"></a>回话管理</h5><p>可查看和终止连接的进程状态,TOP表空间和事务信息,锁信息</p><img src="https://nmk0718.github.io/image/image-20211019150223553.png"><h5 id="账号管理"><a href="#账号管理" class="headerlink" title="账号管理"></a>账号管理</h5><p>创建,编辑,授权,改密,删除账号(该功能仅支持mysql)</p><img src="https://nmk0718.github.io/image/image-20211019150437462.png"><h4 id="系统管理"><a href="#系统管理" class="headerlink" title="系统管理"></a>系统管理</h4><h5 id="配置项管理"><a href="#配置项管理" class="headerlink" title="配置项管理"></a>配置项管理</h5><img src="https://nmk0718.github.io/image/image-20211019150748831.png"><p>配置SQLAdvisor和钉钉机器人通知</p><img src="https://nmk0718.github.io/image/image-20211019151158633.png"><p>配置工单审批流配置</p><img src="https://nmk0718.github.io/image/image-20211019151532376.png"><h5 id="资源组管理"><a href="#资源组管理" class="headerlink" title="资源组管理"></a>资源组管理</h5><p>配置对应环境的资源组,关联用户和实例数据库与资源组绑定</p><img src="https://nmk0718.github.io/image/image-20211019151611510.png"><h3 id="Yearning"><a href="#Yearning" class="headerlink" title="Yearning"></a>Yearning</h3><p>官方文档:<a href="https://guide.yearning.io/install.html" target="_blank" rel="noopener">https://guide.yearning.io/install.html</a></p><p>首先安装myql5.7,可参考mysql文档进行安装</p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>创建Yearning数据库并指定字符集</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create database Yearning default character set utf8mb4;</span><br></pre></td></tr></table></figure><p>下载地址:<a href="https://github.com/cookieY/Yearning/releases/" target="_blank" rel="noopener">https://github.com/cookieY/Yearning/releases/</a></p><p>下载</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget https://github.com/cookieY/Yearning/releases/download/v2.2.0/Yearning-2.2.0.linux-amd64.zip</span><br></pre></td></tr></table></figure><p>解压</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar zxvf Yearning-2.2.0.linux-amd64.zip</span><br></pre></td></tr></table></figure><p>修改配置文件</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi conf.toml</span><br><span class="line">[Mysql]</span><br><span class="line">Db = &quot;Yearning&quot;</span><br><span class="line">Host = &quot;127.0.0.1&quot;</span><br><span class="line">Port = &quot;3306&quot;</span><br><span class="line">Password = &quot;xxxx&quot;</span><br><span class="line">User = &quot;root&quot;</span><br><span class="line"></span><br><span class="line">[General]   #数据库加解密key，只可更改一次。</span><br><span class="line">SecretKey = &quot;dbcjqheupqjsuwsm&quot;</span><br></pre></td></tr></table></figure><p>初始化数据结构</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">./Yearning -m</span><br></pre></td></tr></table></figure><p>默认启动</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">./Yearning -s</span><br></pre></td></tr></table></figure><p>参数启动</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">./Yearning -s -b &quot;172.27.80.35&quot; -p &quot;8000&quot;</span><br></pre></td></tr></table></figure><p>打开浏览器 <a href="http://127.0.0.1:8000" target="_blank" rel="noopener">http://127.0.0.1:8000</a></p><p>默认密码：admin/Yearning_admin</p><p>Yearning 执行成功后显示回滚语句 需要mysql开启binlog,请查看mysql文档开启binlog</p><h4 id="Yearning管理"><a href="#Yearning管理" class="headerlink" title="Yearning管理"></a>Yearning管理</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">用户有三个权限:guest,admin,perform.</span><br><span class="line">使用者:普通权限,可提交工单进行查询和修改,没有修改权限</span><br><span class="line">管理员:审核人,可提交工单进行查询和修改,有审批权限但无修改权限</span><br><span class="line">执行人:可提交工单进行查询和修改,有审批权限有修改权限</span><br><span class="line">一般设置开发为使用者,组长为管理员,执行人为DBA或运维</span><br><span class="line">数据库按规范填写即可</span><br><span class="line"></span><br><span class="line">权限组</span><br><span class="line">开发组权限组,允许DDL,DML,数据查询,上级审核人选择开发组长(对应管理员权限),关闭用户管理权限和数据库管理权限</span><br><span class="line">开发组长权限组,允许DDL,DML,数据查询,上级审核人选择DBA或运维(对应执行人权限),关闭用户管理权限和数据库管理权限</span><br><span class="line">执行人权限组,允许DDL,DML,数据查询,上级审核人选择admin(对应超级管理员权限),允许用户管理权限和数据库管理权限</span><br><span class="line"></span><br><span class="line">用户权限,配置用户归属所在权限组即可</span><br><span class="line"></span><br><span class="line">设置</span><br><span class="line">Yearning支持webhook和邮件推送消息</span><br><span class="line">可配置钉钉机器人的api或邮箱</span><br><span class="line"></span><br><span class="line">进阶设置</span><br><span class="line">自定义环境可更改默认的环境名,用来区分prod和dev</span><br><span class="line">开启多级审核,开启注册 保存</span><br><span class="line"></span><br><span class="line">审核规则</span><br><span class="line">可定义sql语句的规范 按照实际情况而定</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;SQL审核&quot;&gt;&lt;a href=&quot;#SQL审核&quot; class=&quot;headerlink&quot; title=&quot;SQL审核&quot;&gt;&lt;/a&gt;SQL审核&lt;/h2&gt;&lt;p&gt;Archey更全面,支持多种类数据库,但是使用过程中建表语句未能通过提交SQL审核,略有不足&lt;/p&gt;
&lt;p&gt;Year</summary>
      
    
    
    
    
    <category term="mysql" scheme="https://nmk0718.github.io/tag/mysql/"/>
    
  </entry>
  
  <entry>
    <title>测试项目优化</title>
    <link href="https://nmk0718.github.io/2021/09/08/%E6%B5%8B%E8%AF%95JVM%E8%B0%83%E4%BC%98/"/>
    <id>https://nmk0718.github.io/2021/09/08/%E6%B5%8B%E8%AF%95JVM%E8%B0%83%E4%BC%98/</id>
    <published>2021-09-08T09:42:00.000Z</published>
    <updated>2025-02-10T04:00:59.770Z</updated>
    
    <content type="html"><![CDATA[<h4 id="测试项目优化"><a href="#测试项目优化" class="headerlink" title="测试项目优化"></a>测试项目优化</h4><p>未优化启动nhospital项目</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java -jar -Xms1024m -Xmx2048m nhospital-service-1.0.0-SNAPSHOT.jar --spring.profiles.active=test</span><br></pre></td></tr></table></figure><p>优化前的内存监控,内存使用在1.7G-1.8G左右</p><img src="https://nmk0718.github.io/image/image-20210908173406276.png"><p>使用JAVA自带的VisualVM进行监控</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java安装目录的bin中</span><br><span class="line">C:\Program Files\Java\jdk1.8.0_181\bin\jvisualvm.exe</span><br></pre></td></tr></table></figure><p>Java VisualVM默认没有安装Visual GC插件，需要手动安装，点击菜单栏 工具-&gt;插件 安装Visual GC,安装完成后重启Java VisualVM，Visual GC界面自动打开，即可看到JVM中堆内存的分代情况</p><img src="https://nmk0718.github.io/image/image-20210908165014278.png"><p>Graphs区域：内存使用详细介绍</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Compile Time(编译时间)：15365 compiles 表示编译总数，1m29.699s表示编译累计时间。一个脉冲表示一次JIT编译，窄脉冲表示持续时间短，宽脉冲表示持续时间长。</span><br><span class="line"></span><br><span class="line">Class Loader Time(类加载时间): 17201 loaded表示加载类数量, 100 unloaded表示卸载的类数量，18.196s表示类加载花费的时间</span><br><span class="line"></span><br><span class="line">GC Time(GC Time)：67collections表示垃圾收集的总次数，1.118s表示垃圾收集花费的时间，last cause表示最近垃圾收集的原因</span><br><span class="line"></span><br><span class="line">Eden Space(Eden 区)：括号内的681.500M表示最大容量，637.500M表示当前容量，后面的145.561M表示当前使用情况，63collections表示垃圾收集次数，517.821ms表示垃圾收集花费时间</span><br><span class="line"></span><br><span class="line">Survivor 0/Survivor 1(S0和S1区)：括号内的227.500M表示最大容量，14.500M表示当前容量，之后的值是当前使用情况</span><br><span class="line"></span><br><span class="line">Old Gen(老年代)：括号内的1.333G表示最大容量，728.000M表示当前容量，之后的150.812M表示当前使用情况，4collections表示垃圾收集次数 ，600.392ms表示垃圾收集花费时间</span><br><span class="line"></span><br><span class="line">Perm Gen(永久代)：括号内的1.086G表示最大容量，106.039M表示当前容量，之后的103.775M表示当前使用情况</span><br></pre></td></tr></table></figure><p> 查看得知Spaces空间的Old(老年代)使用内存较大,但Old的最大内存和Eden最大内存很大,无法触发GC垃圾回收,</p><p>设置新生代的最大内存为512M,让新生代更快触发垃圾回收,更快的丢到老年代触发老年代垃圾回收</p><p>使用新配置启动</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java -jar -Xms1024m -Xmx2048m -Xss256k -Xmn512m -XX:SurvivorRatio=6 -Dhttp.proxyHostWx=219.128.77.86 -Dhttp.proxyPortWx=7002 nhospital-service-1.0.0-SNAPSHOT.jar --spring.profiles.active=test</span><br></pre></td></tr></table></figure><p>启动后可看到监控中的内存使用,平稳在1.07G左右</p><img src="https://nmk0718.github.io/image/image-20210908173250449.png"><h4 id="JVM垃圾回收原理"><a href="#JVM垃圾回收原理" class="headerlink" title="JVM垃圾回收原理:"></a>JVM垃圾回收原理:</h4><p><strong>第一种情况</strong></p><ul><li><p>项目创建的新对象会先进入新生代进行存储,等达到新生代最大值时,还在使用就进入S0或S1,如未使用进行释放,</p></li><li><p>S0达到最大值后,未使用释放对象,到达最大值后进去S1,</p></li><li><p>S1未使用释放对象,到达最大值后进去S0</p></li><li><p>S0-S1互相交替15次后 未释放对象会进入老年代</p></li><li><p>老年代到达最大值时才会释放对象,在到达最大值之前一直存在</p></li></ul><p><strong>第二种情况</strong></p><ul><li><p>项目创建的新对象会先进入新生代进行存储,等达到新生代最大值时,还在使用就进入S0或S1,如果对象的大小超过S0或S1大小,将直接丢入老年代</p></li><li><p>老年代到达最大值时才会释放对象,在到达最大值之前一直存在</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;测试项目优化&quot;&gt;&lt;a href=&quot;#测试项目优化&quot; class=&quot;headerlink&quot; title=&quot;测试项目优化&quot;&gt;&lt;/a&gt;测试项目优化&lt;/h4&gt;&lt;p&gt;未优化启动nhospital项目&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>线上问题</title>
    <link href="https://nmk0718.github.io/2021/06/07/%E6%8E%92%E6%9F%A5%E7%BA%BF%E4%B8%8A%E9%97%AE%E9%A2%98/"/>
    <id>https://nmk0718.github.io/2021/06/07/%E6%8E%92%E6%9F%A5%E7%BA%BF%E4%B8%8A%E9%97%AE%E9%A2%98/</id>
    <published>2021-06-07T08:29:00.000Z</published>
    <updated>2025-02-10T04:00:59.680Z</updated>
    
    <content type="html"><![CDATA[<h3 id="app后台挂掉问题汇总"><a href="#app后台挂掉问题汇总" class="headerlink" title="app后台挂掉问题汇总"></a>app后台挂掉问题汇总</h3><p>报错:</p><p>数据库连接池不可用</p><p><img src="file://E:%5Cnginx%5Cfile%5Cimages%5Cimage-20210607160838699.png?lastModify=1623400858" alt="image-20210607160838699"></p><p>查询报错信息HikariPool-1 -Connection is not available, request timed out after ms.得到结果</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">连接池里的连接不够用了，因为在等待连接所以超时了</span><br></pre></td></tr></table></figure><p>需要增加以下代码到项目后端配置文件中</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">#客户端等待连接池连接的最大毫秒数</span><br><span class="line">datasource.connection-timeout=<span class="number">60000</span></span><br><span class="line">#允许连接在连接池中空闲的最长时间(以毫秒为单位)</span><br><span class="line">datasource.idle-timeout=<span class="number">60000</span></span><br><span class="line">#连接将被测试活动的最大时间量</span><br><span class="line">datasource.validation-timeout=<span class="number">3000</span></span><br><span class="line">#池中连接关闭后的最长生命周期</span><br><span class="line">datasource.max-lifetime=<span class="number">60000</span></span><br><span class="line">#最大池大小</span><br><span class="line">datasource.maximum-pool-size=<span class="number">30</span></span><br><span class="line">#连接池中维护的最小空闲连接数</span><br><span class="line">datasource.minimum-idle=<span class="number">10</span></span><br></pre></td></tr></table></figure><p>CPU突然飙高</p><p><img src="file://E:%5Cnginx%5Cfile%5Cimages%5Cimage-20210607161415217.png?lastModify=1623400843" alt="image-20210607161415217"></p><p>通过top查看CPU最高的进程</p><p>![image-20210611165054632](E:\nginx\file\images\image-20210611165054632.png” /&gt;</p><p>找出该进程内最耗费CPU的线程，可以使用ps -Lfp pid或者ps -mp pid -o THREAD, tid, time或者top -Hp pid</p><p>![image-20210611165544735](E:\nginx\file\images\image-20210611165544735.png” /&gt;</p><p>CPU时间长的是线程ID为19758和22477的线程，用命令转换为十六进制值</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@app-service ~]# printf "%x\n" 19758</span><br><span class="line">4d2e</span><br><span class="line">[root@app-service ~]# printf "%x\n" 22477</span><br><span class="line">57cd</span><br></pre></td></tr></table></figure><p>使用jstack输出进程19712的堆栈信息，然后根据线程ID的十六进制值grep</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@app-service ~]<span class="comment"># jstack 19712|grep 4d2e</span></span><br><span class="line"><span class="string">"lettuce-epollEventLoop-4-1"</span> <span class="comment">#16 daemon prio=5 os_prio=0 cpu=196205389.54ms elapsed=325181.90s tid=0x00007feaf4f17000 nid=0x4d2e runnable  [0x00007fea945ec000]</span></span><br><span class="line">[root@app-service ~]<span class="comment"># jstack 19712|grep 57cd</span></span><br><span class="line"><span class="string">"lettuce-epollEventLoop-4-2"</span> <span class="comment">#113 daemon prio=5 os_prio=0 cpu=76704837.74ms elapsed=320312.36s tid=0x00007feabc03e800 nid=0x57cd runnable  [0x00007fea947ee000]</span></span><br></pre></td></tr></table></figure><p>通过查询lettuce-epollEventLoop-4-1得知是redis出现的问题</p><p>通过RedisDesktopManager可看到redis中db7连接数过大</p><p>![image-20210611170043128](E:\nginx\file\images\image-20210611170043128.png” /&gt;</p><p>需要在生产的配置中连接池信息</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">#连接池中的最大空闲连接</span><br><span class="line">#spring.redis.lettuce.pool.max-idle=5</span><br><span class="line">#连接池最大连接数</span><br><span class="line">#spring.redis.lettuce.pool.max-active=8</span><br><span class="line">#连接池中的最小空闲连接</span><br><span class="line">#spring.redis.lettuce.pool.min-idle=1</span><br></pre></td></tr></table></figure><p>参考链接:<a href="https://blog.csdn.net/weixin_42228950/article/details/111059352" target="_blank" rel="noopener">https://blog.csdn.net/weixin_42228950/article/details/111059352</a></p><p>​                <a href="https://blog.csdn.net/m0_38110132/article/details/79652962" target="_blank" rel="noopener">https://blog.csdn.net/m0_38110132/article/details/79652962</a></p><p>​                <a href="https://blog.csdn.net/yu0_zhang0/article/details/103863447" target="_blank" rel="noopener">https://blog.csdn.net/yu0_zhang0/article/details/103863447</a></p><p>问题:在5.31号15:41和6.4号20:30出现生产的app后台无法进行操作.</p><p>排查异常点:</p><ul><li><p>根据后端项目日志可以看出是连接池不可用,连接超时导致</p><p>![image-20210607160838699](E:\nginx\file\images\image-20210607160838699.png” /&gt;</p></li><li><p>云监控可看到生产服务器CPU在5.29号上线版本后飙升</p><p>![image-20210607161415217](E:\nginx\file\images\image-20210607161415217.png” /&gt;</p></li></ul><p>解决方案:</p><p>1.增加以下代码到项目后端配置文件中(已经加在测试,等下次版本一起上线到生产,看是否出现报错)</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">#客户端等待连接池连接的最大毫秒数</span><br><span class="line">datasource.connection-timeout=<span class="number">60000</span></span><br><span class="line">#允许连接在连接池中空闲的最长时间(以毫秒为单位)</span><br><span class="line">datasource.idle-timeout=<span class="number">60000</span></span><br><span class="line">#连接将被测试活动的最大时间量</span><br><span class="line">datasource.validation-timeout=<span class="number">3000</span></span><br><span class="line">#池中连接关闭后的最长生命周期</span><br><span class="line">datasource.max-lifetime=<span class="number">60000</span></span><br><span class="line">#最大池大小</span><br><span class="line">datasource.maximum-pool-size=<span class="number">30</span></span><br><span class="line">#连接池中维护的最小空闲连接数</span><br><span class="line">datasource.minimum-idle=<span class="number">10</span></span><br></pre></td></tr></table></figure><p>2.云服务器CPU飙升可能为上次版本代码中的有效时间问题,在6.08号版本生产上线中解决</p><p>3.项目不能访问后没有即刻告警,因为该服务没有停止运行,但是内部已经连接超时,无法响应。针对此情况新增监控告警,该告警为监控日志报错后告警,时间间隔为10分钟,通过手机短信,邮箱,钉钉机器人报警</p><p>![image-20210607162109471](E:\nginx\file\images\image-20210607162109471.png” /&gt;</p><h3 id="钉钉收到容器OOM告警"><a href="#钉钉收到容器OOM告警" class="headerlink" title="钉钉收到容器OOM告警"></a>钉钉收到容器OOM告警</h3><img src="https://nmk0718.github.io/image/dingdingalert.png"><p>进入到监控中查看CPU和内存均正常</p><img src="https://nmk0718.github.io/image/alimonitor.png"><p>查看nhospital容器对应的的CPU和内存,CPU达到80%但没超过限制值</p><img src="https://nmk0718.github.io/image/contianercpu.png"><p>内存在1.8G时进行重启容器(分配内存为2.2G)</p><img src="https://nmk0718.github.io/image/containermem.png"><p>查看该节点对应的/var/log/message得知容器被OOM杀掉进程</p><img src="https://nmk0718.github.io/image/systemlog.png"> <p><strong>OOM:</strong></p><p>如果节点在 kubelet 回收内存之前经历了系统 OOM（内存不足）事件，它将基于 <a href="https://lwn.net/Articles/391222/" target="_blank" rel="noopener">oom-killer</a> 做出响应。</p><p>kubelet 基于 pod 的 service 质量为每个容器设置一个 oom_score_adj 值。</p><table><thead><tr><th>Service 质量</th><th>oom_score_adj</th></tr></thead><tbody><tr><td>Guaranteed</td><td>-998</td></tr><tr><td>BestEffort</td><td>1000</td></tr><tr><td>Burstable</td><td>min(max(2,  1000 - (1000 * memoryRequestBytes) / machineMemoryCapacityBytes), 999)</td></tr></tbody></table><p>如果 kubelet 在节点经历系统 OOM 之前无法回收内存，oom_killer 将基于它在节点上 使用的内存百分比算出一个 oom_score，并加上 oom_score_adj 得到容器的有效 oom_score，然后结束得分最高的容器。</p><p>预期的行为应该是拥有最低服务质量并消耗和调度请求相关内存量最多的容器第一个被结束，以回收内存。</p><p>和 pod 驱逐不同，如果一个 Pod 的容器是被 OOM 结束的，基于其 RestartPolicy， 它可能会被 kubelet 重新启动</p><p><strong>QoS类型：</strong><br> Guranteed:<br> 　每个容器的CPU，RAM资源都设置了相同值的requests 和 limits属性。<br> 　简单说： cpu.limits = cpu.requests<br> 　　　　　memory.limits = memory.requests<br> 　这类Pod的运行优先级最高，但凡这样配置了cpu和内存的limits和requests，它会自动被归为此类。<br> 　Burstable:<br> 　　　每个容器至少定义了CPU，RAM的requests属性，这里说每个容器是指：一个Pod中可以运行多个容器。<br> 　　　那么这类容器就会被自动归为burstable，而此类就属于中等优先级。<br> 　BestEffort:<br> 　　　没有一个容器设置了requests 或 limits，则会归为此类，而此类别是最低优先级。</p><p> <strong>QoS类型的作用：</strong><br> 　Node上会运行很多Pod，当运行一段时间后，发现Node上的资源紧张了，这时K8s就会根据QoS类别来选择Kill掉一部分Pod，那些会先被Kill掉？<br> 　当然就是优先级最低的，也就是BestEffort，若BestEffort被Kill完了，还是紧张，接下来就是Kill中等优先级的，即Burstable，依次类推。</p><p> 　这里有个问题，BestEffort因为没有设置requests和limits，可根据谁占用资源最多，就kill谁，但Burstable设置了requests和limits，它的kill标准是什么？<br> 　若按照谁占资源多kill谁，那遇到这样的问题，怎么选择？<br> 　　　PodA: 启动时设置了memory.request=512M , memory.limits=1G<br> 　　　PodB: 设置为: memory.requests=1G, memory.limits=2G</p><p> 　　　PodA: 运行了一段时间后，占用了500M了，它可能还有继续申请内存。<br> 　　　PodB: 它则占用了512M内存了，但它可能也还需要申请内存。<br> 　　　想想，现在Node资源紧张了，会先kill谁？<br> 　　　其实，会优先kill PodA ， 为啥？<br> 　　　因为它启动时，说自己需要512M内存就够了，但你现在这么积极的申请内存，都快把你需求的内存吃完了，只能说明你太激进了，因此会先kill。<br> 　　　而PodB，启动时需要1G，但目前才用了1半，说明它比较温和，因此不会先kill它。</p><p><strong>解决方案：</strong></p><p>挂掉的nhospital容器的资源配置为：</p><p>cpu.request=0.1m cpu.limit=0.9m  memory.request=512M memory.limits=2248M</p><p>故nhospital容器的Qos类型为Burstable,若该容器比较激进使用内存容易被kill</p><p>修改nhospital容器的资源配置为：</p><p>cpu.request=0.1m cpu.limit=0.9m memory.request=2248M memory.limits=2248M</p><p>当pod 内存超过limit时，会被oom。</p><p>当cpu超过limit时，不会被kill，但是会限制不超过limit值。</p><p>所以只修改memory的request跟limit保持一致即可</p><p>这样nhospital容器的Qos类型就变为了Guranteed,分值最低不会被kill</p><p>当前节点池中的节点内存使用量都在73-78%,当其他服务内存增长过高情况下会导致会先oom情况,可进行内存扩容进行避免OOM发生</p><img src="https://nmk0718.github.io/image/node.png"><h3 id="代码获取不到客户端真实ip"><a href="#代码获取不到客户端真实ip" class="headerlink" title="代码获取不到客户端真实ip"></a>代码获取不到客户端真实ip</h3><p>排查一:</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">查看nginx服务器配置转发是否正确</span><br><span class="line"><span class="attribute">proxy_set_header</span>   Host    <span class="variable">$host</span>;</span><br><span class="line"><span class="attribute">proxy_set_header</span>   X-Real-IP   <span class="variable">$remote_addr</span>;</span><br><span class="line"><span class="attribute">proxy_set_header</span>   X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line"><span class="attribute">proxy_set_header</span>   X-Forwarded-Proto <span class="variable">$scheme</span>;</span><br><span class="line"></span><br><span class="line">查看得知正确无误</span><br></pre></td></tr></table></figure><p>排查二：</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">查看k8s中的ingress转发是否正确</span><br><span class="line"><span class="attribute">proxy_set_header</span> Host                   <span class="variable">$best_http_host</span>;</span><br><span class="line"><span class="attribute">proxy_set_header</span> X-Real-IP              <span class="variable">$remote_addr</span>;</span><br><span class="line"><span class="attribute">proxy_set_header</span> X-Forwarded-For        <span class="variable">$remote_addr</span>;</span><br><span class="line"><span class="attribute">proxy_set_header</span> X-Forwarded-Proto      <span class="variable">$pass_access_scheme</span>;</span><br><span class="line"></span><br><span class="line">对比后发现有差异</span><br></pre></td></tr></table></figure><p>修改proxy_set_header X-Forwarded-For        $remote_addr;中的$remote_addr为 $proxy_add_x_forwarded_for;</p><p>再次进行获取客户端真实ip,获取正常</p><h3 id="2021年9月18号出现宕机问题汇总"><a href="#2021年9月18号出现宕机问题汇总" class="headerlink" title="2021年9月18号出现宕机问题汇总"></a>2021年9月18号出现宕机问题汇总</h3><ol><li>在10:43分左右出现app登录不上问题,查看项目报错日志</li></ol><p>Exception in thread “Thread-38” org.springframework.jdbc.BadSqlGrammarException: Error selecting key or setting result to parameter object. Cause: org.postgresql.util.PSQLException: 错误: 语法错误 在 “PostgreSQL” 或附近的<br>  Position: 1<br> ; bad SQL grammar []; nested exception is org.postgresql.util.PSQLException: 错误: 语法错误 在 “PostgreSQL” 或附近的<br>  Position: 1</p><p>是由上述报错导致项目挂掉,找到该接口负责人,进行修改.重新提交代码后,进行重新发布</p><p>再次观察监控得知再次宕机</p><img src="https://nmk0718.github.io/image/20210918monitor.png"><p>查看日志未有报错,CPU和内存溢出.又收到都市大医生也出现宕机问题,加大项目节点观察是否宕机还是出现问题</p><p>通过nginx查看请求的ip和URL 通过访问地址进行分析</p><img src="https://nmk0718.github.io/image/20210918sls.png"><table><thead><tr><th>前4个请求最多的地址为:</th><th>业务</th></tr></thead><tbody><tr><td>/zuul/live-app/ext/video/getRandomProduct</td><td>首页推荐视频</td></tr><tr><td>/zuul/live-app/ext/video/article/recommended</td><td>首页推荐文章</td></tr><tr><td>/doctor-api/v1_0/user/logoutForLj</td><td>用户退出登录</td></tr><tr><td>/zuul/live-app/ext/app/saveChannel</td><td>上报渠道</td></tr></tbody></table><p>查看得知用户退出登录接口的请求次数为25600次,上传渠道接口的请求次数为21474次</p><p>得出结论:</p><p>用户退出登录接口导致服务宕机,使用户无法访问都市大医生,上报渠道接口导致接口出现无法访问问题</p><p>协助开发查询代码问题,找到问题原因,用户退出登录接口一直在死循环请求服务器,导致服务一直重启.上报渠道接口因修改app登录不上时出现了502,也会一直请求服务器.开发进行重新修复代码问题后,重新打出app包.再无问题出现</p><p><strong>后续</strong></p><p>该问题为代码问题,都是正常的请求,但是出现了死循环,加大服务器节点和内存无法避免该情况发生,只能通过排查代码中的问题来解决.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;app后台挂掉问题汇总&quot;&gt;&lt;a href=&quot;#app后台挂掉问题汇总&quot; class=&quot;headerlink&quot; title=&quot;app后台挂掉问题汇总&quot;&gt;&lt;/a&gt;app后台挂掉问题汇总&lt;/h3&gt;&lt;p&gt;报错:&lt;/p&gt;
&lt;p&gt;数据库连接池不可用&lt;/p&gt;
&lt;p&gt;&lt;img s</summary>
      
    
    
    
    
    <category term="mysql" scheme="https://nmk0718.github.io/tag/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Skywalking</title>
    <link href="https://nmk0718.github.io/2021/03/27/skywalking/"/>
    <id>https://nmk0718.github.io/2021/03/27/skywalking/</id>
    <published>2021-03-27T07:25:00.000Z</published>
    <updated>2024-11-29T06:45:25.617Z</updated>
    
    <content type="html"><![CDATA[<p>下载skywalking</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget https://mirror.bit.edu.cn/apache/skywalking/8.0.0/apache-skywalking-apm-es7-8.0.0.tar.gz</span><br></pre></td></tr></table></figure><p>解压</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar zxvf apache-skywalking-apm-es7-8.0.0.tar.gz</span><br></pre></td></tr></table></figure><p><strong>collector配置</strong></p><p>vi apache-skywalking-apm-bin-es7/config/application.yml </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">core:</span><br><span class="line">  selector: $&#123;SW_CORE:default&#125;</span><br><span class="line">  default:</span><br><span class="line">    # Mixed: Receive agent data, Level 1 aggregate, Level 2 aggregate</span><br><span class="line">    # Receiver: Receive agent data, Level 1 aggregate</span><br><span class="line">    # Aggregator: Level 2 aggregate</span><br><span class="line">    role: $&#123;SW_CORE_ROLE:Mixed&#125; # Mixed/Receiver/Aggregator</span><br><span class="line">    </span><br><span class="line">    # rest 服务地址和端口</span><br><span class="line">    restHost: $&#123;SW_CORE_REST_HOST:0.0.0.0&#125;</span><br><span class="line">    #与webApp的12800对应</span><br><span class="line">    restPort: $&#123;SW_CORE_REST_PORT:12800&#125;</span><br><span class="line">    restContextPath: $&#123;SW_CORE_REST_CONTEXT_PATH:/&#125;</span><br><span class="line">    </span><br><span class="line">    # gRPC 服务地址和端口</span><br><span class="line">    gRPCHost: $&#123;SW_CORE_GRPC_HOST:0.0.0.0&#125;</span><br><span class="line">    #与agent端11800对应</span><br><span class="line">    gRPCPort: $&#123;SW_CORE_GRPC_PORT:11800&#125;</span><br><span class="line">   </span><br><span class="line">storage:</span><br><span class="line">#更改默认为elasticsearch7</span><br><span class="line">  selector: $&#123;SW_STORAGE:elasticsearch7&#125;</span><br><span class="line">  elasticsearch7:</span><br><span class="line">  #nameSpace与es的名称保持一致</span><br><span class="line">    nameSpace: gzlp-elasticsearch</span><br><span class="line">  #es集群节点</span><br><span class="line">    clusterNodes: 172.17.53.225:9100,172.17.53.226:9101,172.17.53.227:9102</span><br><span class="line">    protocol: $&#123;SW_STORAGE_ES_HTTP_PROTOCOL:&quot;http&quot;&#125;</span><br><span class="line">    trustStorePath: $&#123;SW_STORAGE_ES_SSL_JKS_PATH:&quot;&quot;&#125;</span><br><span class="line">    trustStorePass: $&#123;SW_STORAGE_ES_SSL_JKS_PASS:&quot;&quot;&#125;</span><br><span class="line">    dayStep: $&#123;SW_STORAGE_DAY_STEP:1&#125;</span><br><span class="line">    user: $&#123;SW_ES_USER:&quot;&quot;&#125;</span><br><span class="line">    password: $&#123;SW_ES_PASSWORD:&quot;&quot;&#125;</span><br></pre></td></tr></table></figure><p><strong>webApp 配置</strong></p><p>vi apache-skywalking-apm-bin-es7/webapp/webapp.yml</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server:</span><br><span class="line">#web访问端口</span><br><span class="line">  port: 8070</span><br><span class="line"></span><br><span class="line">collector:</span><br><span class="line">  path: /graphql</span><br><span class="line">  ribbon:</span><br><span class="line">    ReadTimeout: 10000</span><br><span class="line">    # Point to all backend&apos;s restHost:restPort, split by ,</span><br><span class="line">    #与application.yml中的restPort相对应</span><br><span class="line">    listOfServers: 127.0.0.1:12800</span><br></pre></td></tr></table></figure><p>启动</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">./bin/oapService.sh</span><br><span class="line"></span><br><span class="line">./bin/webappService.sh</span><br></pre></td></tr></table></figure><p><strong>Agent 配置</strong></p><p>vi apache-skywalking-apm-bin-es7/agent/config/agent.config</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 设置Agent命名空间，它用来隔离追踪和监控数据，当两个应用使用不同的名称空间时，跨进程传播链会中断。</span><br><span class="line">agent.namespace=$&#123;SW_AGENT_NAMESPACE:default-namespace&#125;</span><br><span class="line"> </span><br><span class="line"># 设置服务名称，会在 Skywalking UI 上显示的名称</span><br><span class="line">agent.service_name=$&#123;SW_AGENT_NAME:Your_ApplicationName&#125;</span><br><span class="line"> </span><br><span class="line"># 每 3秒采集的样本跟踪比例，如果是负数则表示 100%采集</span><br><span class="line">agent.sample_n_per_3_secs=$&#123;SW_AGENT_SAMPLE:-1&#125;</span><br><span class="line"> </span><br><span class="line"># 启用 Debug ，如果为 true 则将把所有检测到的类文件保存在&quot;/debug&quot;文件夹中</span><br><span class="line"># agent.is_open_debugging_class = $&#123;SW_AGENT_OPEN_DEBUG:true&#125;</span><br><span class="line"> </span><br><span class="line"># 后端的 collector 端口及地址</span><br><span class="line">collector.backend_service=$&#123;SW_AGENT_COLLECTOR_BACKEND_SERVICES:192.168.2.215:11800&#125;</span><br><span class="line"> </span><br><span class="line"># 日志级别</span><br><span class="line">logging.level=$&#123;SW_LOGGING_LEVEL:DEBUG&#125;</span><br></pre></td></tr></table></figure><p>把apache-skywalking-apm-bin-es7/agent 目录，拷贝到应用所在的服务器上。</p><p>启动应用时</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#namespace和service_name改为对应的服务环境和名称</span><br><span class="line"></span><br><span class="line">java -jar -Dskywalking.agent.namespace=prod -Dskywalking.agent.service_name=prod-servicename -javaagent:/home/skywalking/agent/skywalking-agent.jar $JARFILE --spring.profiles.active=$ACTIVE  &gt;&gt; $LOG &amp;</span><br></pre></td></tr></table></figure><p>skywalking页面使用<br><strong>仪表盘</strong><br><img src="\image\5f1f90c77116a.png"><br><strong>拓扑图</strong><br>根据服务调用自动还原应用拓扑图，连线会根据请求关系动态流动<br><img src="\image\5f1f938b359cb.png"><br><strong>追踪</strong><br>查看具体url的耗时原因<br><img src="\image\/5f1f961c4b7e3.png"><br>红色的url可以查看日志详情<br><img src="\image\5f1f96a3248b7.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;下载skywalking&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;wget https://mirror.bit.edu.cn/apach</summary>
      
    
    
    
    
    <category term="Skywalking" scheme="https://nmk0718.github.io/tag/Skywalking/"/>
    
  </entry>
  
  <entry>
    <title>GitLab</title>
    <link href="https://nmk0718.github.io/2021/03/27/gitlab/"/>
    <id>https://nmk0718.github.io/2021/03/27/gitlab/</id>
    <published>2021-03-27T07:23:00.000Z</published>
    <updated>2025-02-10T04:00:59.681Z</updated>
    
    <content type="html"><![CDATA[<h3 id="GitLab-CI-CD"><a href="#GitLab-CI-CD" class="headerlink" title="GitLab CI/CD"></a>GitLab CI/CD</h3><h4 id="使用docker下载gitlab镜像"><a href="#使用docker下载gitlab镜像" class="headerlink" title="使用docker下载gitlab镜像"></a>使用docker下载gitlab镜像</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker pull gitlab/gitlab-ce</span><br></pre></td></tr></table></figure><h4 id="检查镜像下载是否成功"><a href="#检查镜像下载是否成功" class="headerlink" title="检查镜像下载是否成功"></a>检查镜像下载是否成功</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@public ~]# docker images</span><br><span class="line">REPOSITORY                                TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">gitlab/gitlab-ce                          latest              85ef0c92d667        3 days ago          1.98GB</span><br></pre></td></tr></table></figure><h4 id="创建数据存储目录"><a href="#创建数据存储目录" class="headerlink" title="创建数据存储目录"></a>创建数据存储目录</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@public ~]# mkdir -p /opt/gitlab/data</span><br><span class="line">[root@public ~]# mkdir /opt/gitlab/logs</span><br><span class="line">[root@public ~]# mkdir /opt/gitlab/config</span><br></pre></td></tr></table></figure><h4 id="启动gitlab"><a href="#启动gitlab" class="headerlink" title="启动gitlab"></a>启动gitlab</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@public gitlab]# docker run --detach \</span><br><span class="line">       --hostname 192.168.229.8 \</span><br><span class="line">       --publish 8443:443 --publish 9080:80 --publish 2222:22 \</span><br><span class="line">       --name gitlab \</span><br><span class="line">       --restart always \</span><br><span class="line">       --privileged=true \</span><br><span class="line">       --volume /file/gitlab/config:/etc/gitlab \</span><br><span class="line">   --volume /file/gitlab/logs:/var/log/gitlab \</span><br><span class="line">       --volume /file/gitlab/data:/var/opt/gitlab \</span><br><span class="line">      docker.io/gitlab/gitlab-ce:latest</span><br></pre></td></tr></table></figure><p><strong>gitlab如使用单台服务器可使用默认配置,若跟别的服务放一起会出现gitlab占用内存过多问题</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi /file/gitlab/config/gitlab.rb</span><br><span class="line"></span><br><span class="line">#去掉下面的注释</span><br><span class="line"></span><br><span class="line">unicorn[&apos;worker_processes&apos;] = 2</span><br><span class="line"></span><br><span class="line">#之后执行</span><br><span class="line"></span><br><span class="line">docker exec -it gitlab gitlab-ctl reconfigure</span><br><span class="line"></span><br><span class="line">docker exec -it gitlab gitlab-ctl restart</span><br></pre></td></tr></table></figure><p>gitlab初始用户名密码</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@deployment /]# cat /opt/gitlab/config/initial_root_password </span><br><span class="line"># WARNING: This value is valid only in the following conditions</span><br><span class="line">#          1. If provided manually (either via `GITLAB_ROOT_PASSWORD` environment variable or via `gitlab_rails[&apos;initial_root_password&apos;]` setting in `gitlab.rb`, it was provided before database was seeded for the first time (usually, the first reconfigure run).</span><br><span class="line">#          2. Password hasn&apos;t been changed manually, either via UI or via command line.</span><br><span class="line">#</span><br><span class="line">#          If the password shown here doesn&apos;t work, you must reset the admin password following https://docs.gitlab.com/ee/security/reset_user_password.html#reset-your-root-password.</span><br><span class="line"></span><br><span class="line">Password: GHztfkIk0eg4qdTTNn5owN+7jK3ojlUHLrXMibB5Pj8=</span><br><span class="line"></span><br><span class="line"># NOTE: This file will be automatically deleted in the first reconfigure run after 24 hours.</span><br></pre></td></tr></table></figure><h4 id="安装GitLab-Runner"><a href="#安装GitLab-Runner" class="headerlink" title="安装GitLab Runner"></a>安装GitLab Runner</h4><p>下载并安装二进制文件</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Download the binary for your system</span><br><span class="line">curl -L --output /usr/local/bin/gitlab-runner https://gitlab-runner-downloads.s3.amazonaws.com/latest/binaries/gitlab-runner-linux-amd64</span><br><span class="line"></span><br><span class="line"># Give it permissions to execute</span><br><span class="line">chmod +x /usr/local/bin/gitlab-runner</span><br><span class="line"></span><br><span class="line"># Create a GitLab CI user</span><br><span class="line">useradd --comment &apos;GitLab Runner&apos; --create-home gitlab-runner --shell /bin/bash</span><br><span class="line"></span><br><span class="line"># Install and run as service</span><br><span class="line">gitlab-runner install --user=gitlab-runner --working-directory=/home/gitlab-runner</span><br><span class="line">gitlab-runner start</span><br></pre></td></tr></table></figure><h4 id="注册runner的命令"><a href="#注册runner的命令" class="headerlink" title="注册runner的命令"></a>注册runner的命令</h4><p>注册的地址要填写为ip+port.不要使用web页面展示的<a href="http://ip//" target="_blank" rel="noopener">http://ip//</a> 否则注册失败</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@deployment /]# gitlab-runner register</span><br><span class="line">Runtime platform                                    arch=amd64 os=linux pid=86642 revision=58ba2b95 version=14.2.0</span><br><span class="line">Running in system-mode.                            </span><br><span class="line">                                                   </span><br><span class="line">Enter the GitLab instance URL (for example, https://gitlab.com/):</span><br><span class="line">http://192.168.50.52:9090/</span><br><span class="line">Enter the registration token:</span><br><span class="line">cZ8xxddc9zciAHAsJpqB</span><br><span class="line">Enter a description for the runner:</span><br><span class="line">[deployment]: test</span><br><span class="line">Enter tags for the runner (comma-separated):</span><br><span class="line">test</span><br><span class="line">Registering runner... succeeded                     runner=cZ8xxddc</span><br><span class="line">Enter an executor: docker, docker-ssh, parallels, shell, virtualbox, kubernetes, custom, ssh, docker+machine, docker-ssh+machine:</span><br><span class="line">shell</span><br><span class="line">Runner registered successfully. Feel free to start it, but if it&apos;s running already the config should be automatically reloaded!</span><br></pre></td></tr></table></figure><p>Runner连接</p><p>不要把Runner和gitlab部署在一台机器 不然会一直显示未连接</p><img src="https://nmk0718.github.io/image/image-20210830152258004.png"><p>Runner的构建目录</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/home/gitlab-runner/builds/ymVX6kY7/0/</span><br></pre></td></tr></table></figure><p>Runner的注册后的配置文件</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/etc/gitlab-runner/config.toml</span><br></pre></td></tr></table></figure><p>GitLab-CI.yml</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">variables:</span><br><span class="line">  GIT_STRATEGY: clone</span><br><span class="line"></span><br><span class="line">before_script:</span><br><span class="line">  - pwd</span><br><span class="line">  </span><br><span class="line">stages:</span><br><span class="line">  - build</span><br><span class="line">  - deploy</span><br><span class="line">  </span><br><span class="line">build-job:</span><br><span class="line">  stage: build</span><br><span class="line">  tags:</span><br><span class="line">    - nimingkun</span><br><span class="line">  only:</span><br><span class="line">    - release</span><br><span class="line">  script:</span><br><span class="line">    - mvn clean install -Dmaven.test.skip=true</span><br><span class="line">    - cp ymall/target/ymall-0.0.1-SNAPSHOT.jar  dockerfile/</span><br><span class="line">    - cd dockerfile &amp;&amp; sh build.sh ymall</span><br><span class="line">  artifacts:</span><br><span class="line">    paths:</span><br><span class="line">      - ymall/target/ymall-0.0.1-SNAPSHOT.jar</span><br><span class="line"></span><br><span class="line">deploy-job:</span><br><span class="line">  stage: deploy</span><br><span class="line">  tags:</span><br><span class="line">    - nimingkun</span><br><span class="line">  only:</span><br><span class="line">    - release</span><br><span class="line">  script:</span><br><span class="line">    - sh CD.sh</span><br></pre></td></tr></table></figure><p>会出现报错,因为git版本告知的错误</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fatal: git fetch-pack: expected shallow list</span><br><span class="line">fatal: The remote end hung up unexpectedly</span><br></pre></td></tr></table></figure><p>解决方法</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install  http://opensource.wandisco.com/centos/7/git/x86_64/wandisco-git-release-7-2.noarch.rpm</span><br><span class="line">yum update git</span><br></pre></td></tr></table></figure><p>CI中出现打包镜像错误</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Got permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Post http://%2Fvar%2Frun%2Fdocker.sock/v1.24/build?buildargs=%7B%7D&amp;cachefrom=%5B%5D&amp;cgroupparent=&amp;cpuperiod=0&amp;cpuquota=0&amp;cpusetcpus=&amp;cpusetmems=&amp;cpushares=0&amp;dockerfile=Dockerfile&amp;labels=%7B%7D&amp;memory=0&amp;memswap=0&amp;networkmode=default&amp;rm=1&amp;shmsize=0&amp;t=192.168.50.52%3A8551%2Fymall%3Alatest&amp;target=&amp;ulimits=null&amp;version=1: dial unix /var/run/docker.sock: connect: permission denied</span><br></pre></td></tr></table></figure><p>原因:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">使用root账户直接yum安装docker，然后service docker start启动docker服务。Gitlab-CI默认以gitlab-runner用户执行，因此对/var/run/docker.sock无访问权限，无法与docker daemon通信</span><br></pre></td></tr></table></figure><p>解决方法</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">groupadd -r docker</span><br><span class="line">useradd -g docker -r docker -p &apos;password&apos;</span><br><span class="line"></span><br><span class="line">usermod -aG docker gitlab-runner</span><br><span class="line"></span><br><span class="line">service docker stop</span><br><span class="line">su docker </span><br><span class="line">sudo service docker start</span><br></pre></td></tr></table></figure><p>我这里仅为测试GitLab-CI,故直接添加docker到gitlab-runner组</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">usermod -aG  docker gitlab-runner</span><br></pre></td></tr></table></figure><p>拉取Git仓库时报错</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Initialized empty Git repository in /private/var/folders/g5/8twmk1xj481_6btvppyw5j4h0000gp/T/.tmpNYVg6H/.git/</span><br><span class="line">hint: Using &apos;master&apos; as the name for the initial branch. This default branch name</span><br><span class="line">hint: is subject to change. To configure the initial branch name to use in all</span><br><span class="line">hint: of your new repositories, which will suppress this warning, call:</span><br><span class="line">hint: </span><br><span class="line">hint:   git config --global init.defaultBranch &lt;name&gt;</span><br><span class="line">hint: </span><br><span class="line">hint: Names commonly chosen instead of &apos;master&apos; are &apos;main&apos;, &apos;trunk&apos; and</span><br><span class="line">hint: &apos;development&apos;. The just-created branch can be renamed via this command:</span><br><span class="line">hint: </span><br><span class="line">hint:   git branch -m &lt;name&gt;</span><br></pre></td></tr></table></figure><p>解决方法</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global init.defaultBranch master</span><br></pre></td></tr></table></figure><h4 id="GitLab-CI-文件详解"><a href="#GitLab-CI-文件详解" class="headerlink" title="GitLab-CI 文件详解"></a>GitLab-CI 文件详解</h4><table><thead><tr><th>关键字</th><th>是否必须</th><th>描述</th></tr></thead><tbody><tr><td>variables</td><td>非必须</td><td>在job级别上定义的变量</td></tr><tr><td>before_script</td><td>非必须</td><td>提前执行的脚本</td></tr><tr><td>stages</td><td>必须</td><td>指定一组job在不同场景阶段执行。在相同<strong>stage</strong>下的job(任务)将会被<strong>并行的</strong>执行</td></tr><tr><td>job-name</td><td>必须</td><td>流水线的任务的名称</td></tr><tr><td>stage</td><td>必须</td><td>与stages内的场景阶段对应</td></tr><tr><td>tags</td><td>非必须</td><td>定义了哪些runner适用该job</td></tr><tr><td>only</td><td>非必须</td><td>定义哪些git引用（分支）适用该job</td></tr><tr><td>except</td><td>非必须</td><td>定义了哪些git引用(分支)不适用该job</td></tr><tr><td>script</td><td>必须</td><td>定义Runner需要执行的脚本或命令</td></tr><tr><td>artifacts</td><td>非必须</td><td>产物,通过paths指定文件后,可在gitlab页面下载改产物</td></tr><tr><td>after_script</td><td>非必须</td><td>后执行的脚本</td></tr><tr><td>environment</td><td>非必须</td><td>定义让job完成部署的环境名称</td></tr></tbody></table><p><strong>only</strong>和<strong>except</strong>两个参数说明了job什么时候将会被创建:</p><ol><li><strong>only</strong>定义了job需要执行的所在分支或者标签</li><li><strong>except</strong>定义了job不会执行的所在分支或者标签</li></ol><p>以下是这两个参数的几条用法规则：</p><ol><li><strong>only</strong>和<strong>except</strong>如果都存在在一个job声明中，则所需引用将会被<strong>only</strong>和<strong>except</strong>所定义的分支过滤.</li><li><strong>only</strong>和<strong>except</strong>允许使用正则</li><li><strong>only</strong>和<strong>except</strong>允许使用指定仓库地址，但是不forks仓库</li></ol><p>此外，<strong>only</strong>和<strong>except</strong>允许使用以下一些特殊关键字：</p><table><thead><tr><th align="center">值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">branches</td><td align="center">当一个分支被push上来</td></tr><tr><td align="center">tags</td><td align="center">当一个打了tag的分支被push上来</td></tr><tr><td align="center">api</td><td align="center">当一个pipline被piplines api所触发调起，详见<a href="https://link.segmentfault.com/?url=https%3A%2F%2Fdocs.gitlab.com%2Fce%2Fapi%2Fpipelines.html" target="_blank" rel="noopener">piplines api</a></td></tr><tr><td align="center">external</td><td align="center">当使用了GitLab以外的CI服务</td></tr><tr><td align="center">pipelines</td><td align="center">针对多项目触发器而言，当使用CI_JOB_TOKEN并使用gitlab所提供的api创建多个pipelines的时候</td></tr><tr><td align="center">pushes</td><td align="center">当pipeline被用户的git push操作所触发的时候</td></tr><tr><td align="center">schedules</td><td align="center">针对预定好的pipline而言（每日构建一类~，具体请看<a href="https://link.segmentfault.com/?url=https%3A%2F%2Fdocs.gitlab.com%2Fce%2Fuser%2Fproject%2Fpipelines%2Fschedules.html" target="_blank" rel="noopener">链接</a>）</td></tr><tr><td align="center">triggers</td><td align="center">用token创建piplines的时候</td></tr><tr><td align="center">web</td><td align="center">在GitLab页面上Pipelines标签页下，你按了<strong>run pipline</strong>的时候</td></tr></tbody></table><p>下面的例子，<strong>job</strong>将会只在<strong>issue-</strong>开头的refs下执行，反之则其他所有分支被跳过：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">job:</span><br><span class="line">  <span class="comment"># use regexp</span></span><br><span class="line">  only:</span><br><span class="line">    - /^issue-.*$/</span><br><span class="line">  <span class="comment"># use special keyword</span></span><br><span class="line">  except:</span><br><span class="line">    - branches</span><br></pre></td></tr></table></figure><p>在这个例子中，<strong>job</strong>只会在打了tag的分支，或者被api所触发，或者每日构建任务上运行，</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">job:</span><br><span class="line">  <span class="comment"># use special keywords</span></span><br><span class="line">  only:</span><br><span class="line">    - tags</span><br><span class="line">    - triggers</span><br><span class="line">    - schedules</span><br></pre></td></tr></table></figure><p>Git Strategy（git策略）</p><p>你可以通过在全局变量设置位置或者job局部变量设置位置来设置<strong>GIT_STRATEGY</strong>用以获取应用最近更新的代码。如果没有指定，默认的项目设置将会被使用。</p><p>该选项有三个可能的值：clone,fetch和none</p><p>clone是最慢的选项，如果设置该值，每个job将会都克隆一遍仓库，确保项目工作空间总是原始的正确的。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">variables:</span><br><span class="line">  GIT_STRATEGY: <span class="built_in">clone</span></span><br></pre></td></tr></table></figure><p>fetch是更快的操作选项，因为他重用了项目的工作空间（如果没有的话，会去clone）, git clean用于撤销上一个job的任何操作，git fetch是用来重新获取上一个job运行到当前job产生的commit</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">variables:</span><br><span class="line">  GIT_STRATEGY: fetch</span><br></pre></td></tr></table></figure><p>none也同样重用了项目空间（但是他会跳过所有git操作，包括如果存在的gitlab runner的预克隆脚本）。其主要用于只是为了操作artifacts的job上（例如depoly部署行为）。此时Git仓库的数据可能是存在的，但它一定不是最新的。所以在设置了none的job里你应该依赖从cache或者artifacts来的数据，而不是仓库数据。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">variables:</span><br><span class="line">  GIT_STRATEGY: none</span><br></pre></td></tr></table></figure><p>Shallow cloning (浅克隆)</p><p>抓取或者克隆最新三条commits:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">variables:</span><br><span class="line">  GIT_DEPTH: <span class="string">"3"</span></span><br></pre></td></tr></table></figure><p>查看流水线阶段完成情况</p><img src="https://nmk0718.github.io/image/image-20210830152017883.png"><p>查看每个阶段的运行日志</p><img src="https://nmk0718.github.io/image/image-20210830152103621.png"><p>下载yml中定义的产物</p><img src="https://nmk0718.github.io/image/image-20210830152157654.png"><p>后续可深入了解 gitlab集成Kubernetes,Prometheus和Grafana.可在gitlab查看部署情况,查看Kubernetes日志,审核是否发布等操作</p><h4 id="备份gitlab"><a href="#备份gitlab" class="headerlink" title="备份gitlab"></a>备份gitlab</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@iZ2zeaxvb40ng4w24tpogoZ file]# crontab -l</span><br><span class="line">0 0 */3 * * sh /file/backup.sh</span><br><span class="line"></span><br><span class="line">[root@iZ2zeaxvb40ng4w24tpogoZ file]# cat /file/gitlab/push_aliyun.sh   </span><br><span class="line">docker commit -m &quot;gitlab&quot; 5f36554b62b3 registry-vpc.cn-beijing.aliyuncs.com/lepeng/gitlab:`date +%F`</span><br><span class="line">docker push registry-vpc.cn-beijing.aliyuncs.com/lepeng/gitlab:`date +%F`</span><br><span class="line"></span><br><span class="line">[root@iZ2zeaxvb40ng4w24tpogoZ file]# cat /file/backup.sh</span><br><span class="line">cd /file/</span><br><span class="line">tar zcvf gitlabconfig`date +%F`.tar config</span><br><span class="line">tar zcvf gitlabdata`date +%F`.tar data</span><br><span class="line">mv *.tar /data1/gitlab/backup/</span><br></pre></td></tr></table></figure><h4 id="gitlab配置ldap"><a href="#gitlab配置ldap" class="headerlink" title="gitlab配置ldap"></a>gitlab配置ldap</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim /file/config/gitlab.rb</span><br><span class="line">gitlab_rails[&apos;ldap_enabled&apos;] = true</span><br><span class="line">gitlab_rails[&apos;ldap_servers&apos;] = YAML.load &lt;&lt;-&apos;EOS&apos;</span><br><span class="line">   main: # &apos;main&apos; is the GitLab &apos;provider ID&apos; of this LDAP server</span><br><span class="line">     label: &apos;LDAP&apos;</span><br><span class="line">     host: &apos;39.107.142.154&apos;</span><br><span class="line">     port: 389</span><br><span class="line">     uid: &apos;cn&apos;</span><br><span class="line">     bind_dn: &apos;cn=admin,dc=gzlplink,dc=com&apos;</span><br><span class="line">     password: &apos;Lpldap123456&apos;</span><br><span class="line">     encryption: &apos;plain&apos; # &quot;start_tls&quot; or &quot;simple_tls&quot; or &quot;plain&quot;</span><br><span class="line">     verify_certificates: true</span><br><span class="line">     active_directory: true</span><br><span class="line">     #邮箱 用户名均可登录</span><br><span class="line">     allow_username_or_email_login: true</span><br><span class="line">     lowercase_usernames: false</span><br><span class="line">     #不允许用户注册</span><br><span class="line">     block_auto_created_users: false</span><br><span class="line">     base: &apos;ou=研发部,cn=admin,dc=gzlplink,dc=com&apos;</span><br><span class="line">     user_filter: &apos;&apos;</span><br><span class="line">     attributes:</span><br><span class="line">       username: [&apos;cn&apos;]</span><br><span class="line">       email:    [&apos;mail&apos;]</span><br><span class="line">       name:     &apos;description&apos;</span><br><span class="line">       first_name: &apos;givenName&apos;</span><br><span class="line">       last_name:  &apos;sn&apos;</span><br><span class="line">EOS</span><br></pre></td></tr></table></figure><ul><li><code>host</code> 和 <code>port</code> 是 LDAP 服务的主机地址及端口</li><li><code>bind_dn</code> 和 <code>password</code> 是一个管理 LDAP 的 dn 及密码</li><li><code>base</code> 表示 LDAP 将以该 dn 为 节点，向下查找用户</li><li><code>user_filter</code> 表示以某种过滤条件筛选用户，比如假设我们只希望所属组为 Developers 的用户来访问 GitLab，则可以在这里设置 <code>(memberOf=cn=Developers,cn=Groups,dc=xinhua,dc=org)</code></li><li><code>attributes</code> 表示 GitLab 中的字段与 LDAP 中哪些字段可以相互对应，比如可以用 LDAP 中的 <code>uid</code> 来作为 GitLab 用户名</li></ul><p>配置修改完成之后，运行下面命令重启 GitLab 服务：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure><img src="\image\20180726164123668.png"><p><strong>开启 HTTPS</strong></p><p>GitLab 默认没有开启 HTTPS，如果需要开启的话，需要按照下面的步骤执行：</p><p>首先，在配置文件 <code>/etc/gitlab/gitlab.rb</code> 中将下面一行中的协议由 HTTP 改成 HTTPS，并设置从 HTTP 到 HTTPS 的重定向：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">external_url &quot;https://gitlab.example.com&quot;</span><br><span class="line"></span><br><span class="line"># Redirect HTTP requests to HTTPS</span><br><span class="line">nginx[&apos;redirect_http_to_https&apos;] = true</span><br></pre></td></tr></table></figure><p>然后创建一个 SSL 目录，并将网站证书导入进去：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># mkdir -p /etc/gitlab/ssl</span><br><span class="line"># chmod 700 /etc/gitlab/ssl</span><br><span class="line"># cp gitlab.xinhua.io.key gitlab.xinhua.io.crt /etc/gitlab/ssl/</span><br></pre></td></tr></table></figure><p>注意上面的证书必须以配置中的域名（如本文中的 <code>gitlab.xinhua.io</code>）为其文件名。</p><p>最后再执行 <code>gitlab-ctl reconfigure</code> 命令，即可通过 HTTPS 方式访问 GitLab 了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;GitLab-CI-CD&quot;&gt;&lt;a href=&quot;#GitLab-CI-CD&quot; class=&quot;headerlink&quot; title=&quot;GitLab CI/CD&quot;&gt;&lt;/a&gt;GitLab CI/CD&lt;/h3&gt;&lt;h4 id=&quot;使用docker下载gitlab镜像&quot;&gt;&lt;a hr</summary>
      
    
    
    
    
    <category term="GitLab" scheme="https://nmk0718.github.io/tag/GitLab/"/>
    
  </entry>
  
  <entry>
    <title>数据库备份与恢复</title>
    <link href="https://nmk0718.github.io/2021/03/27/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%87%E4%BB%BD%E4%B8%8E%E6%81%A2%E5%A4%8D/"/>
    <id>https://nmk0718.github.io/2021/03/27/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%87%E4%BB%BD%E4%B8%8E%E6%81%A2%E5%A4%8D/</id>
    <published>2021-03-27T07:20:00.000Z</published>
    <updated>2024-11-29T06:42:44.615Z</updated>
    
    <content type="html"><![CDATA[<h4 id="备份Mysql"><a href="#备份Mysql" class="headerlink" title="备份Mysql"></a>备份Mysql</h4><p>创建备份文件夹</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir -p /data/mysqlbackup/</span><br></pre></td></tr></table></figure><p>创建备份的脚本</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@prod-ghospital mysqlbackup]# cat backup.sh </span><br><span class="line">#!/bin/bash</span><br><span class="line">mysqldump -upraise -pAf9Ed1Bb827b.4@9eB=&#123;9c4f --all-databases &gt;/data/mysqlbackup/praise-`date &quot;+%y-%m-%d&quot;`.sql</span><br><span class="line">mysqldump -umessage -p4666dd3a@79.d24=9cD&#123;b382 --all-databases &gt;/data/mysqlbackup/message-`date &quot;+%y-%m-%d&quot;`.sql</span><br><span class="line">mysqldump -uvideo -pDd0&#123;A9e2026c=94d13b@.62f --all-databases &gt;/data/mysqlbackup/video-`date &quot;+%y-%m-%d&quot;`.sql</span><br><span class="line">mysqldump --single-transaction -unethospital -p97@9EbeA7.=1Fb04&#123;e87998d --all-databases &gt;/data/mysqlbackup/nethospital-`date &quot;+%y-%m-%d&quot;`.sql</span><br><span class="line">mysqldump -uhospunion -p76984a&#125;74aE964e69b4Ce31,.ff&#123;2f02 --all-databases &gt;/data/mysqlbackup/hospunion-`date &quot;+%y-%m-%d&quot;`.sql</span><br><span class="line">find /data/mysqlbackup -type f -name &quot;*.sql&quot; -mtime +7 -exec rm -rf &#123;&#125; \;</span><br></pre></td></tr></table></figure><p>加入定时任务</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@prod-ghospital mysqlbackup]# crontab -l</span><br><span class="line">*/10 1 * * * /bin/sh /data/mysqlbackup/backup.sh</span><br></pre></td></tr></table></figure><p>备份公众号数据库</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysqldump -ucdh -pCDH360lj#com2019 -h139.159.192.185 --all-databases &gt;/home/mysql.sql</span><br></pre></td></tr></table></figure><h4 id="备份Postgresql"><a href="#备份Postgresql" class="headerlink" title="备份Postgresql"></a>备份Postgresql</h4><p>更改为postgres用户</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">su postgres</span><br></pre></td></tr></table></figure><p>创建备份文件夹</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bash-4.2$ cd /var/lib/pgsql/</span><br><span class="line">bash-4.2$ mkdir -p postgres/backups</span><br></pre></td></tr></table></figure><p>创建备份脚本</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bash-4.2$ cat backup.sh </span><br><span class="line">pg_dumpall &gt; ~/postgres/backups/pgbackup-`date &quot;+%Y-%m-%d&quot;`.bak</span><br><span class="line">find ~/postgres/backups/ -type f -name &quot;*.bak&quot; -mtime +7 -exec rm -rf &#123;&#125; \;</span><br></pre></td></tr></table></figure><p>加入定时任务</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bash-4.2$ crontab -l</span><br><span class="line">*/10 1 * * * /bin/sh ~/postgres/backups/backup.sh</span><br></pre></td></tr></table></figure><h4 id="备份sqlserver"><a href="#备份sqlserver" class="headerlink" title="备份sqlserver"></a>备份sqlserver</h4><p><strong>linux备份</strong></p><p>安装sqlcmd</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl https://packages.microsoft.com/config/rhel/8/prod.repo &gt; /etc/yum.repos.d/msprod.repo</span><br><span class="line">sudo yum install mssql-tools unixODBC-devel</span><br><span class="line">echo &apos;export PATH=&quot;$PATH:/opt/mssql-tools/bin&quot;&apos; &gt;&gt; ~/.bash_profile</span><br><span class="line">echo &apos;export PATH=&quot;$PATH:/opt/mssql-tools/bin&quot;&apos; &gt;&gt; ~/.bashrc</span><br><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure><p>备份</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#创建数据库备份文件夹 </span><br><span class="line">mkdir -p /data/sqlserverbackup</span><br><span class="line">#给mussql授予/data/sqlserverbackup文件夹的权限 </span><br><span class="line">chown -R mssql:mssql /data/sqlserverbackup </span><br><span class="line">#登录数据库 </span><br><span class="line">sqlcmd -S 127.0.0.1 -U sa</span><br><span class="line">#备份数据库到指定路径</span><br><span class="line">1&gt; backup database appauth to disk=&apos;/data/sqlserverbackup/appauth.bak&apos; </span><br><span class="line">2&gt; go</span><br></pre></td></tr></table></figure><p><strong>windows备份</strong></p><p>windows任务计划定时备份sqlserver数据库</p><p>在E盘下新建文件夹DBbackup，在DBbackup下创建一个sql的备份脚本，文件命名为dbback.sql</p><p>sql脚本如下:(DBname就是你所需要备份的数据库名)</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GO</span><br><span class="line"></span><br><span class="line">DECLARE</span><br><span class="line"></span><br><span class="line">@backuptime varchar(20)</span><br><span class="line"></span><br><span class="line">DECLARE</span><br><span class="line"></span><br><span class="line">@filename varchar(100)</span><br><span class="line"></span><br><span class="line">select @backuptime=(convert(varchar(8),getdate(),112)+replace(convert(varchar(5),getdate(),114),&apos;:&apos;,&apos; &apos;))</span><br><span class="line"></span><br><span class="line">select @filename=&apos;E:\DBbackup\db_&apos;+@backuptime+&apos;.bak&apos;</span><br><span class="line"></span><br><span class="line">backup database DBname to disk=@filename</span><br></pre></td></tr></table></figure><p>写一个批处理文件执行sql语句：</p><p>例如：backup_database.bat</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.bat文件内容为：sqlcmd -S . -i E:\DBbackup\dbback.sql</span><br></pre></td></tr></table></figure><p>.bat文件内的语句可以在cmd控制台执行测试是否正确；</p><p>可以使用winrar加入环境变量进行压缩</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set date_str=%date:~,4%%date:~5,2%%date:~8,2%</span><br><span class="line">set time_hh=%time:~0,2%</span><br><span class="line">if /i %time_hh% LSS 10 (set time_hh=0%time:~1,1%)</span><br><span class="line">set data_time_str=%date:~,4%%date:~5,2%%date:~8,2%_%time_hh%%time:~3,2%%time:~6,2%</span><br><span class="line">rar a db_%data_time_str%.rar -m5 -s -r *.bak</span><br></pre></td></tr></table></figure><p>在windows-控制面板-管理工具下，打开任务计划，创建基本任务，输入任务名称描述、设置备份时间、选择启动程序。需要注意的是在起始于选项里输入程序执行路径，完成。</p><img src="\image\bat.png" alt="bat" style="zoom: 50%;"><p>删除大于7天的备份</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">delete.bat</span><br><span class="line"></span><br><span class="line">@echo off&amp;setlocal enabledelayedexpansion</span><br><span class="line">pushd E:\DBbackup</span><br><span class="line">set n=0</span><br><span class="line">for /f &quot;delims=&quot; %%a in (&apos;dir /a-d-h /b /o-d shop_lepeng*.rar&apos;) do (</span><br><span class="line">if !n! geq 7  del &quot;%%~a&quot;</span><br><span class="line">set /a n+=1 </span><br><span class="line">)</span><br><span class="line">popd</span><br></pre></td></tr></table></figure><h4 id="备份mongodb"><a href="#备份mongodb" class="headerlink" title="备份mongodb"></a>备份mongodb</h4><p>备份命令格式</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mongodump -h IP --port 端口 -u 用户名 -p 密码 -d 数据库 -o 文件</span><br></pre></td></tr></table></figure><p>无密码备份</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@database data]# mongodump -h 192.168.50.51 -d B2BMall -o /data/mongodbbackup/mongodbbackup-`date &quot;+%Y-%m-%d&quot;`</span><br><span class="line">2020-12-23T15:01:09.747+0800    writing B2BMall.VLoginToken to </span><br><span class="line">2020-12-23T15:01:09.747+0800    writing B2BMall.SmallProgramUserAccount to </span><br><span class="line">2020-12-23T15:01:09.748+0800    writing B2BMall.VLoginAccount to </span><br><span class="line">2020-12-23T15:01:09.759+0800    done dumping B2BMall.VLoginToken (3324 documents)</span><br><span class="line">2020-12-23T15:01:09.759+0800    done dumping B2BMall.SmallProgramUserAccount (18 documents)</span><br><span class="line">2020-12-23T15:01:09.761+0800    done dumping B2BMall.VLoginAccount (0 documents)</span><br><span class="line">[root@database mongodbbackup]# ll mongodbbackup-2020-12-23/B2BMall/</span><br><span class="line">SmallProgramUserAccount.bson           VLoginAccount.bson                     VLoginToken.bson                       </span><br><span class="line">SmallProgramUserAccount.metadata.json  VLoginAccount.metadata.json            VLoginToken.metadata.json</span><br></pre></td></tr></table></figure><h4 id="恢复Mysql"><a href="#恢复Mysql" class="headerlink" title="恢复Mysql"></a>恢复Mysql</h4><p>安装mysql</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget https://repo.mysql.com/mysql80-community-release-el7-3.noarch.rpm</span><br><span class="line">rpm -ivh mysql80-community-release-el7-3.noarch.rpm</span><br><span class="line">yum-config-manager --disable mysql80-community</span><br><span class="line">yum-config-manager --enable mysql57-community</span><br><span class="line">#如不能使用使用yum-config-manager请使用yum -y install yum-utils</span><br><span class="line">yum install mysql-community-server</span><br><span class="line">yum -y install mysql-devel</span><br></pre></td></tr></table></figure><p>启动mysql</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@dev-database ~]# systemctl start mysqld</span><br></pre></td></tr></table></figure><p>查看临时密码</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@dev-database ~]# grep &quot;temporary password&quot; /var/log/mysqld.log</span><br><span class="line">2020-10-27T08:30:11.011852Z 1 [Note] A temporary password is generated for root@localhost: iEOu+Tz47m-)</span><br></pre></td></tr></table></figure><p>登录mysql</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@dev-database ~]# mysql -u root -p</span><br><span class="line">Enter password: </span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 5</span><br><span class="line">Server version: 5.7.32</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2020, Oracle and/or its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement.</span><br><span class="line"></span><br><span class="line">mysql&gt; ALTER USER USER() IDENTIFIED BY &apos;Liangjian@360&apos;;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; grant all privileges on *.* to &apos;root&apos;@&apos;%&apos; identified by &apos;Liangjian@360&apos;;</span><br><span class="line">Query OK, 0 rows affected, 1 warning (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; flush privileges;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure><p>创建用户</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE USER &apos;hospitalTest&apos;@&apos;%&apos; IDENTIFIED BY &apos;Liangjian123360@8899&apos;;</span><br></pre></td></tr></table></figure><p>授权</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GRANT ALL ON *.* TO &apos;hospitalTest&apos;@&apos;%&apos;;</span><br></pre></td></tr></table></figure><p>恢复数据库</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql -uhospitalTest -pLiangjian123360@8899</span><br><span class="line">CREATE DATABASE hospunion;</span><br><span class="line">use hospunion;</span><br><span class="line">source /home/hospunion-20-10-27.sql</span><br></pre></td></tr></table></figure><h5 id="恢复单个库"><a href="#恢复单个库" class="headerlink" title="恢复单个库"></a>恢复单个库</h5><p>方法一:</p><p>从全备中直接导入单个库 </p><p>格式：mysql -u用户 -p密码 单个数据库名  –one-database &lt; 全备的sql文件</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p&apos;nmk@0718&apos;  test  -o  &lt; databases-2022-07-08.sql</span><br></pre></td></tr></table></figure><p>方法二:</p><p>从全备中直接导出库数据到新的sql文件</p><p>格式：sed -n ‘/^– Current Database: <code>表名</code>/,/^– Current Database: `/p’  全备sql文件 &gt; 新sql文件</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sed -n &apos;/^-- Current Database: `test`/,/^-- Current Database: `/p&apos; databases-2022-07-08.sql &gt; test.sql</span><br></pre></td></tr></table></figure><p>将提取出的新的sql数据导入数据库</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p&apos;nmk@0718&apos;  &lt; test.sql</span><br></pre></td></tr></table></figure><h5 id="恢复单个表"><a href="#恢复单个表" class="headerlink" title="恢复单个表"></a>恢复单个表</h5><p>方法一:</p><p>从全备份中导出该表的建表语句到新的sql文件中</p><p>格式：sed -e’/./{H;$!d;}’ -e ‘x;/CREATE TABLE <code>表名</code>/!d;q’  全备sql文件 &gt; 新sql文件</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sed -e&apos;/./&#123;H;$!d;&#125;&apos; -e &apos;x;/CREATE TABLE `test`/!d;q&apos; databases-2022-07-08.sql &gt; test.sql</span><br></pre></td></tr></table></figure><p>从全备份中导出该表的insert into语句追加到上一个sql文件中</p><p>格式：grep -i ‘INSERT INTO <code>表名</code>‘  全备sql文件 &gt;&gt; 含建表语句的sql文件</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grep -i &apos;INSERT INTO `test`&apos; databases-2022-07-08.sql &gt;&gt; test.sql</span><br></pre></td></tr></table></figure><p>导入到对应的库中</p><p>格式：<br>use 对应的库名；<br>source 导出的sql文件；</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use test;</span><br><span class="line">source /root/test.sql;</span><br></pre></td></tr></table></figure><p>mysql问题</p><p><strong>ERROR 1805 (HY000): Column count of mysql.user is wrong. Expected 45, found 43. The table is probabl</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; create user &apos;turn123&apos;@&apos;localhost&apos; identified by &apos;abc123&apos;; </span><br><span class="line">ERROR 1805 (HY000): Column count of mysql.user is wrong. Expected 45, found 43. The table is probably corrupted</span><br></pre></td></tr></table></figure><p>解决</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/usr/bin/mysql_upgrade -uroot -p -S /var/lib/mysql/mysql.sock</span><br><span class="line">不能本地登录使用/usr/bin/mysql_upgrade -S /var/lib/mysql/mysql.sock</span><br></pre></td></tr></table></figure><h4 id="恢复Postgresql"><a href="#恢复Postgresql" class="headerlink" title="恢复Postgresql"></a>恢复Postgresql</h4><p>安装postgresql</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install -y https://download.postgresql.org/pub/repos/yum/reporpms/EL-7-x86_64/pgdg-redhat-repo-latest.noarch.rpm</span><br><span class="line">yum install -y postgresql12-server</span><br><span class="line">/usr/pgsql-12/bin/postgresql-12-setup initdb</span><br><span class="line">systemctl enable postgresql-12</span><br><span class="line">systemctl start postgresql-12</span><br></pre></td></tr></table></figure><p>切换至postgres用户</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">su postgres</span><br></pre></td></tr></table></figure><p>连接数据库</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">psql</span><br></pre></td></tr></table></figure><p>修改密码</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">postgres=# ALTER ROLE postgres WITH PASSWORD &apos;Liangjian@360&apos;;</span><br><span class="line">ALTER ROLE</span><br></pre></td></tr></table></figure><p>将认证方式修改为密码认证，打开</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/var/lib/pgsql/12/data/pg_hba.conf</span><br><span class="line"></span><br><span class="line">更改为以下配置</span><br><span class="line"># TYPE  DATABASE        USER            ADDRESS                 METHOD</span><br><span class="line"></span><br><span class="line"># &quot;local&quot; is for Unix domain socket connections only</span><br><span class="line">local   all             all                                     peer</span><br><span class="line"># IPv4 local connections:</span><br><span class="line">host    all             all             127.0.0.1/32            ident</span><br><span class="line"># IPv6 local connections:</span><br><span class="line">host    all             all             ::1/128                 ident</span><br><span class="line"># Allow replication connections from localhost, by a user with the</span><br><span class="line"># replication privilege.</span><br><span class="line">#local   replication     all                                     peer</span><br><span class="line">#host    replication     all             127.0.0.1/32            ident</span><br><span class="line">#host    replication     all             ::1/128                 ident</span><br><span class="line">host    all             all             0.0.0.0/0              md5</span><br></pre></td></tr></table></figure><p>开放远程连接</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/var/lib/pgsql/12/data/postgresql.conf </span><br><span class="line"></span><br><span class="line">加入以下配置</span><br><span class="line">listen_addresses = &apos;*&apos;</span><br></pre></td></tr></table></figure><p>重载配置</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">postgres=# SELECT pg_reload_conf();</span><br><span class="line"> pg_reload_conf </span><br><span class="line">----------------</span><br><span class="line"> t</span><br><span class="line">(1 row)</span><br></pre></td></tr></table></figure><p>连接数据库</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">psql -U postgres -W</span><br></pre></td></tr></table></figure><p>创建数据库</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">createdb dbname</span><br></pre></td></tr></table></figure><p>删除数据库</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dropdb dbname</span><br></pre></td></tr></table></figure><p>恢复数据库</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">psql -U postgres -f pgbackup-2020-10-27.bak</span><br></pre></td></tr></table></figure><p>数据库恢复完,postgres远程连接密码会默认变为生产数据库密码,需要手动进行修改才可远程连接,本地连接密码不变</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter user postgres with password &apos;Liangjian@360&apos;;</span><br></pre></td></tr></table></figure><h4 id="恢复sqlserver"><a href="#恢复sqlserver" class="headerlink" title="恢复sqlserver"></a>恢复sqlserver</h4><p>下载sql server的源，便于通过yum命令来安装</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@dev-database home]# curl https://packages.microsoft.com/config/rhel/7/mssql-server-2017.repo &gt; /etc/yum.repos.d/mssql-server.repo</span><br><span class="line">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class="line">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class="line">100   232  100   232    0     0    153      0  0:00:01  0:00:01 --:--:--   153</span><br><span class="line">[root@dev-database home]# cat /etc/yum.repos.d/mssql-server.repo</span><br><span class="line">[packages-microsoft-com-mssql-server-2017]</span><br><span class="line">name=packages-microsoft-com-mssql-server-2017</span><br><span class="line">baseurl=https://packages.microsoft.com/rhel/7/mssql-server-2017/</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://packages.microsoft.com/keys/microsoft.asc</span><br></pre></td></tr></table></figure><p>安装</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install -y mssql-server</span><br></pre></td></tr></table></figure><p>配置</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@dev-database home]# /opt/mssql/bin/mssql-conf setup</span><br><span class="line">Choose an edition of SQL Server:</span><br><span class="line">  1) Evaluation (free, no production use rights, 180-day limit)</span><br><span class="line">  2) Developer (free, no production use rights)</span><br><span class="line">  3) Express (free)</span><br><span class="line">  4) Web (PAID)</span><br><span class="line">  5) Standard (PAID)</span><br><span class="line">  6) Enterprise (PAID)</span><br><span class="line">  7) Enterprise Core (PAID)</span><br><span class="line">  8) I bought a license through a retail sales channel and have a product key to enter.</span><br><span class="line"></span><br><span class="line">Details about editions can be found at</span><br><span class="line">https://go.microsoft.com/fwlink/?LinkId=852748&amp;clcid=0x409</span><br><span class="line"></span><br><span class="line">Use of PAID editions of this software requires separate licensing through a</span><br><span class="line">Microsoft Volume Licensing program.</span><br><span class="line">By choosing a PAID edition, you are verifying that you have the appropriate</span><br><span class="line">number of licenses in place to install and run this software.</span><br><span class="line"></span><br><span class="line">Enter your edition(1-8): 2</span><br><span class="line">The license terms for this product can be found in</span><br><span class="line">/usr/share/doc/mssql-server or downloaded from:</span><br><span class="line">https://go.microsoft.com/fwlink/?LinkId=855862&amp;clcid=0x409</span><br><span class="line"></span><br><span class="line">The privacy statement can be viewed at:</span><br><span class="line">https://go.microsoft.com/fwlink/?LinkId=853010&amp;clcid=0x409</span><br><span class="line"></span><br><span class="line">Do you accept the license terms? [Yes/No]:</span><br><span class="line">yes</span><br><span class="line"></span><br><span class="line">Enter the SQL Server system administrator password: </span><br><span class="line">Confirm the SQL Server system administrator password: </span><br><span class="line">Configuring SQL Server...</span><br><span class="line"></span><br><span class="line">ForceFlush is enabled for this instance. </span><br><span class="line">ForceFlush feature is enabled for log durability.</span><br><span class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/mssql-server.service to /usr/lib/systemd/system/mssql-server.service.</span><br><span class="line">Setup has completed successfully. SQL Server is now starting.</span><br></pre></td></tr></table></figure><p>查看状态</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@dev-database home]# systemctl status mssql-server</span><br><span class="line">● mssql-server.service - Microsoft SQL Server Database Engine</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/mssql-server.service; enabled; vendor preset: disabled)</span><br><span class="line">   Active: active (running) since Sun 2021-01-31 16:30:10 CST; 28s ago</span><br><span class="line">     Docs: https://docs.microsoft.com/en-us/sql/linux</span><br><span class="line"> Main PID: 34727 (sqlservr)</span><br><span class="line">   CGroup: /system.slice/mssql-server.service</span><br><span class="line">           ├─34727 /opt/mssql/bin/sqlservr</span><br><span class="line">           └─34747 /opt/mssql/bin/sqlservr</span><br><span class="line"></span><br><span class="line">Jan 31 16:30:15 dev-database sqlservr[34727]: 2021-01-31 16:30:15.47 spid19s     SQL Server is now ready for client connections. This is an informational message; no user action is required.</span><br><span class="line">Jan 31 16:30:15 dev-database sqlservr[34727]: 2021-01-31 16:30:15.48 spid8s      0 transactions rolled back in database &apos;msdb&apos; (4:0). This is an informational message only. No user action is required.</span><br><span class="line">Jan 31 16:30:15 dev-database sqlservr[34727]: 2021-01-31 16:30:15.51 spid11s     Polybase feature disabled.</span><br><span class="line">Jan 31 16:30:15 dev-database sqlservr[34727]: 2021-01-31 16:30:15.51 spid11s     Clearing tempdb database.</span><br><span class="line">Jan 31 16:30:15 dev-database sqlservr[34727]: 2021-01-31 16:30:15.87 spid11s     Starting up database &apos;tempdb&apos;.</span><br><span class="line">Jan 31 16:30:16 dev-database sqlservr[34727]: 2021-01-31 16:30:16.06 spid11s     The tempdb database has 1 data file(s).</span><br><span class="line">Jan 31 16:30:16 dev-database sqlservr[34727]: 2021-01-31 16:30:16.08 spid22s     The Service Broker endpoint is in disabled or stopped state.</span><br><span class="line">Jan 31 16:30:16 dev-database sqlservr[34727]: 2021-01-31 16:30:16.09 spid22s     The Database Mirroring endpoint is in disabled or stopped state.</span><br><span class="line">Jan 31 16:30:16 dev-database sqlservr[34727]: 2021-01-31 16:30:16.11 spid22s     Service Broker manager has started.</span><br><span class="line">Jan 31 16:30:16 dev-database sqlservr[34727]: 2021-01-31 16:30:16.11 spid8s      Recovery is complete. This is an informational message only. No user action is required.</span><br></pre></td></tr></table></figure><p>开机启动</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo systemctl enable mssql-server</span><br></pre></td></tr></table></figure><p>连接sqlserver</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install -y mssql-tools unixODBC-devel</span><br><span class="line"></span><br><span class="line">echo &quot;export PATH=$PATH:/opt/mssql-tools/bin&quot; &gt;&gt; /etc/profile</span><br><span class="line"></span><br><span class="line">[root@dev-database home]# sqlcmd -S localhost -U sa</span><br><span class="line">Password: </span><br><span class="line">1&gt; select db_name();</span><br><span class="line">2&gt; go</span><br><span class="line">                                                                                                                                </span><br><span class="line">--------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line">master                                                                                                                          </span><br><span class="line"></span><br><span class="line">(1 rows affected)</span><br><span class="line">1&gt;</span><br></pre></td></tr></table></figure><p>还原数据库<br><img src="\image\image-20210131165156539.png"><br><img src="\image\image-20210131165233729.png"><br><img src="\image\image-20210131165242088.png"></p><h4 id="恢复mongdb"><a href="#恢复mongdb" class="headerlink" title="恢复mongdb"></a>恢复mongdb</h4><p><strong>配置系统yum源</strong></p><ul><li><p>创建.repo文件，生成mongodb的源</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi /etc/yum.repos.d/mongodb-org-4.0.repo</span><br></pre></td></tr></table></figure></li><li><p>添加以下配置信息：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[mongodb-org-4.0]</span><br><span class="line">name=MongoDB Repository</span><br><span class="line">baseurl=https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/4.0/x86_64/</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line">gpgkey=https://www.mongodb.org/static/pgp/server-4.0.asc</span><br></pre></td></tr></table></figure></li><li><p>安装MongoDB</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install -y mongodb-org</span><br></pre></td></tr></table></figure></li><li><p>启动MongoDB</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl start mongod.service</span><br></pre></td></tr></table></figure></li><li><p>MongoDB默认端口是27017，查看是否开启</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">netstat -natp | grep 27017</span><br></pre></td></tr></table></figure></li><li><p>验证服务开启</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mongo</span><br></pre></td></tr></table></figure></li><li><p>远程连接Mongodb</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi /etc/mongod.conf</span><br><span class="line"></span><br><span class="line"># network interfaces</span><br><span class="line">net:</span><br><span class="line">  port: 27017</span><br><span class="line">  bindIp: 0.0.0.0  # Enter 0.0.0.0,:: to bind to all IPv4 and IPv6 addresses or, alternatively, use the net.bindIpAll setting.</span><br><span class="line">#修改绑定ip默认127.0.0.1只允许本地连接， 所以修改为bindIp:0.0.0.0</span><br></pre></td></tr></table></figure></li><li><p>重启mongodb服务</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">service mongod restart</span><br></pre></td></tr></table></figure></li></ul><h4 id="PostgreSQL-慢查询SQL语句跟踪"><a href="#PostgreSQL-慢查询SQL语句跟踪" class="headerlink" title="PostgreSQL 慢查询SQL语句跟踪"></a>PostgreSQL 慢查询SQL语句跟踪</h4><p>开启日志跟踪</p><p>进入postgresql的安装目录下修改配置文件</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd /var/lib/pgsql/12/data</span><br><span class="line">vi postgresql.conf </span><br><span class="line"></span><br><span class="line">logging_collector = on</span><br><span class="line">log_destination = &apos;stderr&apos;</span><br><span class="line">log_directory = &apos;log&apos;</span><br><span class="line">log_filename = &apos;postgresql-%Y-%m-%d_%H%M%S.log&apos;</span><br></pre></td></tr></table></figure><p>默认的跟踪日志记录在 data/log 中,例如:/var/lib/pgsql/12/data/log</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">log_rotation_age = 1440    #minute,多长时间创建新的文件记录日志。0 表示禁扩展。</span><br><span class="line">log_rotation_size = 10240    #kb,文件多大后创建新的文件记录日志。0 表示禁扩展。</span><br><span class="line">log_truncate_on_rotation = on #可重用同名日志文件</span><br></pre></td></tr></table></figure><p>需要跟踪SQL语句或者慢语句，得需要设置以下参数：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">log_statement = all    #需设置跟踪所有语句，否则只能跟踪出错信息</span><br><span class="line">log_min_duration_statement = 5000    #单位为毫秒,记录执行5秒及以上的SQL语句。</span><br></pre></td></tr></table></figure><p>postgresql.conf参数 配置</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">log_directory</span><br><span class="line">默认： log_directory = &apos;log&apos;</span><br><span class="line">决定存放数据库运行日志文件的目录。可以是绝对路径，也可是相对路径(相对于数据库文件所在的路径)</span><br><span class="line"></span><br><span class="line">log_filename:</span><br><span class="line">默认： log_filename = &apos;postgresql-%a.log&apos;</span><br><span class="line">数据库运行日志文件的名称。</span><br><span class="line">%Y、%m、%d、%H、%M和%S，分别表示年、月、日、小时、分和秒。</span><br><span class="line">没有指定时间信息，系统会自动在log_filename值的末尾加上文件创建时间戳作为文件名</span><br><span class="line"></span><br><span class="line">log_truncate_on_rotation</span><br><span class="line">默认： log_truncate_on_rotation = on</span><br><span class="line">系统在创建一个新的数据库运行日志文件时，如果发现存在一个同名的文件，当log_truncate_on_rotation的值是on时，系统覆盖这个同名文件。</span><br><span class="line">当log_truncate_on_rotation的值是off时，系统将重用这个同名文件，在它的末尾添加新的日志信息。</span><br><span class="line">要注意的是，只有在log_rotation_age非零时，系统才创建新的日志文件的情况下，才会覆盖同名的日志文件。</span><br><span class="line"></span><br><span class="line">log_rotation_age</span><br><span class="line">默认： log_rotation_age = 1d ，单位是分钟。</span><br><span class="line">日志轮询时间</span><br><span class="line">为0不是禁用该功能。</span><br><span class="line"></span><br><span class="line">log_rotation_size</span><br><span class="line">默认： log_rotation_size = 0 ， 单位是KB。</span><br><span class="line">日志轮询大小，当文件大小超过该值时进行切换。</span><br><span class="line">如果一个日志文件写入的数据量超过log_rotation_size的值，数据库将创建一个新的日志文件。</span><br><span class="line">为0表示禁用该功能。</span><br><span class="line"></span><br><span class="line">logfilemode</span><br><span class="line">默认： log_file_mode = 0600                   </span><br><span class="line">创建日志文件的权限</span><br><span class="line"></span><br><span class="line">log_min_duration_statement</span><br><span class="line">默认： log_min_duration_statement = -1</span><br><span class="line">只log执行时间大于设定值的语句，类似与慢查询</span><br><span class="line">0表示log所有语句；-1表示不log任何语句。</span><br><span class="line"></span><br><span class="line">log_duration</span><br><span class="line">默认： log_duration = off</span><br><span class="line">控制是否记录每个完成的SQL语句的执行时间。</span><br><span class="line">对于使用扩展协议与数据库通信的客户端，会记载Parse、Bind和Execute的执行时间。</span><br><span class="line"></span><br><span class="line">log_statement</span><br><span class="line">默认： log_statement = &apos;none&apos;                </span><br><span class="line">有效的取值是none、ddl、mod和all</span><br><span class="line">控制记录哪种SQL语句的执行信息。</span><br><span class="line">ddl包括所有数据定义语句，如CREATE、ALTER和DROP语句。</span><br><span class="line">mod包括所有ddl语句和更新数据的语句，例如INSERT、UPDATE、DELETE、TRUNCATE、 COPY FROM、PREPARE和 EXECUTE。</span><br><span class="line">All包括所有的语句。</span><br></pre></td></tr></table></figure><p>当 log_statement=all 和 log_min_duration_statement 同时设置时，将跟踪所有语句，忽略log_min_duration_statement 设置。所以需按情况设置其中一个或两个值。</p><p>加载配置</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select pg_reload_conf();</span><br><span class="line">show log_min_duration_statement;</span><br></pre></td></tr></table></figure><p>针对某个用户或者某数据库进行设置</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter database test set log_min_duration_statement=5000;</span><br></pre></td></tr></table></figure><p>捕获正在查询的慢SQL</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from pg_stat_activity where state&lt;&gt;&apos;idle&apos; and now()-query_start &gt; interval &apos;5 s&apos; order by query_start ;</span><br></pre></td></tr></table></figure><p>查看最大连接数</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show max_connections;</span><br></pre></td></tr></table></figure><p>查看连接数</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select count(1) from pg_stat_activity;</span><br></pre></td></tr></table></figure><p>参考链接:<a href="https://www.cnblogs.com/VicLiu/p/12017704.html" target="_blank" rel="noopener">https://www.cnblogs.com/VicLiu/p/12017704.html</a><br>                <a href="https://blog.csdn.net/liyingke112/article/details/84913510" target="_blank" rel="noopener">https://blog.csdn.net/liyingke112/article/details/84913510</a></p><h4 id="pgsql断开数据库连接"><a href="#pgsql断开数据库连接" class="headerlink" title="pgsql断开数据库连接"></a>pgsql断开数据库连接</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from pg_stat_activity</span><br><span class="line"></span><br><span class="line">SELECT </span><br><span class="line">    pg_terminate_backend(pid) </span><br><span class="line">FROM </span><br><span class="line">    pg_stat_activity </span><br><span class="line">WHERE </span><br><span class="line">    -- don&apos;t kill my own connection!</span><br><span class="line">    pid &lt;&gt; pg_backend_pid()</span><br><span class="line">    -- don&apos;t kill the connections to other databases</span><br><span class="line">    AND datname = &apos;databasename&apos;</span><br></pre></td></tr></table></figure><p>pgsql创建排序规则和字符分类为zh_CN.UTF-8的数据库</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE DATABASE ymall TEMPLATE template0 ENCODING UTF8 LC_COLLATE &apos;zh_CN.UTF-8&apos; LC_CTYPE &apos;zh_CN.UTF-8&apos;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;备份Mysql&quot;&gt;&lt;a href=&quot;#备份Mysql&quot; class=&quot;headerlink&quot; title=&quot;备份Mysql&quot;&gt;&lt;/a&gt;备份Mysql&lt;/h4&gt;&lt;p&gt;创建备份文件夹&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table</summary>
      
    
    
    
    
    <category term="database" scheme="https://nmk0718.github.io/tag/database/"/>
    
  </entry>
  
  <entry>
    <title>Prometheus</title>
    <link href="https://nmk0718.github.io/2021/03/27/Prometheus/"/>
    <id>https://nmk0718.github.io/2021/03/27/Prometheus/</id>
    <published>2021-03-27T07:16:00.000Z</published>
    <updated>2024-11-29T06:44:00.884Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是Prometheus"><a href="#什么是Prometheus" class="headerlink" title="什么是Prometheus?"></a>什么是Prometheus?</h2><p>Prometheus是由SoundCloud开发的开源监控报警系统和时序列数据库(TSDB)。Prometheus使用Go语言开发，是Google BorgMon监控系统的开源版本。<br>2016年由Google发起Linux基金会旗下的原生云基金会(Cloud Native Computing Foundation), 将Prometheus纳入其下第二大开源项目。<br>Prometheus目前在开源社区相当活跃。<br>Prometheus和Heapster(Heapster是K8S的一个子项目，用于获取集群的性能数据。)相比功能更完善、更全面。Prometheus性能也足够支撑上万台规模的集群。</p><h2 id="Prometheus的特点"><a href="#Prometheus的特点" class="headerlink" title="Prometheus的特点"></a>Prometheus的特点</h2><ul><li>多维度数据模型。</li><li>灵活的查询语言。</li><li>不依赖分布式存储，单个服务器节点是自主的。</li><li>通过基于HTTP的pull方式采集时序数据。</li><li>可以通过中间网关进行时序列数据推送。</li><li>通过服务发现或者静态配置来发现目标服务对象。</li><li>支持多种多样的图表和界面展示，比如Grafana等。</li></ul><p>官网地址：<a href="https://prometheus.io/" target="_blank" rel="noopener">https://prometheus.io/</a></p><h2 id="架构图"><a href="#架构图" class="headerlink" title="架构图"></a>架构图</h2><img src="\image\662544-20190308115806797-1750460125.png"><img src="\image\662544-20190308115354474-1478270204.png"><h2 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h2><p>Prometheus的基本原理是通过HTTP协议周期性抓取被监控组件的状态，任意组件只要提供对应的HTTP接口就可以接入监控。不需要任何SDK或者其他的集成过程。这样做非常适合做虚拟化环境监控系统，比如VM、Docker、Kubernetes等。输出被监控组件信息的HTTP接口被叫做exporter 。目前互联网公司常用的组件大部分都有exporter可以直接使用，比如Varnish、Haproxy、Nginx、MySQL、Linux系统信息(包括磁盘、内存、CPU、网络等等)。</p><h2 id="服务过程"><a href="#服务过程" class="headerlink" title="服务过程"></a>服务过程</h2><ul><li>Prometheus Daemon负责定时去目标上抓取metrics(指标)数据，每个抓取目标需要暴露一个http服务的接口给它定时抓取。Prometheus支持通过配置文件、文本文件、Zookeeper、Consul、DNS SRV Lookup等方式指定抓取目标。Prometheus采用PULL的方式进行监控，即服务器可以直接通过目标PULL数据或者间接地通过中间网关来Push数据。</li><li>Prometheus在本地存储抓取的所有数据，并通过一定规则进行清理和整理数据，并把得到的结果存储到新的时间序列中。</li><li>Prometheus通过PromQL和其他API可视化地展示收集的数据。Prometheus支持很多方式的图表可视化，例如Grafana、自带的Promdash以及自身提供的模版引擎等等。Prometheus还提供HTTP API的查询方式，自定义所需要的输出。</li><li>PushGateway支持Client主动推送metrics到PushGateway，而Prometheus只是定时去Gateway上抓取数据。</li><li>Alertmanager是独立于Prometheus的一个组件，可以支持Prometheus的查询语句，提供十分灵活的报警方式。</li></ul><h2 id="三大套件"><a href="#三大套件" class="headerlink" title="三大套件"></a>三大套件</h2><ul><li>Server 主要负责数据采集和存储，提供PromQL查询语言的支持。</li><li>Alertmanager 警告管理器，用来进行报警。</li><li>Push Gateway 支持临时性Job主动推送指标的中间网关。</li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h5 id="Prometheus"><a href="#Prometheus" class="headerlink" title="Prometheus"></a>Prometheus</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -LO https://github.com/prometheus/prometheus/releases/download/v2.23.0/prometheus-2.23.0.linux-amd64.tar.gz</span><br></pre></td></tr></table></figure><p>解压安装</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar zxvf prometheus-2.23.0.linux-amd64.tar.gz</span><br><span class="line">mv prometheus-2.23.0.linux-amd64 /opt/</span><br><span class="line">vi /usr/lib/systemd/system/prometheus.service</span><br><span class="line">[Unit]</span><br><span class="line">Description=Prometheus Monitoring System</span><br><span class="line">Documentation=Prometheus Monitoring System</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/opt/prometheus-2.23.0.linux-amd64/prometheus \</span><br><span class="line">  --config.file=/opt/prometheus-2.23.0.linux-amd64/prometheus.yml \</span><br><span class="line">  --web.listen-address=:9090</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>启动</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl start prometheus</span><br><span class="line">systemctl enable prometheus</span><br></pre></td></tr></table></figure><p>配置文件详解</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># my global config</span><br><span class="line">global:</span><br><span class="line">  scrape_interval:     15s # Set the scrape interval to every 15 seconds. Default is every 1 minute.</span><br><span class="line">  evaluation_interval: 15s # Evaluate rules every 15 seconds. The default is every 1 minute.</span><br><span class="line">  # scrape_timeout is set to the global default (10s).</span><br><span class="line"></span><br><span class="line"># Alertmanager configuration</span><br><span class="line">alerting:</span><br><span class="line">  alertmanagers:</span><br><span class="line">  - static_configs:</span><br><span class="line">    - targets:</span><br><span class="line">      # - alertmanager:9093</span><br><span class="line"></span><br><span class="line"># Load rules once and periodically evaluate them according to the global &apos;evaluation_interval&apos;.</span><br><span class="line">rule_files:</span><br><span class="line">  # - &quot;first_rules.yml&quot;</span><br><span class="line">  # - &quot;second_rules.yml&quot;</span><br><span class="line"></span><br><span class="line"># A scrape configuration containing exactly one endpoint to scrape:</span><br><span class="line"># Here it&apos;s Prometheus itself.</span><br><span class="line">scrape_configs:</span><br><span class="line">  # The job name is added as a label `job=&lt;job_name&gt;` to any timeseries scraped from this config.</span><br><span class="line">  - job_name: &apos;prometheus&apos;</span><br><span class="line">    # metrics_path defaults to &apos;/metrics&apos;</span><br><span class="line">    # scheme defaults to &apos;http&apos;.</span><br><span class="line">    static_configs:</span><br><span class="line">    - targets: [&apos;localhost:9090&apos;]</span><br></pre></td></tr></table></figure><ul><li>global： 此片段指定的是prometheus的全局配置， 比如采集间隔，抓取超时时间等。</li><li>scrape_interval: 抓取间隔,默认继承global值。</li><li>scrape_timeout: 抓取超时时间,默认继承global值。</li><li>rule_files： 此片段指定报警规则文件， prometheus根据这些规则信息，会推送报警信息到alertmanager中。</li><li>scrape_configs: 此片段指定抓取配置，prometheus的数据采集通过此片段配置。</li><li>alerting: 此片段指定报警配置， 这里主要是指定prometheus将报警规则推送到指定的alertmanager实例地址。</li><li>metric_path: 抓取路径， 默认是/metrics</li><li>scheme: 指定采集使用的协议，http或者https。</li><li>params: 指定url参数。</li><li>basic_auth: 指定认证信息。</li><li>*_sd_configs: 指定服务发现配置</li><li>static_configs: 静态指定服务job。</li><li>relabel_config: relabel设置。</li></ul><p>static_config示例</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scrape_configs:</span><br><span class="line">  - job_name: &apos;prometheus&apos;</span><br><span class="line">    static_configs:</span><br><span class="line">    - targets: [&apos;localhost:9090&apos;]</span><br><span class="line">  - job_name: &quot;node&quot;</span><br><span class="line">    static_configs:</span><br><span class="line">    - targets: [&apos;192.168.50.57:9100&apos;,&apos;192.168.50.58:9100&apos;,&apos;192.168.50.59:9100&apos;]</span><br></pre></td></tr></table></figure><p>file_sd_configs示例</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scrape_configs:</span><br><span class="line">  # The job name is added as a label `job=&lt;job_name&gt;` to any timeseries scraped from this config.</span><br><span class="line">  - job_name: &apos;prometheus&apos;</span><br><span class="line"></span><br><span class="line">    # metrics_path defaults to &apos;/metrics&apos;</span><br><span class="line">    # scheme defaults to &apos;http&apos;.</span><br><span class="line"></span><br><span class="line">    static_configs:</span><br><span class="line">    - targets: [&apos;localhost:9090&apos;]</span><br><span class="line">  - job_name: &quot;node&quot;</span><br><span class="line">    file_sd_configs:</span><br><span class="line">    - refresh_interval: 1m</span><br><span class="line">      files: </span><br><span class="line">      - &quot;/usr/local/prometheus/prometheus/conf/node*.yml&quot;</span><br><span class="line"></span><br><span class="line"># 独立文件配置如下</span><br><span class="line">cat conf/node-dis.conf</span><br><span class="line">- targets: [&apos;192.168.50.57:9100&apos;,&apos;192.168.50.58:9100&apos;,&apos;192.168.50.59:9100&apos;]</span><br><span class="line">  或者可以这样配置</span><br><span class="line">[root@node00 conf]# cat node-dis.yml </span><br><span class="line">- targets: </span><br><span class="line">  - &quot;192.168.100.10:20001&quot;</span><br><span class="line">  labels: </span><br><span class="line">    hostname: node00</span><br><span class="line">- targets: </span><br><span class="line">  - &quot;192.168.100.11:20001&quot;</span><br><span class="line">  labels: </span><br><span class="line">    hostname: node01</span><br><span class="line">- targets: </span><br><span class="line">  - &quot;192.168.100.12:20001&quot;</span><br><span class="line">  labels: </span><br><span class="line">    hostname: node02</span><br></pre></td></tr></table></figure><p>通过<code>file_fd_files</code> 配置后我们可以在不重启prometheus的前提下， 修改对应的采集文件(node_dis.yml), 在特定的时间内(refresh_interval),prometheus会完成配置信息的载入工作。</p><p>relabel_config示例</p><p>新标记是一个功能强大的工具，可以在目标的标签集被抓取之前重写它，每个采集配置可以配置多个重写标签设置，并按照配置的顺序来应用于每个目标的标签集。</p><p>目标重新标签之后，以__开头的标签将从标签集中删除的。</p><p><strong>relabel的action类型</strong></p><ul><li>replace: 对标签和标签值进行替换。</li><li>keep: 满足特定条件的实例进行采集，其他的不采集。</li><li>drop： 满足特定条件的实例不采集，其他的采集。</li><li>labeldrop： 对抓取的实例特定标签进行删除。</li><li>labelkeep： 对抓取的实例特定标签进行保留，其他标签删除。</li></ul><h6 id="replace"><a href="#replace" class="headerlink" title="replace"></a>replace</h6><p>原配置</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">global:</span><br><span class="line">  scrape_interval:     5s # Set the scrape interval to every 15 seconds. Default is every 1 minute.</span><br><span class="line">  evaluation_interval: 5s # Evaluate rules every 15 seconds. The default is every 1 minute.</span><br><span class="line">  </span><br><span class="line">alerting:</span><br><span class="line">  alertmanagers:</span><br><span class="line">  - static_configs:</span><br><span class="line">    - targets:</span><br><span class="line">      - localhost:9093</span><br><span class="line">      </span><br><span class="line">rule_files:</span><br><span class="line">  - &quot;/opt/prometheus-2.23.0.linux-amd64/rule.yml&quot;</span><br><span class="line"></span><br><span class="line">scrape_configs:</span><br><span class="line">  - job_name: &apos;prometheus&apos;</span><br><span class="line">    static_configs:</span><br><span class="line">    - targets: [&apos;localhost:9090&apos;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  - job_name: &apos;node&apos;</span><br><span class="line">    file_sd_configs:</span><br><span class="line">    - refresh_interval: 1m</span><br><span class="line">      files: </span><br><span class="line">      - &quot;/opt/prometheus-2.23.0.linux-amd64/conf/node*.yml&quot;</span><br><span class="line">vi conf/node-dis.yml</span><br><span class="line">      - targets: [&apos;192.168.50.57:9100&apos;]</span><br><span class="line">        labels:</span><br><span class="line">          __hostname__: dev-database</span><br><span class="line">          __region_id__: &quot;cn-beijing&quot;</span><br><span class="line">          __availability_zone__: &quot;a&quot;</span><br><span class="line">      - targets: [&apos;localhost:9100&apos;]</span><br><span class="line">        labels:</span><br><span class="line">          __hostname__: prometheus</span><br><span class="line">          __region_id__: &quot;cn-beijing&quot;</span><br><span class="line">          __availability_zone__: &quot;b&quot;</span><br></pre></td></tr></table></figure><p>此时查看target信息，如下图。<br><img src="\image\image-20201203153031448.png"></p><p>设置relabel,将labels中的<code>__hostname__</code>替换为<code>node_name</code>。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">global:</span><br><span class="line">  scrape_interval:     5s # Set the scrape interval to every 15 seconds. Default is every 1 minute.</span><br><span class="line">  evaluation_interval: 5s # Evaluate rules every 15 seconds. The default is every 1 minute.</span><br><span class="line">  </span><br><span class="line">alerting:</span><br><span class="line">  alertmanagers:</span><br><span class="line">  - static_configs:</span><br><span class="line">    - targets:</span><br><span class="line">      - localhost:9093</span><br><span class="line">      </span><br><span class="line">rule_files:</span><br><span class="line">  - &quot;/opt/prometheus-2.23.0.linux-amd64/rule.yml&quot;</span><br><span class="line"></span><br><span class="line">scrape_configs:</span><br><span class="line">  - job_name: &apos;bounter-monitor&apos;</span><br><span class="line">    scrape_interval: 5s</span><br><span class="line">    metrics_path: &apos;/actuator/prometheus&apos;</span><br><span class="line">    static_configs:</span><br><span class="line">      - targets: [&apos;192.168.10.228:8080&apos;]</span><br><span class="line">        labels:</span><br><span class="line">          __hostname__: springboot</span><br><span class="line">    relabel_configs:</span><br><span class="line">      - source_labels:</span><br><span class="line">        - &quot;__hostname__&quot;</span><br><span class="line">        regex: &quot;(.*)&quot;</span><br><span class="line">        target_label: &quot;nodename&quot;</span><br><span class="line">        action: replace</span><br><span class="line">        replacement: &quot;$1&quot;</span><br></pre></td></tr></table></figure><p>重启服务查看target信息如下图：<br><img src="\image\image-20201203153255893.png"></p><p>source_labels指定我们我们需要处理的源标签， target_labels指定了我们要replace后的标签名字， action指定relabel动作，这里使用replace替换动作。 regex去匹配源标签（<strong>hostname</strong>）的值，”(.*)”代表<strong>hostname</strong>这个标签是什么值都匹配的，然后replacement指定的替换后的标签（target_label）对应的数值。采用正则引用方式获取的。</p><p>修改 ‘’regex: “(dev-database)”‘的时候可以看到如下图。<br><img src="\image\image-20201203153524812.png"></p><p>我们的基础信息里面有<code>__region_id__</code>和<code>__availability_zone__</code>但是我想融合2个字段在一起，可以通过replace来实现。</p><p>修改配置如下:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">global:</span><br><span class="line">  scrape_interval:     5s # Set the scrape interval to every 15 seconds. Default is every 1 minute.</span><br><span class="line">  evaluation_interval: 5s # Evaluate rules every 15 seconds. The default is every 1 minute.</span><br><span class="line">  </span><br><span class="line">alerting:</span><br><span class="line">  alertmanagers:</span><br><span class="line">  - static_configs:</span><br><span class="line">    - targets:</span><br><span class="line">      - localhost:9093</span><br><span class="line">      </span><br><span class="line">rule_files:</span><br><span class="line">  - &quot;/opt/prometheus-2.23.0.linux-amd64/rule.yml&quot;</span><br><span class="line"></span><br><span class="line">scrape_configs:</span><br><span class="line">  - job_name: &apos;node&apos;</span><br><span class="line">    file_sd_configs:</span><br><span class="line">    - refresh_interval: 1m</span><br><span class="line">      files: </span><br><span class="line">      - &quot;/opt/prometheus-2.23.0.linux-amd64/conf/node*.yml&quot;</span><br><span class="line">    relabel_configs:</span><br><span class="line">    - source_labels:</span><br><span class="line">      - &quot;__region_id__&quot;</span><br><span class="line">      - &quot;__availability_zone__&quot;</span><br><span class="line">      separator: &quot;-&quot;</span><br><span class="line">      regex: &quot;(.*)&quot;</span><br><span class="line">      target_label: &quot;region_zone&quot;</span><br><span class="line">      action: replace</span><br><span class="line">      replacement: &quot;$1&quot;</span><br></pre></td></tr></table></figure><p>target如下图：<br><img src="\image\image-20201203162711581.png"></p><h6 id="keep"><a href="#keep" class="headerlink" title="keep"></a>keep</h6><p>原配置</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">global:</span><br><span class="line">  scrape_interval:     5s # Set the scrape interval to every 15 seconds. Default is every 1 minute.</span><br><span class="line">  evaluation_interval: 5s # Evaluate rules every 15 seconds. The default is every 1 minute.</span><br><span class="line">  </span><br><span class="line">alerting:</span><br><span class="line">  alertmanagers:</span><br><span class="line">  - static_configs:</span><br><span class="line">    - targets:</span><br><span class="line">      - localhost:9093</span><br><span class="line">      </span><br><span class="line">rule_files:</span><br><span class="line">  - &quot;/opt/prometheus-2.23.0.linux-amd64/rule.yml&quot;</span><br><span class="line"></span><br><span class="line">scrape_configs:</span><br><span class="line">  - job_name: &apos;prometheus&apos;</span><br><span class="line">    static_configs:</span><br><span class="line">    - targets: [&apos;localhost:9090&apos;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  - job_name: &apos;node&apos;</span><br><span class="line">    file_sd_configs:</span><br><span class="line">    - refresh_interval: 1m</span><br><span class="line">      files: </span><br><span class="line">      - &quot;/opt/prometheus-2.23.0.linux-amd64/conf/node*.yml&quot;</span><br></pre></td></tr></table></figure><p>target信息如下图：<br><img src="\image\image-20201203154119227.png"></p><p>修改配置文件</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">global:</span><br><span class="line">  scrape_interval:     5s # Set the scrape interval to every 15 seconds. Default is every 1 minute.</span><br><span class="line">  evaluation_interval: 5s # Evaluate rules every 15 seconds. The default is every 1 minute.</span><br><span class="line">  </span><br><span class="line">alerting:</span><br><span class="line">  alertmanagers:</span><br><span class="line">  - static_configs:</span><br><span class="line">    - targets:</span><br><span class="line">      - localhost:9093</span><br><span class="line">      </span><br><span class="line">rule_files:</span><br><span class="line">  - &quot;/opt/prometheus-2.23.0.linux-amd64/rule.yml&quot;</span><br><span class="line"></span><br><span class="line">scrape_configs:</span><br><span class="line">  - job_name: &apos;bounter-monitor&apos;</span><br><span class="line">    scrape_interval: 5s</span><br><span class="line">    metrics_path: &apos;/actuator/prometheus&apos;</span><br><span class="line">    static_configs:</span><br><span class="line">      - targets: [&apos;192.168.10.228:8080&apos;]</span><br><span class="line">        labels:</span><br><span class="line">          __hostname__: springboot</span><br><span class="line">    relabel_configs:</span><br><span class="line">    - source_labels:</span><br><span class="line">      - &quot;__hostname__&quot;</span><br><span class="line">      regex: &quot;(dev-database)&quot;</span><br><span class="line">      action: keep</span><br></pre></td></tr></table></figure><p>target如下图:<br><img src="\image\image-20201203154322990.png"></p><p>action为keep,只要source_labels的值匹配regex:（dev-database）的实例才能会被采集。 其他的实例不会被采集。</p><h6 id="drop"><a href="#drop" class="headerlink" title="drop"></a>drop</h6><p>更改action为drop,target如下图:<br><img src="\image\image-20201203154545940.png"></p><p>action为drop,只要source_labels的值匹配regex（dev-database）的实例不会被采集。 其他的实例会被采集。</p><h5 id="labelkeep"><a href="#labelkeep" class="headerlink" title="labelkeep"></a>labelkeep</h5><h5 id="NodeExporter"><a href="#NodeExporter" class="headerlink" title="NodeExporter"></a>NodeExporter</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -LO https://github.com/prometheus/node_exporter/releases/download/v1.0.1/node_exporter-1.0.1.linux-amd64.tar.gz</span><br></pre></td></tr></table></figure><p>解压安装</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar zxvf node_exporter-1.0.1.linux-amd64.tar.gz</span><br><span class="line">mkdir -p /export/prometheus_exporter</span><br><span class="line">mv node_exporter-1.0.1.linux-amd64/ /export/prometheus_exporter/node_exporter</span><br><span class="line">vi  /usr/lib/systemd/system/node_exporter.service</span><br><span class="line">[Unit]</span><br><span class="line">Description=node_exporter</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/export/prometheus_exporter/node_exporter/node_exporter</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>启动</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl start node_exporter</span><br><span class="line">systemctl enable node_exporter</span><br></pre></td></tr></table></figure><h5 id="alertmanager"><a href="#alertmanager" class="headerlink" title="alertmanager"></a>alertmanager</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https://github.com/prometheus/alertmanager/releases/download/v0.21.0/alertmanager-0.21.0.linux-amd64.tar.gz</span><br><span class="line">mv alertmanager-0.15.2.linux-amd64/ alertmanager</span><br></pre></td></tr></table></figure><p> 创建启动文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /usr/lib/systemd/system/alertmanager.service</span><br></pre></td></tr></table></figure><p>添加如下内容：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=alertmanager</span><br><span class="line">Documentation=https://github.com/prometheus/alertmanager</span><br><span class="line">After=network.target</span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">ExecStart=/usr/<span class="built_in">local</span>/alertmanager/alertmanager --config.file=/usr/<span class="built_in">local</span>/alertmanager/alert-test.yml</span><br><span class="line">Restart=on-failure</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>Alertmanager 安装目录下默认有 alertmanager.yml 配置文件，可以创建新的配置文件，在启动时指定即可。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">global:</span><br><span class="line">  smtp_smarthost: <span class="string">'smtp.qq.com:465'</span></span><br><span class="line">  smtp_from: <span class="string">'2977358239@qq.com'</span></span><br><span class="line">  smtp_auth_username: <span class="string">'2977358239@qq.com'</span></span><br><span class="line">  smtp_auth_password: <span class="string">'jgigqzrlhycddhcf'</span> <span class="comment"># 这里是邮箱的授权密码，不是登录密码</span></span><br><span class="line">  smtp_require_tls: <span class="literal">false</span></span><br><span class="line">templates:</span><br><span class="line">  - <span class="string">'/alertmanager/template/*.tmpl'</span></span><br><span class="line">route:</span><br><span class="line">  group_by: [<span class="string">'alertname'</span>, <span class="string">'cluster'</span>, <span class="string">'service'</span>]</span><br><span class="line">  group_wait: 30s</span><br><span class="line">  group_interval: 5m</span><br><span class="line">  repeat_interval: 10m</span><br><span class="line">  receiver: default-receiver</span><br><span class="line">receivers:</span><br><span class="line">- name: <span class="string">'default-receiver'</span></span><br><span class="line">  email_configs:</span><br><span class="line">  - to: <span class="string">'nimingkun@dingtalk.com'</span></span><br><span class="line">    html: <span class="string">''</span></span><br><span class="line">    headers: &#123; Subject: <span class="string">"[WARN] 报警邮件 test"</span> &#125;</span><br></pre></td></tr></table></figure><p>smtp_smarthost：是用于发送邮件的邮箱的 SMTP 服务器地址+端口；</p><p>smtp_auth_password：是发送邮箱的授权码而不是登录密码；</p><p>smtp_require_tls：不设置的话默认为 true，当为 true 时会有 starttls 错误，为了简单这里设置为 false；</p><p>templates：指出邮件的模板路径；</p><p>receivers 下 html 指出邮件内容模板名，这里模板名为 “alert.html”，在模板路径中的某个文件中定义。</p><p>headers：为邮件标题；</p><p>3，配置告警规则</p><p>配置 rule.yml</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/prometheus</span><br><span class="line">vim rule.yml</span><br><span class="line">groups:</span><br><span class="line">- name: alert-rules.yml</span><br><span class="line">  rules:</span><br><span class="line">  - alert: dev-database <span class="comment"># alert 名字</span></span><br><span class="line">    expr: up&#123;job=<span class="string">"dev-database"</span>&#125; == 0 <span class="comment"># 判断条件</span></span><br><span class="line">    <span class="keyword">for</span>: 10s <span class="comment"># 条件保持 10s 才会发出 alter</span></span><br><span class="line">    labels: <span class="comment"># 设置 alert 的标签</span></span><br><span class="line">      severity: <span class="string">"critical"</span></span><br><span class="line">    annotations:  <span class="comment"># alert 的其他标签，但不用于标识 alert</span></span><br><span class="line">      description: 服务器  已当机超过 20s</span><br><span class="line">      summary: 服务器  运行状态</span><br></pre></td></tr></table></figure><p>在 prometheus.yml 中指定 rule.yml 的路径</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat prometheus.yml </span><br><span class="line"><span class="comment"># my global config</span></span><br><span class="line">global:</span><br><span class="line">  scrape_interval:     15s <span class="comment"># Set the scrape interval to every 15 seconds. Default is every 1 minute.</span></span><br><span class="line">  evaluation_interval: 15s <span class="comment"># Evaluate rules every 15 seconds. The default is every 1 minute.</span></span><br><span class="line">  <span class="comment"># scrape_timeout is set to the global default (10s).</span></span><br><span class="line"><span class="comment"># Alertmanager configuration</span></span><br><span class="line">alerting:</span><br><span class="line">  alertmanagers:</span><br><span class="line">  - static_configs:</span><br><span class="line">    - targets:</span><br><span class="line">      - localhost:9093 <span class="comment"># 这里修改为 localhost</span></span><br><span class="line"><span class="comment"># Load rules once and periodically evaluate them according to the global 'evaluation_interval'.</span></span><br><span class="line">rule_files:</span><br><span class="line">  <span class="comment"># - "first_rules.yml"</span></span><br><span class="line">  <span class="comment"># - "second_rules.yml"</span></span><br><span class="line">  - <span class="string">"/usr/local/prometheus/rule.yml"</span></span><br><span class="line"><span class="comment"># A scrape configuration containing exactly one endpoint to scrape:</span></span><br><span class="line"><span class="comment"># Here it's Prometheus itself.</span></span><br><span class="line">scrape_configs:</span><br><span class="line">  <span class="comment"># The job name is added as a label `job=&lt;job_name&gt;` to any timeseries scraped from this config.</span></span><br><span class="line">  - job_name: <span class="string">'prometheus'</span></span><br><span class="line">    <span class="comment"># metrics_path defaults to '/metrics'</span></span><br><span class="line">    <span class="comment"># scheme defaults to 'http'.</span></span><br><span class="line">    static_configs:</span><br><span class="line">    - targets: [<span class="string">'localhost:9090'</span>,<span class="string">'localhost:9100'</span>]</span><br><span class="line">  - job_name: <span class="string">'dev-database'</span></span><br><span class="line">    scrape_interval: 5s</span><br><span class="line">    static_configs:</span><br><span class="line">    - targets: [<span class="string">'192.168.50.57:9100'</span>]</span><br></pre></td></tr></table></figure><p>重启 Prometheus 服务：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl restart prometheus</span><br></pre></td></tr></table></figure><p>4，编写邮件模板</p><p>注意：文件后缀为 tmpl</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir -pv /alertmanager/template/</span><br><span class="line">vim /alertmanager/template/alert.tmpl</span><br><span class="line">&lt;table&gt;</span><br><span class="line">    &lt;tr&gt;&lt;td&gt;报警名&lt;/td&gt;&lt;td&gt;开始时间&lt;/td&gt;&lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure><p>5，启动 Alertmanager</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl start alertmanager.service</span><br><span class="line">systemctl status alertmanager.service</span><br></pre></td></tr></table></figure><p>6，验证效果。</p><p>此时到管理界面可以看到如下信息：<br><img src="\image\image-20201203111947500.png"></p><p>然后停止dev-database节点上的 node_exporter 服务，然后再看效果。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl stop node_exporter.service</span><br></pre></td></tr></table></figure><p>接着邮箱应该会收到邮件：<br><img src="\image\image-20201203112046979.png"></p><h5 id="监控Linux"><a href="#监控Linux" class="headerlink" title="监控Linux"></a>监控Linux</h5><p>在机器上安装NodeExporter,然后在Prometheus.yml配置监控地址</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi /usr/local/prometheus/prometheus.yml</span><br><span class="line"></span><br><span class="line">  - job_name: &apos;dev-database&apos;</span><br><span class="line">    static_configs:</span><br><span class="line">    - targets: [&apos;192.168.50.57:9100&apos;]</span><br></pre></td></tr></table></figure><p>在prometheus中， 可以抓取的端点成为实例，通常情况下具有相同目的的实例的集合成为job。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi /usr/local/prometheus/prometheus.yml</span><br><span class="line"></span><br><span class="line">  - job_name: &apos;dev-database&apos;</span><br><span class="line">    static_configs:</span><br><span class="line">    - targets: [&apos;192.168.50.57:9100&apos;,&apos;192.168.50.58:9100&apos;,&apos;192.168.50.59:9100&apos;]</span><br></pre></td></tr></table></figure><p>使用<a href="https://grafana.com/grafana/dashboards/11074进行监控" target="_blank" rel="noopener">https://grafana.com/grafana/dashboards/11074进行监控</a><br><img src="\image\image-20201202162632723.png"></p><h5 id="Grafana导入模板监控"><a href="#Grafana导入模板监控" class="headerlink" title="Grafana导入模板监控"></a>Grafana导入模板监控</h5><img src="\image\image-20201205144611781.png"><p>上传json文件，选择Prometheus<br><img src="\image\image-20201205144810380.png"><br><img src="\image\image-20201205144706804.png"></p><h5 id="监控Mysql"><a href="#监控Mysql" class="headerlink" title="监控Mysql"></a>监控Mysql</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">##下载mysql_exporter</span><br><span class="line">wget https://github.com/prometheus/mysqld_exporter/releases/download/v0.12.1/mysqld_exporter-0.12.1.linux-amd64.tar.gz</span><br><span class="line">tar zxvf mysqld_exporter-0.12.1.linux-amd64.tar.gz </span><br><span class="line">mv mysqld_exporter-0.12.1.linux-amd64 /usr/local/mysqld_exporter</span><br></pre></td></tr></table></figure><p>授权连接</p><p>想要获取监控数据，需要授权程序能够连接到MySQL。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">GRANT REPLICATION CLIENT, PROCESS ON *.* TO <span class="string">'exporter'</span>@<span class="string">'localhost'</span> identified by <span class="string">'123456'</span>;</span><br><span class="line">GRANT SELECT ON performance_schema.* TO <span class="string">'exporter'</span>@<span class="string">'localhost'</span>;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><p>注意：这里只授权了本地登陆，说明这个授权适用于mysql_exporter监控工具部署在MySQL Server上的情况，如果是部署在Prometheus Server上，则需要授权远程登陆。</p><p>创建配置信息文件</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd /usr/local/mysqld_exporter</span><br><span class="line">vim .my.cnf</span><br><span class="line">[client]</span><br><span class="line">user=exporter</span><br><span class="line">password=123456</span><br></pre></td></tr></table></figure><p>使用systemd启动</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim /usr/lib/systemd/system/mysqld_exporter.service</span><br><span class="line"> </span><br><span class="line">[Unit]</span><br><span class="line">Description=mysqld_exporter</span><br><span class="line">After=network.target</span><br><span class="line"> </span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">ExecStart=/usr/local/mysqld_exporter/mysqld_exporter --config.my-cnf=/usr/local/mysqld_exporter/.my.cnf</span><br><span class="line">Restart=on-failure</span><br><span class="line"> </span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>加载配置并启动。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl start mysqld_exporter</span><br><span class="line">systemctl status mysqld_exporter</span><br><span class="line">systemctl enable mysqld_exporter</span><br></pre></td></tr></table></figure><p>配置prometheus.yml添加监控目标</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi /usr/local/prometheus/prometheus.yml</span><br><span class="line">  - job_name: &apos;mysql&apos;</span><br><span class="line">    static_configs:</span><br><span class="line">      - targets: [&apos;192.168.50.57:9104&apos;]</span><br><span class="line">        labels:</span><br><span class="line">          instance: db</span><br></pre></td></tr></table></figure><p>重启服务</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl restart prometheus</span><br></pre></td></tr></table></figure><p>下载模板<a href="https://grafana.com/api/dashboards/9623/revisions/4/download" target="_blank" rel="noopener">https://grafana.com/api/dashboards/9623/revisions/4/download</a> 导入Grafana<br><img src="\image\image-20201202162041540.png"></p><h5 id="监控SpringBoot"><a href="#监控SpringBoot" class="headerlink" title="监控SpringBoot"></a>监控SpringBoot</h5><ol><li>添加如下依赖</li></ol><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--监控 begin--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!--Micrometer--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;io.micrometer&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;micrometer-registry-prometheus&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!--监控 end--&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>配置监控</li></ol><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: bounter-monitor</span><br><span class="line"></span><br><span class="line">## 暴露所有的actuator endpoints</span><br><span class="line">management:</span><br><span class="line">  endpoints:</span><br><span class="line">    web:</span><br><span class="line">      exposure:</span><br><span class="line">        include: &quot;*&quot;</span><br><span class="line">  metrics:</span><br><span class="line">    tags:</span><br><span class="line">      application: $&#123;spring.application.name&#125;</span><br></pre></td></tr></table></figure><p>3.打包并运行</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mvn clean install</span><br><span class="line">java -jar nmk0718.jar</span><br></pre></td></tr></table></figure><p>4.配置Prometheus.yml</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># SpringBoot Application</span><br><span class="line">- job_name: &apos;bounter-monitor&apos;</span><br><span class="line">  scrape_interval: 5s</span><br><span class="line">  metrics_path: &apos;/actuator/prometheus&apos;</span><br><span class="line">  static_configs:</span><br><span class="line">    - targets: [&apos;localhost:8080&apos;]</span><br></pre></td></tr></table></figure><p>重启Prometheus就可以在Grafana看到监控数据了</p><p>可使用<a href="https://grafana.com/grafana/dashboards/4701或https://grafana.com/grafana/dashboards/10280" target="_blank" rel="noopener">https://grafana.com/grafana/dashboards/4701或https://grafana.com/grafana/dashboards/10280</a> 模板<br><img src="\image\image-20201202161337842.png"></p><h5 id="监控rabbitmq"><a href="#监控rabbitmq" class="headerlink" title="监控rabbitmq"></a>监控rabbitmq</h5><p>下载</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">weget https://github.com/kbudde/rabbitmq_exporter/releases/download/v1.0.0-RC7/rabbitmq_exporter-1.0.0-RC7.linux-amd64.tar.gz</span><br></pre></td></tr></table></figure><p>解压</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar zxvf rabbitmq_exporter-1.0.0-RC7.linux-amd64.tar.gz</span><br></pre></td></tr></table></figure><p>运行exporter</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">RABBIT_USER=liangjian RABBIT_PASSWORD=liangjian360 OUTPUT_FORMAT=JSON PUBLISH_PORT=9099 RABBIT_URL=http://192.168.50.51:5672 nohup ./rabbitmq_exporter &amp;</span><br></pre></td></tr></table></figure><p>验证：浏览器访问 <a href="http://192.168.50.51:9099/metrics" target="_blank" rel="noopener">http://192.168.50.51:9099/metrics</a> </p><img src="\image\image-20201205143617017.png"><p>配置监控</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi prometheus.yml</span><br><span class="line"></span><br><span class="line"> - job_name: &apos;rabbitmq&apos;</span><br><span class="line">    scrape_interval: 60s</span><br><span class="line">    scrape_timeout: 60s</span><br><span class="line">    static_configs:</span><br><span class="line">      - targets: [&apos;192.168.50.51:9099&apos;]</span><br></pre></td></tr></table></figure><p>配置告警</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi rule.yml</span><br><span class="line">groups:</span><br><span class="line">- name: alert-rules.yml</span><br><span class="line">  rules:</span><br><span class="line">  - alert: &quot;rabbitmq实例失败&quot;</span><br><span class="line">    expr: up&#123;job=&quot;rabbitmq&quot;&#125; == 0</span><br><span class="line">    for: 5s</span><br><span class="line">    labels:</span><br><span class="line">      alertname: test_rabbitmq_monitor</span><br><span class="line">      severity: &quot;critical&quot;</span><br><span class="line">    annotations:</span><br><span class="line">      description: &quot;rabbitmq &#123;&#123; $labels.instance &#125;&#125; is error&quot;</span><br><span class="line">      summary: &quot;测试rabbitmq监控宕机&quot;</span><br></pre></td></tr></table></figure><p>验证<br><img src="\image\image-20201205144047846.png"></p><h5 id="监控redis"><a href="#监控redis" class="headerlink" title="监控redis"></a>监控redis</h5><p>下载地址:<a href="https://github.com/oliver006/redis_exporter/releases" target="_blank" rel="noopener">https://github.com/oliver006/redis_exporter/releases</a></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@database opt]# tar zxvf redis_exporter-v1.13.1.linux-amd64.tar.gz </span><br><span class="line">redis_exporter-v1.13.1.linux-amd64/</span><br><span class="line">redis_exporter-v1.13.1.linux-amd64/README.md</span><br><span class="line">redis_exporter-v1.13.1.linux-amd64/redis_exporter</span><br><span class="line">redis_exporter-v1.13.1.linux-amd64/LICENSE</span><br><span class="line">[root@database opt]# cd redis_exporter-v1.13.1.linux-amd64/</span><br><span class="line">[root@database redis_exporter-v1.13.1.linux-amd64]# ls</span><br><span class="line">LICENSE  README.md  redis_exporter</span><br><span class="line">[root@database redis_exporter-v1.13.1.linux-amd64]# nohup ./redis_exporter -redis.addr 192.168.50.51:6379 -redis.password liangjian360 &amp;</span><br><span class="line">[1] 208232</span><br><span class="line">[root@database redis_exporter-v1.13.1.linux-amd64]# nohup: ignoring input and appending output to ‘nohup.out’</span><br><span class="line">^C</span><br><span class="line">[root@database redis_exporter-v1.13.1.linux-amd64]# netstat -lntp     </span><br><span class="line">tcp6       0      0 :::9121                 :::*                    LISTEN      208232/./redis_expo</span><br></pre></td></tr></table></figure><p>配置prometheus.yml</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@monitor prometheus-2.23.0.linux-amd64]# vi prometheus.yml</span><br><span class="line">  - job_name: &apos;redis&apos;</span><br><span class="line">    static_configs:</span><br><span class="line">      - targets: [&apos;192.168.50.51:9121&apos;]</span><br><span class="line">      </span><br><span class="line">[root@monitor prometheus-2.23.0.linux-amd64]# systemctl restart prometheus</span><br></pre></td></tr></table></figure><p>查看Targets<br><img src="\image\image-20201207154557219.png"></p><p>配置Grafana,使用<a href="https://grafana.com/grafana/dashboards/11835" target="_blank" rel="noopener">https://grafana.com/grafana/dashboards/11835</a><br><img src="\image\image-20201207155435494.png"></p><p>配置alertmanager</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@monitor prometheus-2.23.0.linux-amd64]# cat rule.yml </span><br><span class="line">  - alert: &quot;redis实例失败&quot;</span><br><span class="line">    expr: up&#123;job=&quot;redis&quot;&#125; == 0</span><br><span class="line">    for: 5s</span><br><span class="line">    labels:</span><br><span class="line">      alertname: redis_monitor</span><br><span class="line">      severity: &quot;critical&quot;</span><br><span class="line">    annotations:</span><br><span class="line">      description: &quot;redis &#123;&#123; $labels.instance &#125;&#125; is error&quot;</span><br><span class="line">      summary: &quot;测试redis监控宕机&quot;</span><br></pre></td></tr></table></figure><p>停止redis监控后,收到告警邮件<br><img src="\image\image-20201207155944044.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;什么是Prometheus&quot;&gt;&lt;a href=&quot;#什么是Prometheus&quot; class=&quot;headerlink&quot; title=&quot;什么是Prometheus?&quot;&gt;&lt;/a&gt;什么是Prometheus?&lt;/h2&gt;&lt;p&gt;Prometheus是由SoundCloud开发</summary>
      
    
    
    
    
    <category term="Prometheus" scheme="https://nmk0718.github.io/tag/Prometheus/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins</title>
    <link href="https://nmk0718.github.io/2021/03/27/Jenkins/"/>
    <id>https://nmk0718.github.io/2021/03/27/Jenkins/</id>
    <published>2021-03-27T07:03:00.000Z</published>
    <updated>2025-02-10T04:00:59.833Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Jenkins是什么？"><a href="#Jenkins是什么？" class="headerlink" title="Jenkins是什么？"></a>Jenkins是什么？</h4><p>Jenkins是一个开源的、可扩展的持续集成、交付、部署（软件/代码的编译、打包、部署）的基于web界面的平台。允许持续集成和持续交付项目，无论用的是什么平台，可以处理任何类型的构建或持续集成。</p><p>官网：<a href="https://jenkins.io/" target="_blank" rel="noopener">https://jenkins.io/</a> 官方文档：<a href="https://jenkins.io/doc/" target="_blank" rel="noopener">https://jenkins.io/doc/</a></p><h4 id="安装Jenkins"><a href="#安装Jenkins" class="headerlink" title="安装Jenkins"></a>安装Jenkins</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#安装openjdk，jenkins依赖</span><br><span class="line">[root@test ~]# yum install -y java-1.8.0-openjdk</span><br><span class="line"></span><br><span class="line">#查看JDK版本,验证是否安装成功</span><br><span class="line">[root@test ~]# java -version</span><br><span class="line">openjdk version &quot;1.8.0_292&quot;</span><br><span class="line">OpenJDK Runtime Environment (build 1.8.0_292-b10)</span><br><span class="line">OpenJDK 64-Bit Server VM (build 25.292-b10, mixed mode)</span><br><span class="line"></span><br><span class="line">#yum的repos中默认是没有Jenkins的，需要先将Jenkins存储库添加到yum repos</span><br><span class="line">[root@test ~]# wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo</span><br><span class="line">[root@test ~]# rpm --import https://pkg.jenkins.io/redhat/jenkins.io.key</span><br><span class="line"></span><br><span class="line">#安装jenkins</span><br><span class="line">[root@test ~]# yum install -y jenkins</span><br></pre></td></tr></table></figure><h4 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#启动jenkins</span><br><span class="line">[root@test ~]# systemctl start jenkins</span><br><span class="line"></span><br><span class="line">#查看jenkins启动状态</span><br><span class="line">[root@test ~]# systemctl status jenkins</span><br><span class="line"></span><br><span class="line">#停止jenkins</span><br><span class="line">[root@test ~]# systemctl stop jenkins</span><br><span class="line"></span><br><span class="line">#查看jenkins进程</span><br><span class="line">[root@test ~]# ps aux |grep jenkins</span><br><span class="line">jenkins   95062  230  4.1 5682456 327392 ?      Ssl  10:15   0:16 /etc/alternatives/java -Dcom.sun.akuma.Daemon=daemonized -Djava.awt.headless=true -DJENKINS_HOME=/var/lib/jenkins -jar /usr/lib/jenkins/jenkins.war --logfile=/var/log/jenkins/jenkins.log --webroot=/var/cache/jenkins/war --daemon --httpPort=8080 --debug=5 --handlerCountMax=100 --handlerCountMaxIdle=20</span><br></pre></td></tr></table></figure><h4 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h4><p>浏览器访问ip:8080</p><img src="https://nmk0718.github.io/image/image-20210624112633163.png" alt><p>#如没有显示页面,可以使用以下两种方式的任意一种</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#关闭防火墙</span><br><span class="line">systemctl stop firewalld</span><br><span class="line"></span><br><span class="line">#添加防火墙规则</span><br><span class="line">firewall-cmd --zone=public --add-port=8080/tcp --permanent</span><br></pre></td></tr></table></figure><p>通过命令查看密码解锁jenkins</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">less /var/log/jenkins/jenkins.log </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Jenkins initial setup is required. An admin user has been created and a password generated.</span><br><span class="line">Please use the following password to proceed to installation:</span><br><span class="line"></span><br><span class="line">97f81ad554894de68de6e75f48e6f3b6</span><br><span class="line"></span><br><span class="line">This may also be found at: /var/lib/jenkins/secrets/initialAdminPassword</span><br><span class="line"></span><br><span class="line">*************************************************************</span><br><span class="line">*************************************************************</span><br><span class="line">*************************************************************</span><br><span class="line"></span><br><span class="line">2021-06-24 03:21:19.457+0000 [id=33]    INFO    jenkins.InitReactorRunner$1#onAttained: Completed initialization</span><br><span class="line">2021-06-24 03:21:19.481+0000 [id=22]    INFO    hudson.WebAppMain$3#run: Jenkins is fully up and running</span><br><span class="line">(END)</span><br></pre></td></tr></table></figure><p>安装推荐插件</p><img src="https://nmk0718.github.io/image/image-20210624113218070.png" alt><p>安装完成后,设置管理员账号</p><img src="https://nmk0718.github.io/image/image-20210624114632352.png" alt><p>配置访问地址</p><img src="https://nmk0718.github.io/image/image-20210624114708635.png" alt><p>进入主页面</p><img src="https://nmk0718.github.io/image/image-20210624114900893.png" alt><p>jenkins的配置文件：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#查看jenkins的配置文件，定义了home、JAVA_CMD、user、port等基础配置，保持默认即可</span><br><span class="line">cat /etc/sysconfig/jenkins</span><br></pre></td></tr></table></figure><p>jenkins程序主目录:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ls /var/lib/jenkins/</span><br><span class="line">config.xml#初始时里边定义Jenkins的版本，用户等各种信息</span><br><span class="line">credentials.xml#存储Git拉取的证书信息。</span><br><span class="line">fingerprints#其中定义了通过秘钥所拉取的项目记录。</span><br><span class="line">hudson.model.UpdateCenter.xml</span><br><span class="line">hudson.plugins.git.GitTool.xml</span><br><span class="line">identity.key.enc</span><br><span class="line">jenkins.install.InstallUtil.installingPlugins</span><br><span class="line">jenkins.install.InstallUtil.lastExecVersion</span><br><span class="line">jenkins.install.UpgradeWizard.state</span><br><span class="line">jenkins.model.JenkinsLocationConfiguration.xml</span><br><span class="line">jenkins.security.apitoken.ApiTokenPropertyConfiguration.xml</span><br><span class="line">jenkins.security.QueueItemAuthenticatorConfiguration.xml</span><br><span class="line">jenkins.security.UpdateSiteWarningsConfiguration.xml</span><br><span class="line">jenkins.telemetry.Correlator.xml</span><br><span class="line">jobs#创建的任务都会存放在这里 </span><br><span class="line">logs#存放jenkins相关的日志</span><br><span class="line">nodeMonitors.xml</span><br><span class="line">nodes#节点管理的信息,多节点时用到</span><br><span class="line">plugins#插件所在目录</span><br><span class="line">queue.xml</span><br><span class="line">queue.xml.bak</span><br><span class="line">secret.key</span><br><span class="line">secret.key.not-so-secret</span><br><span class="line">secrets#密码秘钥所在目录</span><br><span class="line">updates</span><br><span class="line">userContent</span><br><span class="line">users#用户信息</span><br><span class="line">workflow-libs</span><br><span class="line">workspace#工作空间</span><br></pre></td></tr></table></figure><p>jenkins存放数据不依靠数据库，所以在移植时只需要拷贝整个程序主目录即可。</p><h4 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h4><img src="https://nmk0718.github.io/image/image-20210628112325345.png" alt><p>新建用户</p><img src="https://nmk0718.github.io/image/image-20210628112407469.png" alt><p>建立完毕后可看到对应的用户,点击用户进行相关配置</p><img src="https://nmk0718.github.io/image/image-20210628112651865.png" alt><p>查看当前用户的构建历史</p><img src="https://nmk0718.github.io/image/image-20210628112843727.png" alt><p>可修改当前用户的邮箱,密码,视图等相关用户信息</p><img src="https://nmk0718.github.io/image/image-20210628112932432.png" alt><p>删除用户</p><img src="https://nmk0718.github.io/image/image-20210628112949580.png" alt><h4 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h4><img src="https://nmk0718.github.io/image/image-20210628111038884.png" alt><p>安装以下插件</p><img src="https://nmk0718.github.io/image/image-20210628111141523.png" alt><img src="https://nmk0718.github.io/image/image-20210628111300294.png" alt><img src="https://nmk0718.github.io/image/image-20210628151958241.png" alt><h4 id="编译依赖"><a href="#编译依赖" class="headerlink" title="编译依赖"></a>编译依赖</h4><h5 id="安装Maven"><a href="#安装Maven" class="headerlink" title="安装Maven"></a>安装Maven</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#下载maven包,解压</span><br><span class="line">wget https://mirrors.tuna.tsinghua.edu.cn/apache/maven/maven-3/3.6.3/binaries/apache-maven-3.6.3-bin.tar.gz</span><br><span class="line">tar zxvf apache-maven-3.6.3-bin.tar.gz </span><br><span class="line">mv apache-maven-3.6.3 /usr/local/maven</span><br><span class="line"></span><br><span class="line">#添加环境变量</span><br><span class="line">vi /etc/profile</span><br><span class="line">#MAVEN</span><br><span class="line">MAVEN_HOME=/usr/local/maven</span><br><span class="line">export MAVEN_HOME</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin:$MAVEN_HOME/bin</span><br><span class="line"></span><br><span class="line">#生效环境变量</span><br><span class="line">source /etc/profile</span><br><span class="line"></span><br><span class="line">#查看版本号</span><br><span class="line">mvn -v</span><br></pre></td></tr></table></figure><h5 id="安装NPM"><a href="#安装NPM" class="headerlink" title="安装NPM"></a>安装NPM</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#下载node,解压</span><br><span class="line">[root@public home]# wget https://nodejs.org/dist/v12.19.0/node-v12.19.0-linux-x64.tar.xz</span><br><span class="line">[root@public home]# tar xf  node-v12.19.0-linux-x64.tar.xz </span><br><span class="line">[root@public home]# cd node-v12.19.0-linux-x64</span><br><span class="line">#软链接</span><br><span class="line">[root@public node-v12.19.0-linux-x64]# ln -s /home/node-v12.19.0-linux-x64/bin/npm   /usr/local/bin/ </span><br><span class="line">[root@public node-v12.19.0-linux-x64]# ln -s /home/node-v12.19.0-linux-x64/bin/node   /usr/local/bin/</span><br><span class="line">#查看版本号验证</span><br><span class="line">[root@public node-v12.19.0-linux-x64]# node -v</span><br><span class="line">v12.19.0</span><br><span class="line">[root@public node-v12.19.0-linux-x64]# npm -v</span><br><span class="line">6.14.8</span><br><span class="line">#安装依赖</span><br><span class="line">[root@public node-v12.19.0-linux-x64]# npm install</span><br></pre></td></tr></table></figure><p>配置Jenkins环境变量</p><img src="https://nmk0718.github.io/image/image-20210628143407807.png" alt><h4 id="用户权限"><a href="#用户权限" class="headerlink" title="用户权限"></a>用户权限</h4><p>系统管理 –&gt; 全局安全配置(Manage Jenkins –&gt; Configure Global Security) 勾选Role-Based Strategy</p><img src="https://nmk0718.github.io/image/image-20210628111648680.png" alt><p>保存后可看到多了Manage and Assign Roles选项</p><img src="https://nmk0718.github.io/image/image-20210628111829761.png" alt><p>准备工作:</p><p>创建不同环境的视图和任务</p><img src="https://nmk0718.github.io/image/image-20210628112217883.png" alt><p>创建不同的用户</p><img src="https://nmk0718.github.io/image/image-20210628112533958.png" alt><p>配置角色</p><img src="https://nmk0718.github.io/image/image-20210628113242039.png" alt><p>创建角色名称为only_read,需点击add才能添加,赋予读取权限</p><img src="https://nmk0718.github.io/image/image-20210628113437364.png" alt><p>创建角色名称dev,对应看到的视图<code>dev.*</code>(代表匹配dev开头的所有应用),点击图中的<code>dev.*</code>可查看到浏览器的弹窗中所匹配到的任务</p><img src="https://nmk0718.github.io/image/image-20210628113624189.png" alt><p>勾选赋予相对应的权限,下图所示权限为:可以查看构建取消配置任务,可查看该任务的工作区.(这里给予配置权限是因为开发可能需要构建对应的Git分支)</p><img src="https://nmk0718.github.io/image/image-20210628114414460.png" alt><p>保存后选择<code>分配角色</code>，是用户与角色进行关联</p><img src="https://nmk0718.github.io/image/image-20210628114023410.png" alt><p>使用户与匹配的视图任务相关联</p><img src="https://nmk0718.github.io/image/image-20210628114138544.png" alt><p>保存后切换到dev用户登录,可看到dev用户只能看到dev的视图,无法看到test和prod视图,无法进行管理jenkins</p><img src="https://nmk0718.github.io/image/image-20210628114638198.png" alt><p>切换为test用户登录,可看到test用户只能看到test的视图,无法看到dev和prod视图,无法进行管理jenkins</p><img src="https://nmk0718.github.io/image/image-20210628114732769.png" alt><p>⚠定义角色和权限应当视当前情况进行分配</p><h4 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h4><img src="https://nmk0718.github.io/image/image-20210624115353433.png" alt><h5 id="丢弃旧的构建"><a href="#丢弃旧的构建" class="headerlink" title="丢弃旧的构建"></a>丢弃旧的构建</h5><p>删除构建历史和构建打包的工作空间(建议在磁盘空间不足情况下或开发测试环境任务使用,生产勿用)</p><img src="https://nmk0718.github.io/image/image-20210628134327315.png" alt><h5 id="参数化构建"><a href="#参数化构建" class="headerlink" title="参数化构建"></a>参数化构建</h5><p>可通过参数进行打包编译.</p><img src="https://nmk0718.github.io/image/image-20210628134649710.png" alt><p>(使用英文版进行演示)</p><p>字符串参数</p><img src="https://nmk0718.github.io/image/image-20210628135427247.png" alt><p>点击构建后先弹出用于构建的参数</p><img src="https://nmk0718.github.io/image/image-20210628135550396.png" alt><p>查看构建后的控制台输出</p><img src="https://nmk0718.github.io/image/image-20210628135723128.png" alt><p>可查看到使用echo $unionpay可读取到先前定义的参数</p><img src="https://nmk0718.github.io/image/image-20210628135758926.png" alt><p>选项构建</p><img src="https://nmk0718.github.io/image/image-20210628135942231.png" alt><p>点击构建后,会弹出选项,让用户进行选择</p><img src="https://nmk0718.github.io/image/image-20210628140124040.png" alt><p>查看控制台可看到,用户选择test后,使用echo $profile打印出了正确的参数</p><img src="https://nmk0718.github.io/image/image-20210628140223631.png" alt><h5 id="拉取代码"><a href="#拉取代码" class="headerlink" title="拉取代码"></a>拉取代码</h5><p>可选择Git和Svn进行拉取代码,为后续构建项目做准备,此处使用git</p><img src="https://nmk0718.github.io/image/image-20210628140551120.png" alt><p>Repository URL填写Git的仓库地址,Credentials需要添加认证的Git账号密码,指定分支默认为master 可改变为其他分支</p><img src="https://nmk0718.github.io/image/image-20210628140740020.png" alt><h5 id="修改记录"><a href="#修改记录" class="headerlink" title="修改记录"></a>修改记录</h5><p>可查看相对于上个版本代码的修改记录</p><img src="https://nmk0718.github.io/image/image-20210628140911538.png" alt><h5 id="工作空间"><a href="#工作空间" class="headerlink" title="工作空间"></a>工作空间</h5><p>可查看拉取的代码和编译后的文件,可在线查看文件,也可以直接打包下载,用于查找问题,清理工作空间,可以清空所以当前工作空间内的所有文件</p><img src="https://nmk0718.github.io/image/image-20210628141012122.png" alt><h5 id="立即构建"><a href="#立即构建" class="headerlink" title="立即构建"></a>立即构建</h5><p>构建当前配置好的任务,可在控制台查看是否成功,也可看到具体的打包错误</p><img src="https://nmk0718.github.io/image/image-20210628141240327.png" alt><h5 id="定时构建"><a href="#定时构建" class="headerlink" title="定时构建"></a>定时构建</h5><p>“日程表”格式与 crontab 相似但有细微差别</p><p>每行由 5 个值组成(空格或TAB分隔)，分别表示分(0-59)、时(0-23)、日(1-31)、月(1-12)、周(0-7, 0/7=周日) ## “M,N” 表示M和N；”M-N” 表示范围[M,N]；”M-N/X” 表示范围[M,N]内每隔X；”*/X”表示整个范围内每隔X<br>前面提到的M/N/X的值都可以用H(意为Hash)代替，散列值起到随机值的效果，且同一项目取值稳定，这对于项目多时分散压力很有用。<br>H/10 H(0-8) * * 1-5 ## 触发时间: 工作日、Hour为0~8按哈希随机、Minute以10为间隔<br>H/10 H * * 0,6,7 ## 触发时间: 周末、Hour为全天按哈希随机、Minute以10为间隔 ##<br>“日程表”修改后，下方会给出下次执行时间点的预告。</p><img src="https://nmk0718.github.io/image/image-20210628141534174.png" alt><h5 id="添加时间戳"><a href="#添加时间戳" class="headerlink" title="添加时间戳"></a>添加时间戳</h5><img src="https://nmk0718.github.io/image/image-20210628142054564.png" alt><h5 id="前端编译打包部署"><a href="#前端编译打包部署" class="headerlink" title="前端编译打包部署"></a>前端编译打包部署</h5><p>通过npm install下载前端依赖,npm run build进行编译打包</p><img src="https://nmk0718.github.io/image/image-20210628150210870.png" alt><p>使用nginx配置前端访问</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">  listen 80;</span><br><span class="line">  server_name www.test.com;</span><br><span class="line">  location /web/ &#123;</span><br><span class="line">      root /home/web/;</span><br><span class="line">      index  index.html;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><h5 id="后端编译打包部署"><a href="#后端编译打包部署" class="headerlink" title="后端编译打包部署"></a>后端编译打包部署</h5><p>可以使用<code>调用顶层mvn命令</code>也可以使用<code>shell里用mvn</code></p><img src="https://nmk0718.github.io/image/image-20210628144804207.png" alt><p>控制台可以看到编译打包是否成功</p><img src="https://nmk0718.github.io/image/image-20210628144853603.png" alt><p>配置SSH服务器,这里定义SSH名称,地址,端口,用户名,上传文件的路径,如果使用密码勾选Use Password选项,使用密钥使用key</p><img src="https://nmk0718.github.io/image/image-20210628144959208.png" alt><p>构建时选择SSH插件,进行部署</p><img src="https://nmk0718.github.io/image/image-20210628145258039.png" alt><p>选择对应配置的SSH服务器,要上传的文件(相对路径),配置中的SSH服务器上传地址为/home/upload,此处的Remote directory为/会上传到/home/upload下,然后配置上传到服务器后,要执行部署的脚本文件,此处使用了nohup sh 2&gt;&amp;1是因为jenkins有一个机制会杀掉启动的项目进程</p><p>部署脚本</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@service-001 upload]# cat hospital-union-pay.sh </span><br><span class="line">#Java Env</span><br><span class="line">export JAVA_HOME=/usr/local/java</span><br><span class="line">export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin</span><br><span class="line"></span><br><span class="line">port=8085</span><br><span class="line"></span><br><span class="line">pid=$(netstat -nlp | grep :$port | awk &apos;&#123;print $7&#125;&apos; | awk -F&quot;/&quot; &apos;&#123; print $1 &#125;&apos;);</span><br><span class="line"></span><br><span class="line">jar=hospital-union-pay.jar</span><br><span class="line"></span><br><span class="line">if [  -n  &quot;$pid&quot;  ];  then</span><br><span class="line">    kill  -9  $pid;</span><br><span class="line">fi</span><br><span class="line">rm -rf /home/app/$jar</span><br><span class="line">mv /home/upload/$jar /home/app/</span><br><span class="line">cd /home/app</span><br><span class="line">java -Xms512M -Xmx1024M -jar $jar --spring.profiles.active=test &amp;</span><br></pre></td></tr></table></figure><h5 id="清理工作空间"><a href="#清理工作空间" class="headerlink" title="清理工作空间"></a>清理工作空间</h5><img src="https://nmk0718.github.io/image/image-20210628145742797.png" alt><h4 id="阿里云K8S部署"><a href="#阿里云K8S部署" class="headerlink" title="阿里云K8S部署"></a>阿里云K8S部署</h4><p>通过定义好的字符串参数进行构建</p><img src="https://nmk0718.github.io/image/image-20210628151112491.png" alt><p>start.sh</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">JARFILE=/home/App.jar</span><br><span class="line"></span><br><span class="line">java -jar config -Djava.security.egd=file:/dev/./urandom $JARFILE profile &gt;&gt; /home/app.log &amp;</span><br><span class="line"></span><br><span class="line">tail  -50f /home/app.log</span><br></pre></td></tr></table></figure><p>Dockerfile</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FROM  registry.cn-shenzhen.aliyuncs.com/server:latest</span><br><span class="line">MAINTAINER nmk</span><br><span class="line"></span><br><span class="line">COPY  *.jar /home/App.jar</span><br><span class="line">COPY  start.sh /home/start.sh</span><br><span class="line">RUN chmod +x /home/start.sh</span><br><span class="line">ENV JAVA_HOME=/usr/local/java</span><br><span class="line">ENV PATH $JAVA_HOME/bin:$PATH</span><br><span class="line">ENV CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class="line">ENV LC_ALL=&quot;en_US.UTF-8&quot;</span><br><span class="line">ENV LANG=&quot;en_US.UTF-8&quot;</span><br><span class="line"></span><br><span class="line">EXPOSE appport</span><br><span class="line">CMD [&quot;/home/start.sh&quot;]</span><br></pre></td></tr></table></figure><p>build.sh</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">#构建有版本号的镜像，以防需要回滚，而且是从镜像创建服务</span><br><span class="line">docker build -t registry.cn-shenzhen.aliyuncs.com/gongsi_$1/$2:$3     . -f Dockerfile</span><br><span class="line"></span><br><span class="line">docker push     registry.cn-shenzhen.aliyuncs.com/gongsi_$1/$2:$3  </span><br><span class="line">#构建latest版本，用于自动部署</span><br><span class="line">docker build -t registry.cn-shenzhen.aliyuncs.com/gongsi_$1/$2:latest . -f Dockerfile</span><br><span class="line">docker push     registry.cn-shenzhen.aliyuncs.com/gongsi_$1/$2:latest</span><br></pre></td></tr></table></figure><h4 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h4><p>GitLab可通过webhook进行自动部署,开发一提交代码即可触发jenkins的自动构建.</p><h5 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h5><p>生成工具URL见：<a href="http://afonsof.com/jenkins-material-theme/" target="_blank" rel="noopener">http://afonsof.com/jenkins-material-theme/</a></p><p>在系统配置中加入css即可<img src="https://nmk0718.github.io/image/image-20210628151721136.png" alt></p><p>效果如下</p><img src="https://nmk0718.github.io/image/image-20210628151853759.png" alt><p>钉钉机器人通知：<a href="https://blog.csdn.net/shi_hong_fei_hei/article/details/112055446" target="_blank" rel="noopener">https://blog.csdn.net/shi_hong_fei_hei/article/details/112055446</a></p><p>邮件通知:<a href="https://www.cnblogs.com/imyalost/p/8781759.html" target="_blank" rel="noopener">https://www.cnblogs.com/imyalost/p/8781759.html</a></p><h5 id="jenkins通过ssh启动服务失败"><a href="#jenkins通过ssh启动服务失败" class="headerlink" title="jenkins通过ssh启动服务失败"></a>jenkins通过ssh启动服务失败</h5><p>查看tomcat启动日志发现报错:war包拒绝访问</p><p>因jenkins配置的ssh对应的windows账号不是administrator会出现没权限问题</p><p>方案1.更改jenkins的ssh用户为administrator</p><p>方案2.给需要权限的文件夹或文件授权</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">windows命令给用户授权</span><br><span class="line">cacls E:\tomcat /t /e /c /r nmk   拒绝</span><br><span class="line">Cacls E:\tomcat /t /e /c /g nmk:F   允许</span><br><span class="line"></span><br><span class="line">多用户情况下可以给everyone</span><br><span class="line">Cacls E:\SFTP\sftp\nmk.war /t /e /c /g everyone:F</span><br></pre></td></tr></table></figure><h4 id="自动部署脚本"><a href="#自动部署脚本" class="headerlink" title="自动部署脚本"></a>自动部署脚本</h4><h5 id="windows自动部署war包脚本"><a href="#windows自动部署war包脚本" class="headerlink" title="windows自动部署war包脚本"></a>windows自动部署war包脚本</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for /f &quot;tokens=5&quot; %%e in (&apos;netstat -aon ^| findstr &quot;:9021&quot;&apos;) do (set f=%%e)</span><br><span class="line">taskkill /t /f /pid %f% </span><br><span class="line"></span><br><span class="line">rd /s /q &quot;E:\tomcat-9021\webapps\cmpay&quot;</span><br><span class="line">del &quot;E:\tomcat-9021\webapps\cmpay.war&quot;</span><br><span class="line">move cmpay.war &quot;E:\tomcat-9021\webapps\&quot;</span><br><span class="line">net start tomcat9021</span><br></pre></td></tr></table></figure><p>因windows启动tomcat会被jenkins杀掉,所以要把tomcat做成服务</p><h5 id="windows自动部署jar包脚本"><a href="#windows自动部署jar包脚本" class="headerlink" title="windows自动部署jar包脚本"></a>windows自动部署jar包脚本</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for /f &quot;tokens=5&quot; %%i in (&apos;netstat -aon ^| findstr &quot;:8081&quot;&apos;) do (set j=%%i)</span><br><span class="line">taskkill /t /f /pid %j% </span><br><span class="line"></span><br><span class="line">del E:\gzlp_red_package\lepeng-red-package-coupon.jar</span><br><span class="line">move lepeng-red-package-coupon-1.0-SNAPSHOT.jar &quot;E:\gzlp_red_package\lepeng-red-package-coupon.jar&quot;</span><br><span class="line">javaw -Xms256m -Xmx512m -jar &quot;E:\gzlp_red_package\lepeng-red-package-coupon.jar&quot; --spring.profiles.active=dev</span><br></pre></td></tr></table></figure><h5 id="linux自动部署war包脚本"><a href="#linux自动部署war包脚本" class="headerlink" title="linux自动部署war包脚本"></a>linux自动部署war包脚本</h5><p>jenkins配置</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sh /home/tomcat/upload/omall.sh</span><br></pre></td></tr></table></figure><p>omall.sh脚本如下</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#Java Env</span><br><span class="line">export JAVA_HOME=/usr/java</span><br><span class="line">export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin</span><br><span class="line"></span><br><span class="line">port=19181</span><br><span class="line">#根据端口号查询对应的pid</span><br><span class="line">pid=$(netstat -nlp | grep :$port | awk &apos;&#123;print $7&#125;&apos; | awk -F&quot;/&quot; &apos;&#123; print $1 &#125;&apos;);</span><br><span class="line"></span><br><span class="line">#杀掉对应的进程，如果pid不存在，则不执行</span><br><span class="line">if [  -n  &quot;$pid&quot;  ];  then</span><br><span class="line">    kill  -9  $pid;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">rm -rf /home/tomcat/omall/webapps/omall.war</span><br><span class="line">rm -rf /home/tomcat/omall/webapps/omall</span><br><span class="line">mv /home/tomcat/upload/omall.war /home/tomcat/omall/webapps</span><br><span class="line">cd /home/tomcat/omall/bin</span><br><span class="line">./startup.sh</span><br></pre></td></tr></table></figure><h5 id="linux自动部署jar包脚本"><a href="#linux自动部署jar包脚本" class="headerlink" title="linux自动部署jar包脚本"></a>linux自动部署jar包脚本</h5><p>jenkins配置</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd /home/tomcat/app/admin-core</span><br><span class="line">nohup sh /home/tomcat/upload/admin-core.sh &gt;&gt; catalina.out 2&gt;&amp;1</span><br></pre></td></tr></table></figure><p>admin-core.sh脚本如下</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#Java Env</span><br><span class="line">export JAVA_HOME=/usr/java</span><br><span class="line">export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin</span><br><span class="line"></span><br><span class="line">port=48094</span><br><span class="line">#根据端口号查询对应的pid</span><br><span class="line">pid=$(netstat -nlp | grep :$port | awk &apos;&#123;print $7&#125;&apos; | awk -F&quot;/&quot; &apos;&#123; print $1 &#125;&apos;);</span><br><span class="line"></span><br><span class="line">#杀掉对应的进程，如果pid不存在，则不执行</span><br><span class="line">if [  -n  &quot;$pid&quot;  ];  then</span><br><span class="line">    kill  -9  $pid;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">rm -r /home/tomcat/app/admin-core/admin-core-0.0.1-SNAPSHOT.jar</span><br><span class="line">mv /home/tomcat/upload/admin-core-0.0.1-SNAPSHOT.jar /home/tomcat/app/admin-core</span><br><span class="line">cd /home/tomcat/app/admin-core</span><br><span class="line">java -Xms256m -Xmx512m -jar /home/tomcat/app/admin-core/admin-core-0.0.1-SNAPSHOT.jar --spring.profiles.active=dev  &amp;</span><br></pre></td></tr></table></figure><h5 id="k8s自动部署后端脚本"><a href="#k8s自动部署后端脚本" class="headerlink" title="k8s自动部署后端脚本"></a>k8s自动部署后端脚本</h5><p><strong>执行shell</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd admin-core</span><br><span class="line">chmod +x ./build.sh</span><br><span class="line">./build.sh prod $BUILD_NUMBER</span><br></pre></td></tr></table></figure><p><strong>gitlab配置</strong></p><p>build.sh</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">#构建有版本号的镜像，以防需要回滚，而且是从镜像创建服务</span><br><span class="line">docker build -t registry-vpc.cn-beijing.aliyuncs.com/lepeng-$1/admin-core-$1:$2     . -f Dockerfile_$1</span><br><span class="line">docker push     registry-vpc.cn-beijing.aliyuncs.com/lepeng-$1/admin-core-$1:$2</span><br><span class="line">#构建latest版本，用于自动部署</span><br><span class="line">docker build -t registry-vpc.cn-beijing.aliyuncs.com/lepeng-$1/admin-core-$1:latest . -f Dockerfile_$1</span><br><span class="line">docker push     registry-vpc.cn-beijing.aliyuncs.com/lepeng-$1/admin-core-$1:latest</span><br></pre></td></tr></table></figure><p>start.sh</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">JARFILE=/home/App.jar</span><br><span class="line">LOGPATH=/home/logs</span><br><span class="line">LOG=/home/logs/App.log</span><br><span class="line"></span><br><span class="line">#日志挂载</span><br><span class="line">ip=`ip addr |grep inet |grep eth0|awk &apos;&#123;print $2&#125;&apos; |awk -F &quot;/&quot; &apos;&#123;print $1&#125;&apos;`</span><br><span class="line">mkdir -p /home/log/gzlp_equity/$ip</span><br><span class="line">cd /var/log</span><br><span class="line">ln -s  /home/log/gzlp_equity/$ip java</span><br><span class="line"></span><br><span class="line">if [ ! -d $LOGPATH ];then</span><br><span class="line">   mkdir -p $LOGPATH</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">java -jar -Xms512m -Xmx1024m -Dskywalking.agent.namespace=prod -Dskywalking.agent.service_name=prod-admin-core -javaagent:/home/skywalking-agent-plugins/agent-prod-bj/skywalking-agent.jar $JARFILE -Djava.security.egd=file:/dev/./urandom --spring.profiles.active=$ACTIVE  &gt;&gt; $LOG &amp;</span><br><span class="line"></span><br><span class="line">tail  -100f $LOG</span><br></pre></td></tr></table></figure><p>Dockerfile_prod</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FROM   registry-vpc.cn-beijing.aliyuncs.com/lepeng/centos:latest</span><br><span class="line">MAINTAINER nmk</span><br><span class="line"></span><br><span class="line">COPY  target/admin-core-0.0.1-SNAPSHOT.jar /home/App.jar</span><br><span class="line">COPY  start.sh /home/start.sh</span><br><span class="line">RUN  mkdir /home/tomcat/</span><br><span class="line">RUN chmod +x /home/start.sh</span><br><span class="line">ENV  JAVA_HOME=/usr/local/java</span><br><span class="line">ENV  PATH $JAVA_HOME/bin:$PATH</span><br><span class="line">ENV  CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class="line">ENV LC_ALL=&quot;en_US.UTF-8&quot;</span><br><span class="line">ENV LANG=&quot;en_US.UTF-8&quot;</span><br><span class="line">ENV ACTIVE=prod</span><br><span class="line"></span><br><span class="line">EXPOSE 48094</span><br><span class="line">CMD [&quot;/home/start.sh&quot;]</span><br></pre></td></tr></table></figure><h5 id="k8s自动部署前端脚本"><a href="#k8s自动部署前端脚本" class="headerlink" title="k8s自动部署前端脚本"></a>k8s自动部署前端脚本</h5><p><strong>执行shell</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd ..</span><br><span class="line">tar zcvf mps-admin-ui.tar mps-admin-ui_tdev</span><br><span class="line">mv mps-admin-ui.tar mps-admin-ui_tdev/docker/</span><br><span class="line">cd mps-admin-ui_tdev/docker/</span><br><span class="line">chmod +x ./build.sh</span><br><span class="line">./build.sh test $BUILD_NUMBER</span><br></pre></td></tr></table></figure><p><strong>gitlab配置</strong></p><p>Dockerfile_test</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FROM   registry-vpc.cn-beijing.aliyuncs.com/lepeng/nginx:latest</span><br><span class="line">MAINTAINER nmk</span><br><span class="line"></span><br><span class="line">COPY mps-admin-ui.tar /home/mps-admin-ui.tar</span><br><span class="line">RUN mv /usr/local/nginx/conf/nginx.conf /usr/local/nginx/conf/nginx.conf.default</span><br><span class="line">RUN tar zxvf /home/mps-admin-ui.tar -C /home/</span><br><span class="line">RUN mv /home/mps-admin-ui_tdev/docker/nginx.conf /usr/local/nginx/conf/nginx.conf</span><br><span class="line">COPY start.sh /home/start.sh</span><br><span class="line">RUN chmod +x /home/start.sh</span><br><span class="line"></span><br><span class="line">EXPOSE 80</span><br><span class="line">CMD [&quot;/home/start.sh&quot;]</span><br></pre></td></tr></table></figure><p>build.sh</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">#构建有版本号的镜像，以防需要回滚，而且是从镜像创建服务</span><br><span class="line">docker build -t registry-vpc.cn-beijing.aliyuncs.com/lepeng-$1/mps-admin-ui-$1:$2     . -f Dockerfile_$1</span><br><span class="line">docker push     registry-vpc.cn-beijing.aliyuncs.com/lepeng-$1/mps-admin-ui-$1:$2</span><br><span class="line">#构建latest版本，用于自动部署</span><br><span class="line">docker build -t registry-vpc.cn-beijing.aliyuncs.com/lepeng-$1/mps-admin-ui-$1:latest . -f Dockerfile_$1</span><br><span class="line">docker push     registry-vpc.cn-beijing.aliyuncs.com/lepeng-$1/mps-admin-ui-$1:latest</span><br></pre></td></tr></table></figure><p>start.sh</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">mv /home/mps-admin-ui_tdev /home/mps-admin-ui</span><br><span class="line">cd /usr/local/nginx</span><br><span class="line">./sbin/nginx</span><br><span class="line">./sbin/nginx -t</span><br><span class="line">echo &quot;nginx Start successfully&quot; &gt;&gt; nginx.log</span><br><span class="line">tail -10f nginx.log</span><br></pre></td></tr></table></figure><p>nginx.conf</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">user nginx nginx;</span><br><span class="line">worker_processes  8;</span><br><span class="line">error_log   logs/error_log;</span><br><span class="line">#error_log  logs/error.log  notice;</span><br><span class="line">#error_log  logs/error.log  info;</span><br><span class="line">pid         /usr/local/nginx/logs/nginx.pid;</span><br><span class="line">worker_rlimit_nofile 51200;</span><br><span class="line">events &#123;</span><br><span class="line">    use epoll;</span><br><span class="line">    worker_connections  51200;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">         server_names_hash_bucket_size 512;</span><br><span class="line">         client_header_buffer_size 512k;</span><br><span class="line">         large_client_header_buffers 4 256k;</span><br><span class="line">         client_max_body_size             100m;</span><br><span class="line">         client_body_buffer_size        10m;</span><br><span class="line">         client_header_timeout     3m;</span><br><span class="line">         client_body_timeout 3m;</span><br><span class="line">         send_timeout             3m;</span><br><span class="line"> server_tokens off;</span><br><span class="line">    sendfile        on;</span><br><span class="line">      #tcp_nopush     on;</span><br><span class="line">      keepalive_timeout 120;</span><br><span class="line">      tcp_nodelay on;</span><br><span class="line">        proxy_buffering on;</span><br><span class="line">    # 开启gzip</span><br><span class="line">    gzip on;</span><br><span class="line">    # 启用gzip压缩的最小文件，小于设置值的文件将不会压缩</span><br><span class="line">    gzip_min_length 1k;</span><br><span class="line">    # gzip 压缩级别，1-10，数字越大压缩的越好，也越占用CPU时间。一般设置1和2</span><br><span class="line">    gzip_comp_level 2;</span><br><span class="line">    gzip_buffers 4 8k;</span><br><span class="line">    gzip_http_version 1.1;</span><br><span class="line">    # 进行压缩的文件类型。javascript有多种形式。其中的值可以在 mime.types 文件中找到。</span><br><span class="line">    gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;</span><br><span class="line">    # 是否在http header中添加Vary: Accept-Encoding，建议开启</span><br><span class="line">    gzip_vary on;</span><br><span class="line">    # 禁用IE 6 gzip</span><br><span class="line">    gzip_disable &quot;MSIE [1-6]\.&quot;;</span><br><span class="line">    #设置缓存路径并且使用一块最大100M的共享内存，用于硬盘上的文件索引，包括文件名和请求次数，每个文件在1天内若不活跃（无请求）则从硬盘上淘汰，硬盘缓存最大10G，满了则根据LRU算法自动清除缓存。</span><br><span class="line">    proxy_connect_timeout 10;</span><br><span class="line">    proxy_read_timeout 180;</span><br><span class="line">    proxy_send_timeout 5;</span><br><span class="line">    proxy_buffer_size 16k;</span><br><span class="line">    proxy_buffers 4 32k;</span><br><span class="line">    proxy_busy_buffers_size 96k;</span><br><span class="line">    proxy_temp_file_write_size 96k;</span><br><span class="line">    proxy_temp_path /tmp/temp_dir;</span><br><span class="line">    #proxy_cache_path /var/cache/nginx/cache levels=1:2 keys_zone=imgcache:100m inactive=1d max_size=10g;</span><br><span class="line">log_format  main  &apos;[$remote_addr] - [$remote_user] [$time_local] [$request] [$status] [$body_bytes_sent] [$http_referer] [$http_user_agent] [$http_x_forwarded_for] [$request_time] [$upstream_response_time] [$upstream_addr] [$upstream_status]&apos;;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  tdev.gzlplink.com;</span><br><span class="line">                add_header backendIP $upstream_addr;   #把后端具体的 upstream 返回给前端 header</span><br><span class="line">                add_header backendCode $upstream_status;</span><br><span class="line">                include proxy.conf;</span><br><span class="line">                access_log /data1/logs/nginx/tdev.gzlplink.com-access_log main;</span><br><span class="line">                error_log /data1/logs/nginx/tdev.gzlplink.com-error_log;</span><br><span class="line">        </span><br><span class="line">        location /mps-admin-ui &#123;</span><br><span class="line">                root /home/;</span><br><span class="line">                index  index.html index.htm;</span><br><span class="line">                if ( -d $request_filename )&#123;</span><br><span class="line">    rewrite ^/(.*)([^/])$ $scheme://$host/$1$2/ permanent;</span><br><span class="line">        &#125;</span><br><span class="line">                log_not_found off;</span><br><span class="line">                # 关闭日志</span><br><span class="line">                access_log off;</span><br><span class="line">                # 缓存时间7天</span><br><span class="line">                expires 7d;</span><br><span class="line">                # 指定上面设置的缓存区域</span><br><span class="line">                #proxy_cache imgcache;</span><br><span class="line">                # 缓存过期管理</span><br><span class="line">                proxy_cache_valid 200 302 1d;</span><br><span class="line">                proxy_cache_valid 404 10m;</span><br><span class="line">                proxy_cache_valid any 1h;</span><br><span class="line">                proxy_cache_use_stale error timeout invalid_header updating http_500 http_502 http_503 http_504;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="通过jenkins更新生产的nginx"><a href="#通过jenkins更新生产的nginx" class="headerlink" title="通过jenkins更新生产的nginx"></a>通过jenkins更新生产的nginx</h5><img src="https://nmk0718.github.io/image/image-20200828165059543.png" alt><img src="https://nmk0718.github.io/image/image-20200824111256188.png" alt><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@iZ2ze18q1ojbig8zevjrbuZ nginx]# cat nginx_reload </span><br><span class="line">#/bin/bash</span><br><span class="line">check_status=&quot;`/usr/local/nginx/sbin/nginx -t  2&gt;&amp;1`&quot;</span><br><span class="line"></span><br><span class="line">if [ $? -eq 0 ]; then</span><br><span class="line">     #echo &quot;nginx configure file ok&quot;</span><br><span class="line">     echo $check_status</span><br><span class="line">    /usr/local/nginx/sbin/nginx  -s reload</span><br><span class="line">else</span><br><span class="line">    #echo &quot;nginx configure file failed&quot;</span><br><span class="line">    echo $check_stutus</span><br><span class="line">exit    </span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h5 id="jenkins-newman实现接口测试"><a href="#jenkins-newman实现接口测试" class="headerlink" title="jenkins+newman实现接口测试"></a>jenkins+newman实现接口测试</h5><p>安装newman</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@public-service jenkins]# npm install -g newman</span><br><span class="line">npm WARN deprecated har-validator@5.1.5: this library is no longer supported</span><br><span class="line">npm WARN deprecated uuid@3.4.0: Please upgrade  to version 7 or higher.  Older versions may use Math.random() in certain circumstances, which is known to be problematic.  See https://v8.dev/blog/math-random for details.</span><br><span class="line">/home/.npm-global/bin/newman -&gt; /home/.npm-global/lib/node_modules/newman/bin/newman.js</span><br><span class="line">+ newman@5.2.4</span><br><span class="line">added 128 packages from 187 contributors in 20.745s</span><br><span class="line">[root@public-service jenkins]# newman -v</span><br><span class="line">5.2.4</span><br></pre></td></tr></table></figure><p>通过postman生成json文件</p><img src="https://nmk0718.github.io/image/image-20210629094214541.png" alt><p>通过newman请求该接口进行测试</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@public-service jenkins]# newman run -r cli test.postman_collection.json </span><br><span class="line">newman: could not find &quot;html&quot; reporter</span><br><span class="line">  ensure that the reporter is installed in the same directory as newman</span><br><span class="line">  run `npm install newman-reporter-html`</span><br><span class="line"></span><br><span class="line">newman</span><br><span class="line"></span><br><span class="line">test</span><br><span class="line"></span><br><span class="line">→ https://test.com/doctor-api/v2_0/optimalmall/getProduct</span><br><span class="line">  POST https://test.com/doctor-api/v2_0/optimalmall/getProduct [200 OK, 5.84KB, 868ms]</span><br><span class="line"></span><br><span class="line">┌─────────────────────────┬────────────────────┬───────────────────┐</span><br><span class="line">│                         │           executed │            failed │</span><br><span class="line">├─────────────────────────┼────────────────────┼───────────────────┤</span><br><span class="line">│              iterations │                  1 │                 0 │</span><br><span class="line">├─────────────────────────┼────────────────────┼───────────────────┤</span><br><span class="line">│                requests │                  1 │                 0 │</span><br><span class="line">├─────────────────────────┼────────────────────┼───────────────────┤</span><br><span class="line">│            test-scripts │                  0 │                 0 │</span><br><span class="line">├─────────────────────────┼────────────────────┼───────────────────┤</span><br><span class="line">│      prerequest-scripts │                  0 │                 0 │</span><br><span class="line">├─────────────────────────┼────────────────────┼───────────────────┤</span><br><span class="line">│              assertions │                  0 │                 0 │</span><br><span class="line">├─────────────────────────┴────────────────────┴───────────────────┤</span><br><span class="line">│ total run duration: 892ms                                        │</span><br><span class="line">├──────────────────────────────────────────────────────────────────┤</span><br><span class="line">│ total data received: 5.47KB (approx)                             │</span><br><span class="line">├──────────────────────────────────────────────────────────────────┤</span><br><span class="line">│ average response time: 868ms [min: 868ms, max: 868ms, s.d.: 0µs] │</span><br><span class="line">└──────────────────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><p>newman命令</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">newman run  用例json文件路径</span><br><span class="line">-e 环境变量文件地址</span><br><span class="line">-g 全局变量文件地址</span><br><span class="line">--delay-request 请求间的delay时长，单位为毫秒</span><br><span class="line">--folder 文件夹路径，运行指定文件夹下的用例</span><br><span class="line">-n,--iteration-count number，collection执行的次数</span><br><span class="line">--export-environment path，执行用例后将环境变量导出</span><br><span class="line">--export-globals  path，执行用例后将全局变量导出</span><br></pre></td></tr></table></figure><p>导出报告</p><p>Cli</p><p>在console中生成报告</p><img src="https://nmk0718.github.io/image/image-20210629094559461.png" alt><p>HTML</p><p>作为一种external报告方式，html reporter需要安装：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g newman-reporter-html</span><br><span class="line"></span><br><span class="line">[root@public-service jenkins]# newman run test.postman_collection.json  -r html</span><br><span class="line">[root@public-service jenkins]# cd newman/</span><br><span class="line">[root@public-service newman]# ls</span><br><span class="line">newman-run-report-2021-06-29-01-35-46-951-0.html</span><br></pre></td></tr></table></figure><img src="https://nmk0718.github.io/image/image-20210629094719897.png" alt>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;Jenkins是什么？&quot;&gt;&lt;a href=&quot;#Jenkins是什么？&quot; class=&quot;headerlink&quot; title=&quot;Jenkins是什么？&quot;&gt;&lt;/a&gt;Jenkins是什么？&lt;/h4&gt;&lt;p&gt;Jenkins是一个开源的、可扩展的持续集成、交付、部署（软件/代码</summary>
      
    
    
    
    
    <category term="Jenkins" scheme="https://nmk0718.github.io/tag/Jenkins/"/>
    
  </entry>
  
  <entry>
    <title>Flutter</title>
    <link href="https://nmk0718.github.io/2021/03/27/Flutter/"/>
    <id>https://nmk0718.github.io/2021/03/27/Flutter/</id>
    <published>2021-03-27T06:50:00.000Z</published>
    <updated>2024-11-29T06:43:24.921Z</updated>
    
    <content type="html"><![CDATA[<h5 id="安全区域"><a href="#安全区域" class="headerlink" title="安全区域"></a>安全区域</h5><p>当直接使用小部件时会出现在左上角的状态栏附近</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &apos;package:flutter/material.dart&apos;;</span><br><span class="line"></span><br><span class="line">void main() &#123;</span><br><span class="line">  runApp(</span><br><span class="line">    MaterialApp(</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        backgroundColor: Colors.teal,</span><br><span class="line">        body: Container(</span><br><span class="line">          child: Text(&quot;Hello,nmk&quot;),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    ),</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="\image\image-20210306164220893.png"><p>使用Safeared进行摆放到安全区域</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &apos;package:flutter/material.dart&apos;;</span><br><span class="line"></span><br><span class="line">void main() &#123;</span><br><span class="line">  runApp(</span><br><span class="line">    MaterialApp(</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        backgroundColor: Colors.teal,</span><br><span class="line">        body: SafeArea(</span><br><span class="line">          child: Container(</span><br><span class="line">            child: Text(&quot;Hello,nmk&quot;),</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    ),</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="\image\image-20210306164517482.png"><p>圆形控件</p><p>可展示用户头像</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">                child: CircleAvatar(</span><br><span class="line">                  radius: 50.0,</span><br><span class="line">                  backgroundImage:</span><br><span class="line">                      NetworkImage(&apos;https://s3.ax1x.com/2021/03/02/6FUzNt.jpg&apos;),</span><br><span class="line">                ),</span><br><span class="line">NetworkImage 网络加载</span><br><span class="line">AssetImage 本地加载</span><br></pre></td></tr></table></figure><p>效果图</p><img src="\image\image-20210306172349708.png"><h5 id="文本样式"><a href="#文本样式" class="headerlink" title="文本样式"></a>文本样式</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Text(</span><br><span class="line">  &quot;FlUTTER DEVELOPER&quot;,</span><br><span class="line">  style: TextStyle(</span><br><span class="line">      fontFamily: &apos;SourceSansPro&apos;,</span><br><span class="line">      color: Colors.white,</span><br><span class="line">      fontSize: 20,</span><br><span class="line">      letterSpacing: 2.5,</span><br><span class="line">      fontWeight: FontWeight.bold),</span><br><span class="line">      textAlign: TextAlign.left,</span><br><span class="line">),</span><br></pre></td></tr></table></figure><p><code>color</code>: 文字颜色</p><p><code>fontStyle</code>: 文字样式  斜体和正常</p><p><code>fontWeight</code>: 字体粗细  粗体和正常</p><p><code>letterSpacing</code>: 字母间隙(负值可以让字母更紧凑)</p><p><code>textAlign</code>：文本的对齐方式；可以选择左对齐、右对齐还是居中。</p><p><code>height</code>：该属性用于指定行高，但它并不是一个绝对值，而是一个因子，具体的行高等于<code>fontSize</code>*<code>height</code>。</p><p><code>fontFamily</code> ：指定字体,由于不同平台默认支持的字体集不同，所以在手动指定字体时一定要先在不同平台测试一下。</p><p><code>fontSize</code>：该属性和Text的<code>textScaleFactor</code>都用于控制字体大小。但是有两个主要区别：</p><ul><li><code>fontSize</code>可以精确指定字体大小，而<code>textScaleFactor</code>只能通过缩放比例来控制。</li><li><code>textScaleFactor</code>主要是用于系统字体大小设置改变时对Flutter应用字体进行全局调整，而<code>fontSize</code>通常用于单个文本，字体大小不会跟随系统字体大小变化。</li></ul><p><code>maxLines</code>、<code>overflow</code>：指定文本显示的最大行数，默认情况下，文本是自动折行的，如果指定此参数，则文本最多不会超过指定的行。如果有多余的文本，可以通过<code>overflow</code>来指定截断方式，默认是直接截断 TextOverflow.clip剪裁   TextOverflow.fade 渐隐  TextOverflow.ellipsis省略号</p><p><code>textScaleFactor</code>：代表文本相对于当前字体大小的缩放因子，相对于去设置文本的样式<code>style</code>属性的<code>fontSize</code>，它是调整字体大小的一个快捷方式。该属性的默认值可以通过<code>MediaQueryData.textScaleFactor</code>获得，如果没有<code>MediaQuery</code>，那么会默认值将为1.0。</p><h5 id="添加字体"><a href="#添加字体" class="headerlink" title="添加字体"></a>添加字体</h5><p>可以在Flutter应用程序中使用不同的字体。例如，<a href="https://fonts.google.com/" target="_blank" rel="noopener">Google Fonts (opens new window)</a>中的字体。</p><p>在Flutter中使用字体分两步完成。首先在<code>pubspec.yaml</code>中声明它们，以确保它们会打包到应用程序中。然后通过<a href="https://docs.flutter.io/flutter/painting/TextStyle-class.html" target="_blank" rel="noopener"><code>TextStyle</code> (opens new window)</a>属性使用字体。</p><h5 id="在asset中声明"><a href="#在asset中声明" class="headerlink" title="在asset中声明"></a>在asset中声明</h5><p>要将字体文件打包到应用中，和使用其它资源一样，要先在<code>pubspec.yaml</code>中声明它。然后将字体文件复制到在<code>pubspec.yaml</code>中指定的位置。如：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">flutter:</span></span><br><span class="line">  <span class="attr">fonts:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">family:</span> <span class="string">Pacifico</span></span><br><span class="line">    <span class="attr">fonts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">asset:</span> <span class="string">fonts/Pacifico-Regular.ttf</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">family:</span> <span class="string">SourceSansPro</span></span><br><span class="line">    <span class="attr">fonts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">asset:</span> <span class="string">fonts/SourceSansPro-Regular.ttf</span></span><br></pre></td></tr></table></figure><h5 id="使用字体"><a href="#使用字体" class="headerlink" title="使用字体"></a>使用字体</h5><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Text(</span><br><span class="line">  <span class="string">"FlUTTER DEVELOPER"</span>,</span><br><span class="line">  style: TextStyle(</span><br><span class="line">      fontFamily: <span class="string">'SourceSansPro'</span>,</span><br><span class="line">),</span><br></pre></td></tr></table></figure><h5 id="添加水平横线"><a href="#添加水平横线" class="headerlink" title="添加水平横线"></a>添加水平横线</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SizedBox(</span><br><span class="line">    height: 20.0,</span><br><span class="line">    width: 180.0,</span><br><span class="line">    child: Divider(</span><br><span class="line">      color: Colors.teal.shade100,</span><br><span class="line">    )),</span><br></pre></td></tr></table></figure><h5 id="更改图标文件"><a href="#更改图标文件" class="headerlink" title="更改图标文件"></a>更改图标文件</h5><p><a href="https://www.iconfont.cn/查找到喜欢的图标" target="_blank" rel="noopener">https://www.iconfont.cn/查找到喜欢的图标</a></p><p><a href="https://appicon.co/" target="_blank" rel="noopener">https://appicon.co/</a> 把图标生成为ios和android可以使用的图标文件</p><h5 id="Expanded"><a href="#Expanded" class="headerlink" title="Expanded"></a>Expanded</h5><p>Expanded是用于展开<code>Row</code>，<code>Column</code>或<code>Flex</code>的子<code>child</code>的Widget。 </p><p>使用<code>Expanded</code>可以使[Row]，[Column]或[Flex]的子项扩展以填充主轴中的可用空间（例如，水平用[Row]或垂直用[Column]）。 </p><p>如果扩展了多个子节点，则根据<code>[flex]</code>因子将可用空间划分为多个子节点。</p><p> [Expanded]小部件必须是[Row]，[Column]或[Flex]的后代，并且从[Expanded]小部件到其封闭的[Row]，[Column]或[Flex]的路径必须包含 只有[StatelessWidget]或[StatefulWidget]</p><p>构造函数</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const Expanded(&#123;</span><br><span class="line">    Key key,</span><br><span class="line">    int flex = 1,</span><br><span class="line">    @required Widget child,</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><ul><li>flex 分配空间的弹性系数，<code>Row</code>，<code>Column</code>或<code>Flex</code>的每个Expanded的flex构成空间分配的比例，默认<code>int flex = 1</code></li><li>child 即需要分配的子Widget</li></ul><p>示例</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Expanded(</span><br><span class="line">  child: FlatButton(</span><br><span class="line">    color: Colors.red,</span><br><span class="line">    onPressed: () &#123;&#125;,</span><br><span class="line">  ),</span><br><span class="line">),</span><br><span class="line">Expanded(</span><br><span class="line">  child: FlatButton(</span><br><span class="line">    color: Colors.orange,</span><br><span class="line">    onPressed: () &#123;&#125;,</span><br><span class="line">  ),</span><br><span class="line">),</span><br></pre></td></tr></table></figure><p>默认flex为1 所以颜色按比例1:1分配</p><img src="\image\image-20210316181002701.png" alt="image-20210316181002701" style="zoom:50%;"><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Expanded(</span><br><span class="line">  flex: 2,</span><br><span class="line">  child: FlatButton(</span><br><span class="line">    color: Colors.red,</span><br><span class="line">    onPressed: () &#123;&#125;,</span><br><span class="line">  ),</span><br><span class="line">),</span><br><span class="line">Expanded(</span><br><span class="line">  child: FlatButton(</span><br><span class="line">    color: Colors.orange,</span><br><span class="line">    onPressed: () &#123;&#125;,</span><br><span class="line">  ),</span><br><span class="line">),</span><br></pre></td></tr></table></figure><p>默认flex为2 所以颜色按比例2:1分配</p><img src="\image\image-20210316181208812.png" alt="image-20210316181208812" style="zoom50%;"><h5 id="内边距"><a href="#内边距" class="headerlink" title="内边距"></a>内边距</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">padding: EdgeInsets.only(left: 12,top: 12,bottom: 12),</span><br></pre></td></tr></table></figure><h5 id="外边距"><a href="#外边距" class="headerlink" title="外边距"></a>外边距</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">margin: EdgeInsets.only(top:4),</span><br></pre></td></tr></table></figure><h5 id="flutter内容超出屏幕"><a href="#flutter内容超出屏幕" class="headerlink" title="flutter内容超出屏幕"></a>flutter内容超出屏幕</h5><p>编写flutter代码的时候，如果超出手机屏幕高度的话是会出错的，需要使用SingleChildScrollView来包裹</p><p>SingleChildScrollView和container用发一样， 直接包在外层就好了，里面是child’<br>它可以在主题内容超出Y轴的时候自动生成滚动条，类似overflow：auto<br>类似如下用法</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">return SingleChildScrollView(</span><br><span class="line">child: Container(</span><br><span class="line">child .....</span><br><span class="line">)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>进入flutter_app的android&gt;app&gt;src&gt;main&gt;res目录</p><img src="\image\image-20210303180252077.png" alt="image-20210303180252077" style="zoom:50%;"><h5 id="浮动按钮"><a href="#浮动按钮" class="headerlink" title="浮动按钮"></a>浮动按钮</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">return Scaffold(</span><br><span class="line">  floatingActionButton: FloatingActionButton(</span><br><span class="line">    child: IconButton(icon: Icon(Icons.add),onPressed: ()&#123;&#125;,),</span><br><span class="line">  ),</span><br><span class="line">  floatingActionButtonLocation: FloatingActionButtonLocation.centerDocked,</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>写在scaffold的里面</p><p>通过floatingActionButtonLocation: FloatingActionButtonLocation.来控制浮动的位置</p><h5 id="routes"><a href="#routes" class="headerlink" title="routes"></a>routes</h5><p>默认页面的三种方式</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">第一种方式:</span><br><span class="line">routes: &#123;</span><br><span class="line">          &apos;/&apos;: (context) =&gt; home(),</span><br><span class="line">        &#125;,</span><br><span class="line">第二种方式:</span><br><span class="line">home: home(),</span><br><span class="line">第三种方式:</span><br><span class="line">        initialRoute: &apos;/home&apos;,</span><br></pre></td></tr></table></figure><h5 id="ListTitle"><a href="#ListTitle" class="headerlink" title="ListTitle"></a>ListTitle</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const ListTile(&#123;</span><br><span class="line">    Key key,</span><br><span class="line">    this.leading, //左侧的组件</span><br><span class="line">    this.title, //中间的主标题</span><br><span class="line">    this.subtitle, //中间的副标题</span><br><span class="line">    this.trailing, //右侧组件，通常是一个值或者一个图标</span><br><span class="line">    this.isThreeLine = false, //是否显示三行</span><br><span class="line">    this.dense, //是否以垂直密集的方式显示，这样文字会更小</span><br><span class="line">    this.visualDensity,</span><br><span class="line">    this.shape, //定义外观形状</span><br><span class="line">    this.contentPadding, //内容与边框之间的边距，默认16</span><br><span class="line">    this.enabled = true, //是否可以互动事件</span><br><span class="line">    this.onTap, //点击事件</span><br><span class="line">    this.onLongPress, //长按事件</span><br><span class="line">    this.mouseCursor, //鼠标悬停在ListTile上时的处理效果，给web用的</span><br><span class="line">    this.selected = false, //如果是true，文本和图标将会以相同的颜色呈现</span><br><span class="line">    this.focusColor, </span><br><span class="line">    this.hoverColor, //指针悬停在ListTile上的颜色</span><br><span class="line">    this.focusNode, //聚焦事件</span><br><span class="line">    this.autofocus = false, //是否默认聚焦</span><br><span class="line">    this.tileColor, //listTile的背景颜色，selected=false时生效</span><br><span class="line">    this.selectedTileColor, //listTile的背景颜色，selected=true时生效</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><h5 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h5><p> 定义没有返回值的方法</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void name ()&#123;&#125;;</span><br></pre></td></tr></table></figure><p>定义有返回值的方法</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">String name()&#123;</span><br><span class="line">return abc;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int name()&#123;</span><br><span class="line">return 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bool name()&#123;</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="flutter导航"><a href="#flutter导航" class="headerlink" title="flutter导航"></a>flutter导航</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Navigator.push(context, MaterialPageRoute(builder: (context)&#123;return InputPage();&#125;,));</span><br><span class="line">#push导航到新的页面</span><br><span class="line"></span><br><span class="line">Navigator.pop(context);</span><br><span class="line">#pop销毁当前页面</span><br><span class="line"></span><br><span class="line">Navigator.pushNamed(context, &apos;/&apos;);</span><br><span class="line">#pushNamed通过路由名进行导航</span><br></pre></td></tr></table></figure><h5 id="根据设备类型显示不同小部件"><a href="#根据设备类型显示不同小部件" class="headerlink" title="根据设备类型显示不同小部件"></a>根据设备类型显示不同小部件</h5><p>方法一</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">引入包</span><br><span class="line">import &apos;dart:io&apos;;</span><br><span class="line"></span><br><span class="line">通过if进行判断设备返回不同小部件</span><br><span class="line">Widget getPicker() &#123;</span><br><span class="line">    if (Platform.isIOS) &#123;</span><br><span class="line">      return iosPicker();</span><br><span class="line">    &#125; else if (Platform.isAndroid) &#123;</span><br><span class="line">      return androidDorpdown();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">调用该方法</span><br><span class="line">          Container(</span><br><span class="line">              height: 100.0,</span><br><span class="line">              alignment: Alignment.center,</span><br><span class="line">              color: Colors.lightBlue,</span><br><span class="line">              child: getPicker()),</span><br></pre></td></tr></table></figure><p>方法二</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Container(</span><br><span class="line">  height: 120.0,</span><br><span class="line">  alignment: Alignment.center,</span><br><span class="line">  padding: EdgeInsets.only(bottom: 30.0),</span><br><span class="line">  color: Colors.lightBlue,</span><br><span class="line">  child: Platform.isIOS ? iosPicker() : androidDorpdown(),</span><br><span class="line">),</span><br></pre></td></tr></table></figure><h5 id="import中的含义"><a href="#import中的含义" class="headerlink" title="import中的含义"></a>import中的含义</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &apos;dart:io&apos; show Platform;</span><br><span class="line">只导入Platform</span><br><span class="line">import &apos;dart:io&apos; hide Platform;</span><br><span class="line">除了Platform都导入</span><br><span class="line">import &apos;dart:io&apos; as http;</span><br><span class="line">讲库重命名避免冲突</span><br></pre></td></tr></table></figure><h5 id="调用键盘时出现黄条-空间不够"><a href="#调用键盘时出现黄条-空间不够" class="headerlink" title="调用键盘时出现黄条 空间不够"></a>调用键盘时出现黄条 空间不够</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">加入Flexible</span><br><span class="line"></span><br><span class="line">              Flexible(</span><br><span class="line">                child: Hero(</span><br><span class="line">                  tag: &apos;logo&apos;,</span><br><span class="line">                  child: Container(</span><br><span class="line">                    height: 200.0,</span><br><span class="line">                    child: Image.asset(&apos;images/logo.png&apos;),</span><br><span class="line">                  ),</span><br><span class="line">                ),</span><br><span class="line">              ),</span><br></pre></td></tr></table></figure><p>会在调用键盘时 缩小该Widget</p><h4 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h4><h4 id="iOS"><a href="#iOS" class="headerlink" title="iOS"></a>iOS</h4><p><strong>Cupertino风格</strong></p><h5 id="CupertinoActivityIndicator"><a href="#CupertinoActivityIndicator" class="headerlink" title="CupertinoActivityIndicator"></a>CupertinoActivityIndicator</h5><table><thead><tr><th>加载中组件</th><th></th></tr></thead><tbody><tr><td>radius</td><td>默认10 加载图形的半径值</td></tr><tr><td>animating</td><td>默认true 是否播放加载动画</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CupertinoActivityIndicator(</span><br><span class="line">            animating: <span class="literal">true</span>,</span><br><span class="line">            radius: 10.0,</span><br><span class="line">          )</span><br></pre></td></tr></table></figure><h5 id="CupertinoAlertDialog"><a href="#CupertinoAlertDialog" class="headerlink" title="CupertinoAlertDialog"></a>CupertinoAlertDialog</h5><table><thead><tr><th>对话框</th><th></th></tr></thead><tbody><tr><td>action: List</td><td>对话框底部按钮</td></tr><tr><td>title</td><td>标题</td></tr><tr><td>content</td><td>内容</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_MyHomePageState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">MyHomePage</span>&gt; </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">_showIOSDialog</span><span class="params">(BuildContext cxt)</span> </span>&#123;</span><br><span class="line">    showCupertinoDialog&lt;<span class="keyword">int</span>&gt;(</span><br><span class="line">        context: cxt,</span><br><span class="line">        builder: (cxt) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">new</span> CupertinoAlertDialog(</span><br><span class="line">            title: Text(<span class="string">'提示'</span>),</span><br><span class="line">            content: Text(<span class="string">'是否退出应用'</span>),</span><br><span class="line">            actions: &lt;Widget&gt;[</span><br><span class="line">              <span class="keyword">new</span> Container(</span><br><span class="line">                decoration: BoxDecoration(</span><br><span class="line">                    border: Border(</span><br><span class="line">                        right: BorderSide(color: Color(<span class="number">0xFFD9D9D9</span>), width: <span class="number">0.5</span>),</span><br><span class="line">                        top: BorderSide(color: Color(<span class="number">0xFFD9D9D9</span>), width: <span class="number">0.5</span>))),</span><br><span class="line">                child: CupertinoDialogAction(</span><br><span class="line">                  child: <span class="keyword">new</span> Text(<span class="string">"确定"</span>),</span><br><span class="line">                  onPressed: () &#123;</span><br><span class="line">                    Navigator.pop(context);</span><br><span class="line">                  &#125;,</span><br><span class="line">                ),</span><br><span class="line">              ),</span><br><span class="line">              <span class="keyword">new</span> Container(</span><br><span class="line">                decoration: BoxDecoration(</span><br><span class="line">                    border: Border(</span><br><span class="line">                        top: BorderSide(color: Color(<span class="number">0xFFD9D9D9</span>), width: <span class="number">0.5</span>))),</span><br><span class="line">                child: CupertinoDialogAction(</span><br><span class="line">                  child: <span class="keyword">new</span> Text(<span class="string">"取消"</span>),</span><br><span class="line">                  onPressed: () &#123;</span><br><span class="line">                    Navigator.pop(context);</span><br><span class="line">                  &#125;,</span><br><span class="line">                ),</span><br><span class="line">              )</span><br><span class="line">            ],</span><br><span class="line">          );</span><br><span class="line">        &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="function">Widget <span class="title">build</span><span class="params">(BuildContext context)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Scaffold(</span><br><span class="line">        appBar: <span class="keyword">new</span> AppBar(title: <span class="function"><span class="keyword">const</span> <span class="title">Text</span><span class="params">(<span class="string">'首页'</span>)</span>),</span></span><br><span class="line"><span class="function">        body: new <span class="title">Container</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">          alignment: Alignment.center,</span></span></span><br><span class="line"><span class="function"><span class="params">          child: RaisedButton(</span></span></span><br><span class="line"><span class="function"><span class="params">            onPressed: ()</span> </span>=&gt; &#123;_showIOSDialog(context)&#125;,</span><br><span class="line">            child: Text(<span class="string">'点我弹框'</span>),</span><br><span class="line">          ),</span><br><span class="line">        ));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="CupertinoButton"><a href="#CupertinoButton" class="headerlink" title="CupertinoButton"></a>CupertinoButton</h5><p>展示IOS风格按钮<br>color 组件颜色<br>disableColor 禁用颜色<br>onPressed 按下事件<br>child 显示按钮的文本<br>enable 是否禁用</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">CupertinoButton(</span><br><span class="line">            <span class="comment">//按钮控件布局</span></span><br><span class="line">            child: Text(<span class="string">'IOS风格按钮'</span>),</span><br><span class="line">            <span class="comment">//内边距</span></span><br><span class="line">            padding:EdgeInsets.all(<span class="number">10.0</span>),</span><br><span class="line">            <span class="comment">//背景颜色</span></span><br><span class="line">            color:Colors.blue,</span><br><span class="line">            <span class="comment">//onPress 为 null，禁用点击的背景颜色</span></span><br><span class="line">            disabledColor:Colors.grey,</span><br><span class="line">            <span class="comment">//最小尺寸</span></span><br><span class="line">            minSize : <span class="number">44.0</span>,</span><br><span class="line">            <span class="comment">//按下的透明度</span></span><br><span class="line">            pressedOpacity : <span class="number">0.1</span>,</span><br><span class="line">            <span class="comment">//边框圆角</span></span><br><span class="line">            borderRadius : <span class="keyword">const</span> BorderRadius.all(Radius.circular(<span class="number">8.0</span>)),</span><br><span class="line">            <span class="comment">//点击事件</span></span><br><span class="line">            onPressed:()=&gt;&#123;</span><br><span class="line">              <span class="built_in">print</span>(<span class="string">'点我干嘛'</span>)</span><br><span class="line">            &#125;</span><br><span class="line">          )</span><br></pre></td></tr></table></figure><h5 id="CupertinoDialogAction"><a href="#CupertinoDialogAction" class="headerlink" title="CupertinoDialogAction"></a>CupertinoDialogAction</h5><p>通常用于CupertinoAlertDialog的一个button</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">CupertinoDialogAction(</span><br><span class="line">                  child: <span class="keyword">new</span> Text(<span class="string">"确定"</span>),</span><br><span class="line">                  <span class="comment">//是否为默认按钮</span></span><br><span class="line">                  isDefaultAction: <span class="literal">true</span>,</span><br><span class="line">                  <span class="comment">//是否为取消操作按钮</span></span><br><span class="line">                  isDestructiveAction: <span class="literal">true</span>,</span><br><span class="line">                  onPressed: () &#123;</span><br><span class="line">                    Navigator.pop(context);</span><br><span class="line">                  &#125;,</span><br><span class="line">                )</span><br></pre></td></tr></table></figure><h5 id="CupertinoSlider"><a href="#CupertinoSlider" class="headerlink" title="CupertinoSlider"></a>CupertinoSlider</h5><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">CupertinoSlider(</span><br><span class="line">            <span class="comment">//当前进度值</span></span><br><span class="line">            value:_progress,</span><br><span class="line">            <span class="comment">//进度条监听事件</span></span><br><span class="line">            onChanged:(progress) =&gt; &#123;</span><br><span class="line">              _progress = progress,</span><br><span class="line">              <span class="built_in">print</span>(<span class="string">"_progress<span class="subst">$_progress</span>"</span>),</span><br><span class="line">              setState(()&#123;</span><br><span class="line">              &#125;)</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">//进度条开始监听</span></span><br><span class="line">            onChangeStart:(progress) =&gt; &#123;</span><br><span class="line">              <span class="built_in">print</span>(<span class="string">"onChangeStart<span class="subst">$progress</span>"</span>),</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">//进度条结束监听</span></span><br><span class="line">            onChangeEnd:(progress) =&gt; &#123;</span><br><span class="line">              <span class="built_in">print</span>(<span class="string">"onChangeEnd<span class="subst">$progress</span>"</span>),</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">//进度条最小值</span></span><br><span class="line">            min : <span class="number">0.0</span>,</span><br><span class="line">            <span class="comment">//进度条最大值</span></span><br><span class="line">            max : <span class="number">100.0</span>,</span><br><span class="line">            <span class="comment">//进度条分成多少分</span></span><br><span class="line">            divisions:<span class="number">1</span>,</span><br><span class="line">            <span class="comment">//进度条颜色</span></span><br><span class="line">            activeColor:Colors.blue,</span><br><span class="line">          )</span><br></pre></td></tr></table></figure><h5 id="CupertinoSwitch"><a href="#CupertinoSwitch" class="headerlink" title="CupertinoSwitch"></a>CupertinoSwitch</h5><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">CupertinoSwitch(</span><br><span class="line">            value: _isOpen,</span><br><span class="line">            onChanged: <span class="function">(<span class="params">isOpen</span>) =&gt;</span> &#123;</span><br><span class="line">              _isOpen = isOpen,</span><br><span class="line">              setState(()&#123;</span><br><span class="line"></span><br><span class="line">              &#125;)</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">//开关颜色</span></span><br><span class="line">            activeColor: Colors.blue,</span><br><span class="line">          )</span><br></pre></td></tr></table></figure><h5 id="CupertinoPageRoute"><a href="#CupertinoPageRoute" class="headerlink" title="CupertinoPageRoute"></a>CupertinoPageRoute</h5><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">onPressed: ()&#123;</span><br><span class="line">               Navigator.push(context, <span class="keyword">new</span> CupertinoPageRoute(</span><br><span class="line">               builder: <span class="function">(<span class="params">context</span>) =&gt;</span> Details(),</span><br><span class="line">               ));</span><br><span class="line">           &#125;,</span><br></pre></td></tr></table></figure><h5 id="CupertinoNavigationBar"><a href="#CupertinoNavigationBar" class="headerlink" title="CupertinoNavigationBar"></a>CupertinoNavigationBar</h5><p>iOS风格的导航栏. 通常和CupertinoPageScaffold一起使用。</p><table><thead><tr><th>cupertinoNavigationBar</th><th>导航栏结构组件</th></tr></thead><tbody><tr><td>middle</td><td>中间组件，多为标题</td></tr><tr><td>trailing</td><td>右边 多为菜单按钮</td></tr><tr><td>leading</td><td>左边按钮，多为返回</td></tr></tbody></table><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> CupertinoNavigationBar(</span><br><span class="line">          <span class="comment">//左边Widget（一般为返回按钮）</span></span><br><span class="line">          leading: <span class="keyword">const</span> Icon(Icons.arrow_back_ios),</span><br><span class="line">          <span class="comment">//如果为true并且middle为空的时候并且当前路由是CupertinoPageRoute，则自动用[Text]小部件填充，文本当前路由的“title”。</span></span><br><span class="line">          automaticallyImplyMiddle: <span class="keyword">true</span>,</span><br><span class="line">          <span class="comment">//上一页按钮</span></span><br><span class="line">          previousPageTitle: <span class="string">'上一页'</span>,</span><br><span class="line">          backgroundColor: Colors.blue,</span><br><span class="line">          middle: <span class="keyword">const</span> Text(</span><br><span class="line">            <span class="string">'标题'</span>,</span><br><span class="line">            style: TextStyle(color: Colors.white),</span><br><span class="line">          ),</span><br><span class="line">          <span class="comment">//右边Widget</span></span><br><span class="line">          trailing: <span class="keyword">const</span> Text(</span><br><span class="line">            <span class="string">'trailing'</span>,</span><br><span class="line">            style: TextStyle(color: Colors.white),</span><br><span class="line">          ),</span><br><span class="line">          <span class="comment">//边框</span></span><br><span class="line">          border: Border.all(color: Color(<span class="number">0xFFD9D9D9</span>), width: <span class="number">1.0</span>),</span><br><span class="line">          <span class="comment">//图标颜色</span></span><br><span class="line">          actionsForegroundColor: Colors.white,</span><br><span class="line">          <span class="comment">//内边距</span></span><br><span class="line">          padding: EdgeInsetsDirectional.zero,</span><br><span class="line">          <span class="comment">//是否在导航栏之间切换。</span></span><br><span class="line">          transitionBetweenRoutes: <span class="keyword">true</span>,</span><br><span class="line">        )</span><br></pre></td></tr></table></figure><h5 id="CupertinoPageScaffold"><a href="#CupertinoPageScaffold" class="headerlink" title="CupertinoPageScaffold"></a>CupertinoPageScaffold</h5><p>一个iOS风格的页面的基本布局结构。包含内容和导航栏,和 CupertinoNavigationBar 一起使用。</p><table><thead><tr><th>cupertinoTabScaffold</th><th>选项卡组件</th></tr></thead><tbody><tr><td>tabbar</td><td>cupertinoTabbar</td></tr><tr><td>tabBuilderr: indexedWidgetBuilder</td><td>选项卡视图构造器</td></tr></tbody></table><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> CupertinoPageScaffold(</span><br><span class="line">        navigationBar: <span class="keyword">new</span> CupertinoNavigationBar(</span><br><span class="line">          middle: <span class="keyword">const</span> Text(</span><br><span class="line">            <span class="string">'标题'</span>,</span><br><span class="line">            style: TextStyle(color: Colors.black),</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">        child: <span class="keyword">new</span> Container(</span><br><span class="line">          alignment: Alignment.center,</span><br><span class="line">          child: RaisedButton(</span><br><span class="line">            child: Text(<span class="string">'跳转下一个页面'</span>),</span><br><span class="line">            onPressed: () &#123;</span><br><span class="line">              Navigator.push(</span><br><span class="line">                  context,</span><br><span class="line">                  <span class="keyword">new</span> CupertinoPageRoute(</span><br><span class="line">                    builder: <span class="function">(<span class="params">context</span>) =&gt;</span> Details(),</span><br><span class="line">                  ));</span><br><span class="line">            &#125;,</span><br><span class="line">          ),</span><br><span class="line">        ))</span><br></pre></td></tr></table></figure><h5 id="CupertinoTabScaffold-和-CupertinoTabBar"><a href="#CupertinoTabScaffold-和-CupertinoTabBar" class="headerlink" title="CupertinoTabScaffold 和 CupertinoTabBar"></a>CupertinoTabScaffold 和 CupertinoTabBar</h5><p>标签式iOS应用程序的结构。将选项卡栏放在内容选项卡之上</p><p>CupertinoTabBar 是 iOS风格的底部选项卡。 通常和CupertinoTabScaffold一起使用。</p><table><thead><tr><th>cupertinoTabbar</th><th>选项卡按钮组件，通常有BottomNavigationBarItem</th></tr></thead><tbody><tr><td>items: list</td><td></td></tr><tr><td>backgroundcolor</td><td>按钮背景色</td></tr><tr><td>activeColor</td><td>前景色</td></tr><tr><td>iconSize</td><td>图标大小</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">new CupertinoTabScaffold(</span><br><span class="line">        tabBar: new CupertinoTabBar(</span><br><span class="line">          items: &lt;BottomNavigationBarItem&gt;[</span><br><span class="line">            new BottomNavigationBarItem(</span><br><span class="line">              icon: Icon(Icons.home),</span><br><span class="line">              activeIcon: Icon(Icons.hourglass_full),</span><br><span class="line">              title:Text(&apos;首页&apos;,</span><br><span class="line">                style: TextStyle(color: Colors.black))</span><br><span class="line">            ),</span><br><span class="line">            new BottomNavigationBarItem(</span><br><span class="line">                icon: Icon(Icons.fiber_manual_record),</span><br><span class="line">                activeIcon: Icon(Icons.fiber_manual_record),</span><br><span class="line">                title:Text(&apos;社区&apos;,</span><br><span class="line">                    style: TextStyle(color: Colors.black))</span><br><span class="line">            ),</span><br><span class="line">            new BottomNavigationBarItem(</span><br><span class="line">                icon: Icon(Icons.add_shopping_cart),</span><br><span class="line">                activeIcon: Icon(Icons.add_shopping_cart),</span><br><span class="line">                title:Text(&apos;发现&apos;,</span><br><span class="line">                    style: TextStyle(color: Colors.black))</span><br><span class="line">            ),</span><br><span class="line">            new BottomNavigationBarItem(</span><br><span class="line">                icon: Icon(Icons.my_location),</span><br><span class="line">                activeIcon: Icon(Icons.my_location),</span><br><span class="line">                title:Text(&apos;我的&apos;,</span><br><span class="line">                    style: TextStyle(color: Colors.black))</span><br><span class="line">            ),</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">        tabBuilder: (context,index) =&gt; new Container(</span><br><span class="line">          alignment: Alignment.center,</span><br><span class="line">          child: RaisedButton(</span><br><span class="line">            child: Text(&apos;跳转下一个页面$index&apos;),</span><br><span class="line">            onPressed: () &#123;</span><br><span class="line">              Navigator.push(</span><br><span class="line">                  context,</span><br><span class="line">                  new CupertinoPageRoute(</span><br><span class="line">                    builder: (context) =&gt; Details(),</span><br><span class="line">                  ));</span><br><span class="line">            &#125;,</span><br><span class="line">          ),</span><br><span class="line">        ))</span><br></pre></td></tr></table></figure><h5 id="CupertinoTabView"><a href="#CupertinoTabView" class="headerlink" title="CupertinoTabView"></a>CupertinoTabView</h5><p>选项卡视图组件,支持选项卡间并行导航项卡的根内容。通常与CupertinoTabScaffolde一起使用</p><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">tabBuilder: <span class="function">(<span class="params">context, index</span>) =&gt;</span> <span class="keyword">new</span> CupertinoTabView(</span><br><span class="line">              <span class="comment">//返回按钮描述文本</span></span><br><span class="line">              defaultTitle: <span class="string">'返回'</span>,</span><br><span class="line">              <span class="comment">//注册跳转的路径和页面</span></span><br><span class="line">              routes: &#123;</span><br><span class="line">                <span class="string">'/home'</span>: (context) &#123;</span><br><span class="line">                  <span class="keyword">return</span> CupertinoPageScaffold(</span><br><span class="line">                    navigationBar: CupertinoNavigationBar(</span><br><span class="line">                      middle: Text(<span class="string">'我是标题'</span>),</span><br><span class="line">                    ),</span><br><span class="line">                    child: Center(</span><br><span class="line">                      child: Text(<span class="string">'我是第二页'</span>),</span><br><span class="line">                    ),</span><br><span class="line">                  );</span><br><span class="line">                &#125;,</span><br><span class="line">              &#125;,</span><br><span class="line">              builder: <span class="function">(<span class="params">context</span>) =&gt;</span> <span class="keyword">new</span> Container(</span><br><span class="line">                    alignment: Alignment.center,</span><br><span class="line">                    child: RaisedButton(</span><br><span class="line">                      child: Text(<span class="string">'跳转下一个页面$index'</span>),</span><br><span class="line">                      onPressed: () &#123;</span><br><span class="line">                        Navigator.of(context).pushNamed(<span class="string">'/home'</span>);</span><br><span class="line">                      &#125;,</span><br><span class="line">                    ),</span><br><span class="line">                  ),</span><br><span class="line">            )</span><br></pre></td></tr></table></figure><h4 id="使app支持多端"><a href="#使app支持多端" class="headerlink" title="使app支持多端"></a>使app支持多端</h4><h5 id="flutter使app支持web"><a href="#flutter使app支持web" class="headerlink" title="flutter使app支持web"></a>flutter使app支持web</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flutter channel stable</span><br><span class="line">flutter upgrade</span><br><span class="line"></span><br><span class="line">Unable to &apos;pub upgrade&apos; flutter tool. Retrying in five seconds</span><br><span class="line">解决方法：删除 flutter SDK中 bin/cache 文件夹，然后再flutter upgrade就可以了。</span><br><span class="line"></span><br><span class="line">如果报错使用</span><br><span class="line">flutter upgrade --force</span><br></pre></td></tr></table></figure><p>一旦开启了 Web 支持，运行 <code>flutter devices</code>，命令会输出一个名为 <code>Chrome</code> 的设备信息，开启一个为 Web 应用提供服务的 <code>Web Sever</code>，并打开 Chrome 浏览器并访问某个 URL 地址。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜flutter devices</span><br><span class="line">1 connected device:</span><br><span class="line"></span><br><span class="line">Chrome (web) • chrome • web-javascript • Google Chrome 89.0.4389.128</span><br></pre></td></tr></table></figure><p>要在 Chrome 的 <code>localhost</code> 中部署你的应用，从软件包根目录输入以下内容：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flutter run -d chrome</span><br></pre></td></tr></table></figure><p>当前项目目录下,创建web文件</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flutter create .</span><br></pre></td></tr></table></figure><p>运行下面命令以生成发行版构建：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flutter build web</span><br></pre></td></tr></table></figure><p>Release 构建产物使用 <a href="https://dart.cn/tools/dart2js" target="_blank" rel="noopener">dart2js</a>（不是 dartdevc）生成了一个单独的 JavaScript <code>main.dart.js</code> 文件。你可以通过 release 模式 (<code>flutter run --release</code>) 或者 <code>flutter build web</code> 创建一个发行构建。输出文件在 <code>build/web</code> 目录下，包括需要一起提供的 <code>assets</code> 资源文件。</p><p>目前通过两个仍在开发中的项目提供对桌面平台的支持。其中一个甚至是谷歌开发的，但有迹象表明该公司不支持它。可以在以下 Github 存储库中找到这些项目：</p><ul><li>【官方】Google 开源的 Flutter 嵌入桌面的 API 实现：<a href="https://github.com/google/flutter-desktop-embedding" target="_blank" rel="noopener">flutter-desktop-embedding</a></li><li>【推荐】Go 语言实现工具：<a href="https://github.com/go-flutter-desktop/hover" target="_blank" rel="noopener">hover</a></li></ul><p>这两个项目都归类为 Custom Flutter Engine Embedders，也就是说，它们是 Flutter API 的实现，因此在此框架中开发的项目可以在 Flutter 项目（Android，Fuchsia 和 iOS）正式支持的操作系统之外运行。</p><p>本文使用第二种实现方式</p><p>安装需要依赖：GO GCC Git</p><p>访问<a href="https://github.com/go-flutter-desktop/hover" target="_blank" rel="noopener">https://github.com/go-flutter-desktop/hover</a></p><p>运行go version并确保您的Go版本为1.13或更高版本。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\Users\admin&gt;go version</span><br><span class="line">go version go1.15.6 windows/amd64</span><br></pre></td></tr></table></figure><p>安装GCC</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">exec: &quot;gcc&quot;: executable file not found in %PATH%</span><br><span class="line">这是因为Windows系统上没有GCC编译器。而编译代码中的包里面可能需要用到gcc编译器。</span><br><span class="line"></span><br><span class="line">解决办法如下：</span><br><span class="line"></span><br><span class="line">下载链接：https://sourceforge.net/projects/mingw-w64/files/mingw-w64/</span><br><span class="line"></span><br><span class="line">个人建议：不要下载exe文件，网不好安装下载资源包很费劲。还是下载64位x86_64-posix-seh压缩包，直接解压就行。没有解压工具的自己下载一个。</span><br><span class="line">解压完之后，配置环境变量。将安装路径对应的bin目录添加到PATH环境变量中。</span><br><span class="line"></span><br><span class="line">C:\Users\admin\Desktop\gcc -v</span><br><span class="line">Using built-in specs.</span><br><span class="line">COLLECT_GCC=gcc</span><br><span class="line">COLLECT_LTO_WRAPPER=G:/x86_64-8.1.0-release-posix-seh-rt_v6-rev0/mingw64/bin/../libexec/gcc/x86_64-w64-mingw32/8.1.0/lto-wrapper.exe</span><br><span class="line">Target: x86_64-w64-mingw32</span><br><span class="line">Configured with: ../../../src/gcc-8.1.0/configure --host=x86_64-w64-mingw32 --build=x86_64-w64-mingw32 --target=x86_64-w64-mingw32 --prefix=/mingw64 --with-sysroot=/c/mingw810/x86_64-810-posix-seh-rt_v6-rev0/mingw64 --enable-shared --enable-static --disable-multilib --enable-languages=c,c++,fortran,lto --enable-libstdcxx-time=yes --enable-threads=posix --enable-libgomp --enable-libatomic --enable-lto --enable-graphite --enable-checking=release --enable-fully-dynamic-string --enable-version-specific-runtime-libs --disable-libstdcxx-pch --disable-libstdcxx-debug --enable-bootstrap --disable-rpath --disable-win32-registry --disable-nls --disable-werror --disable-symvers --with-gnu-as --with-gnu-ld --with-arch=nocona --with-tune=core2 --with-libiconv --with-system-zlib --with-gmp=/c/mingw810/prerequisites/x86_64-w64-mingw32-static --with-mpfr=/c/mingw810/prerequisites/x86_64-w64-mingw32-static --with-mpc=/c/mingw810/prerequisites/x86_64-w64-mingw32-static --with-isl=/c/mingw810/prerequisites/x86_64-w64-mingw32-static --with-pkgversion=&apos;x86_64-posix-seh-rev0, Built by MinGW-W64 project&apos; --with-bugurl=https://sourceforge.net/projects/mingw-w64 CFLAGS=&apos;-O2 -pipe -fno-ident -I/c/mingw810/x86_64-810-posix-seh-rt_v6-rev0/mingw64/opt/include -I/c/mingw810/prerequisites/x86_64-zlib-static/include -I/c/mingw810/prerequisites/x86_64-w64-mingw32-static/include&apos; CXXFLAGS=&apos;-O2 -pipe -fno-ident -I/c/mingw810/x86_64-810-posix-seh-rt_v6-rev0/mingw64/opt/include -I/c/mingw810/prerequisites/x86_64-zlib-static/include -I/c/mingw810/prerequisites/x86_64-w64-mingw32-static/include&apos; CPPFLAGS=&apos; -I/c/mingw810/x86_64-810-posix-seh-rt_v6-rev0/mingw64/opt/include -I/c/mingw810/prerequisites/x86_64-zlib-static/include -I/c/mingw810/prerequisites/x86_64-w64-mingw32-static/include&apos; LDFLAGS=&apos;-pipe -fno-ident -L/c/mingw810/x86_64-810-posix-seh-rt_v6-rev0/mingw64/opt/lib -L/c/mingw810/prerequisites/x86_64-zlib-static/lib -L/c/mingw810/prerequisites/x86_64-w64-mingw32-static/lib &apos;</span><br><span class="line">Thread model: posix</span><br><span class="line">gcc version 8.1.0 (x86_64-posix-seh-rev0, Built by MinGW-W64 project)</span><br></pre></td></tr></table></figure><p>运行以下命令来安装hover</p><p>windows:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set GO111MODULE=on</span><br><span class="line">go get -u -a github.com/go-flutter-desktop/hover</span><br></pre></td></tr></table></figure><p>现有Flutter项目入门</p><p>进入到项目目录</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd flutter-app/</span><br><span class="line"></span><br><span class="line">#第一次将悬停用于项目时，您需要初始化该项目以与悬停一起使用。可以将参数传递给hover init来设置项目路径。这通常是您在github或自托管git服务上的项目的路径。如果不确定使用hover init无路径。您可以稍后更改路径。</span><br><span class="line">hover init github.com/nmk0718/flutter-app</span><br></pre></td></tr></table></figure><p>运行</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hover run</span><br><span class="line">#热重载是手动的，因为您需要在终端中按“ r”来热重载应用程序。</span><br><span class="line"></span><br><span class="line">#默认情况下，悬停使用文件lib/main_desktop.dart作为入口点。您可以使用该--target标志指定其他端点。</span><br></pre></td></tr></table></figure><p>打包</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hover build linux # or darwin or windows</span><br></pre></td></tr></table></figure><p>首次使用时hover run启动没问题 打包报错 切换为beta版本在进行打包</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\Users\admin\Downloads\memos-main\memos-main&gt;flutter channel beta</span><br><span class="line">Switching to flutter channel &apos;beta&apos;...</span><br><span class="line">git: Branch &apos;beta&apos; set up to track remote branch &apos;beta&apos; from &apos;origin&apos;.</span><br><span class="line">git: Switched to a new branch &apos;beta&apos;</span><br><span class="line">Successfully switched to flutter channel &apos;beta&apos;.</span><br><span class="line">To ensure that you&apos;re on the latest build from this channel, run &apos;flutter upgrade&apos;</span><br><span class="line"></span><br><span class="line">C:\Users\admin\Downloads\memos-main\memos-main&gt;hover build windows</span><br><span class="line">hover: Downloading engine for platform windows-release at version a123e75c6082da3a08f229b9c565e64b5b24a8a3...</span><br><span class="line">Download completed in 23.08s</span><br><span class="line">hover: Cleaning the build directory</span><br><span class="line">hover: Bundling flutter app</span><br><span class="line">VersionCheckError: Command exited with code 128: git fetch __flutter_version_check__ beta</span><br><span class="line">Standard error: fatal: unable to access &apos;https://github.com/flutter/flutter.git/&apos;: OpenSSL SSL_read: Connection was</span><br><span class="line">reset, errno 10054</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Flutter assets will be downloaded from https://storage.flutter-io.cn. Make sure you trust this source!</span><br><span class="line">Downloading package sky_engine...                                  368ms</span><br><span class="line">Downloading flutter_patched_sdk tools...                           448ms</span><br><span class="line">Downloading flutter_patched_sdk_product tools...                   240ms</span><br><span class="line">Downloading windows-x64 tools...                                 1,023ms</span><br><span class="line">Downloading windows-x64/font-subset tools...                       173ms</span><br><span class="line">Running &quot;flutter pub get&quot; in memos-main...                         839ms</span><br><span class="line"></span><br><span class="line"> Building with sound null safety</span><br><span class="line"></span><br><span class="line">hover: Generating kernel snapshot</span><br><span class="line">result 67978fb7-9906-4bd1-a022-0f2cb4d31ba0</span><br><span class="line">lib/main_desktop.dart: Warning: Interpreting this as package URI, &apos;package:memos/main_desktop.dart&apos;.</span><br><span class="line">67978fb7-9906-4bd1-a022-0f2cb4d31ba0</span><br><span class="line">nel_snapshot.dill 0</span><br><span class="line">hover: Generating ELF snapshot</span><br><span class="line">Warning: Generating ELF library without DWARF debugging information.</span><br><span class="line">hover: Checking available release on Github</span><br><span class="line">hover: Compiling &apos;go-flutter&apos; and plugins</span><br><span class="line">runtime/cgo</span><br><span class="line">github.com/go-flutter-desktop/go-flutter/internal/currentthread</span><br><span class="line">github.com/go-flutter-desktop/go-flutter/embedder</span><br><span class="line">github.com/go-gl/glfw/v3.3/glfw</span><br><span class="line">github.com/go-gl/gl/v3.3-core/gl</span><br><span class="line">github.com/go-flutter-desktop/go-flutter/internal/priorityqueue</span><br><span class="line">github.com/go-flutter-desktop/go-flutter/internal/keyboard</span><br><span class="line">github.com/go-flutter-desktop/go-flutter/internal/opengl</span><br><span class="line">github.com/go-flutter-desktop/go-flutter</span><br><span class="line">hover: Successfully compiled executable binary for windows</span><br></pre></td></tr></table></figure><p>编译windows不能直接进行使用,必须移动整个文件夹才能使用,所以使用以下命令打包</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\Users\admin\Downloads\memos-main\memos-main&gt;hover build windows-msi</span><br><span class="line">hover: Using engine from cache</span><br><span class="line">hover: Cleaning the build directory</span><br><span class="line">hover: Bundling flutter app</span><br><span class="line"></span><br><span class="line"> Building with sound null safety</span><br><span class="line"></span><br><span class="line">hover: Generating kernel snapshot</span><br><span class="line">result 19414483-7af2-49ad-99fa-98b0c4ca254f</span><br><span class="line">lib/main_desktop.dart: Warning: Interpreting this as package URI, &apos;package:memos/main_desktop.dart&apos;.</span><br><span class="line">19414483-7af2-49ad-99fa-98b0c4ca254f</span><br><span class="line">nel_snapshot.dill 0</span><br><span class="line">hover: Generating ELF snapshot</span><br><span class="line">Warning: Generating ELF library without DWARF debugging information.</span><br><span class="line">hover: Compiling &apos;go-flutter&apos; and plugins</span><br><span class="line">hover: Successfully compiled executable binary for windows</span><br><span class="line">hover: Packaging app for windows-msi</span><br><span class="line">hover: Missing/Empty `author` field in pubspec.yaml. Please add it or otherwise you may publish your app with a wrong author. Continuing with `DESKTOP-D5VSCI4\admin` as a placeholder author.</span><br><span class="line">hover: Missing/Empty `license` field in go/hover.yaml. Please add it or otherwise you may publish your app with a wrong license. Continuing with `NOASSERTION` as a placeholder license.</span><br><span class="line">hover: Failed to read `go/packaging/windows-msi/upgrade-code.txt`: open C:\Users\admin\Downloads\memos-main\memos-main\go\packaging\windows-msi\upgrade-code.txt: The system cannot find the file specified.</span><br><span class="line">hover: Please re-init windows-msi to generate the `go/packaging/windows-msi/upgrade-code.txt`</span><br><span class="line">hover: or put a GUID from https://www.guidgen.com/ into a new `go/packaging/windows-msi/upgrade-code.txt` file.</span><br><span class="line"></span><br><span class="line">如果报错To package windows-msi these tools are required: candle</span><br><span class="line">请前往https://wixtoolset.org/releases/进行下载安装</span><br><span class="line">启动下载好的Wix程序,会提示缺少.netframework3.5.1，windows的控制面板&gt;程序&gt;启用和关闭windows功能&gt;勾选.netframework3.5</span><br><span class="line">安装好.netfamework后再次启动Wix进行安装,安装完毕,目录为C:\Program Files (x86)\WiX Toolset v3.11</span><br><span class="line">运行命令后还是缺少candle.exe,把C:\Program Files (x86)\WiX Toolset v3.11\bin加入系统环境变量的Path中即可</span><br><span class="line"></span><br><span class="line">Failed to read `go/packaging/windows-msi/upgrade-code.txt</span><br><span class="line">按照提示信息访问 https://www.guidgen.com/复制页面中的code</span><br><span class="line">创建go/packaging/windows-msi/upgrade-code.txt文件,粘贴code到文本中保存即可</span><br></pre></td></tr></table></figure><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>Your Flutter application is created using an older version of the Android</p><p>embedding. It’s being deprecated in favor of Android embedding v2.</p><p><strong>解决办法</strong>：打开android/app/main文件夹下的AndroidManifest.xml文件，在activity标签的下面增加如下代码：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;meta-data</span><br><span class="line">     android:name=&quot;flutterEmbedding&quot;</span><br><span class="line">     android:value=&quot;2&quot; /&gt;</span><br></pre></td></tr></table></figure><p>[!] Your app isn’t using AndroidX.</p><p>To avoid potential build failures, you can quickly migrate your app by following the steps on https:<em>//goo.gl/CP92wY.</em></p><p><strong>解决办法</strong>：在android文件夹的gradle.properties中添加如下代码即可：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">android.enableJetifier=true</span><br><span class="line">android.useAndroidX=true</span><br></pre></td></tr></table></figure><p>error: resource android:attr/fontVariationSettings not found</p><p>解决办法</p><p>更改android目录下app下的build.gradle文件中的编译版本由27改为28即可</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">compileSdkVersion 28</span><br><span class="line">#更改该参数为28</span><br><span class="line"></span><br><span class="line">lintOptions &#123;</span><br><span class="line">disable &apos;InvalidPackage&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>flutter已经pub get下载完插件,但是会报错 Error: Type ‘PathProviderWindows’ not found.</p><p>使用命令</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flutter clean</span><br><span class="line">flutter pub cache repair</span><br></pre></td></tr></table></figure><p>等下完即可</p><p>[!] The following Swift pods cannot yet be integrated as static libraries:</p><p>The Swift pod <code>DKPhotoGallery</code> depends upon <code>SDWebImage</code>, which does not define modules. To opt into those targets generating module maps (which is necessary to import them from Swift when building as static libraries), you may set <code>use_modular_headers!</code> globally in your Podfile, or specify <code>:modular_headers =&gt; true</code> for particular dependencies.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在ios/Podfile中修改</span><br><span class="line"></span><br><span class="line">target &apos;Runner&apos; do</span><br><span class="line">  use_frameworks! #add here</span><br><span class="line">  flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>Automatically assigning platform <a href="http://lib.csdn.net/base/ios" target="_blank" rel="noopener">iOS</a> with version 9.0 on target 你的工程名称 because no platform was specified. Please specify a platform for this target in your Podfile. See <code>https://guides.cocoapods.org/syntax/podfile.html#platform</code></p><p>这是在使用cocoapods安装三方库配置podfile之后的一个警告信息。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Uncomment this line to define a global platform for your project</span><br><span class="line">platform :ios, &apos;9.0&apos;</span><br></pre></td></tr></table></figure><p>只需要将第二行platform前面的注销# 符号去掉  就可以了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;安全区域&quot;&gt;&lt;a href=&quot;#安全区域&quot; class=&quot;headerlink&quot; title=&quot;安全区域&quot;&gt;&lt;/a&gt;安全区域&lt;/h5&gt;&lt;p&gt;当直接使用小部件时会出现在左上角的状态栏附近&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;ta</summary>
      
    
    
    
    
    <category term="Flutter" scheme="https://nmk0718.github.io/tag/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>Jmeter</title>
    <link href="https://nmk0718.github.io/2021/03/27/Jmeter/"/>
    <id>https://nmk0718.github.io/2021/03/27/Jmeter/</id>
    <published>2021-03-27T06:05:00.000Z</published>
    <updated>2024-11-29T06:44:36.032Z</updated>
    
    <content type="html"><![CDATA[<p>Apache JMeter是Apache组织开发的基于Java的压力测试工具.它可以用于测试静态和动态资源，例如静态文件、Java 小服务程序、CGI 脚本、Java 对象、数据库、FTP 服务器， 等等。JMeter 可以用于对服务器、网络或对象模拟巨大的负载，来自不同压力类别下测试它们的强度和分析整体性能。另外，JMeter能够对应用程序做功能/回归测试，通过创建带有断言的脚本来验证你的程序返回了你期望的结果。为了最大限度的灵活性，JMeter允许使用正则表达式创建断言。<br><strong>Jmeter的作用</strong><br>1.能够对HTTP和FTP服务器进行压力和性能测试， 也可以对任何数据库进行同样的测试（通过JDBC）。<br>2.完全的可移植性和100% 纯java。<br>3.完全 Swing 和轻量组件支持（预编译的JAR使用 javax.swing.<em>)包。<br>4.完全多线程 框架允许通过多个线程并发取样和 通过单独的线程组对不同的功能同时取样。<br>5.精心的GUI设计允许快速操作和更精确的计时。<br>6.缓存和离线分析/回放测试结果。<br>*</em>JMeter的高可扩展性**<br>1.可链接的取样器允许无限制的测试能力。<br>2.各种负载统计表和可链接的计时器可供选择。<br>3.数据分析和可视化插件提供了很好的可扩展性以及个性化。<br>4.具有提供动态输入到测试的功能（包括Javascript）。<br>5.支持脚本编程的取样器（在1.9.2及以上版本支持BeanShell）。</p><p><strong>JDK</strong></p><p>Jmeter使用,需要依赖JDK1.8,可前往官网进行下载</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">归档版:</span><br><span class="line">https://www.oracle.com/java/technologies/javase/javase8-archive-downloads.html</span><br><span class="line">#最好不采用最新版本的JDK进行使用</span><br></pre></td></tr></table></figure><p>这里使用自己下载好的下载链接</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https://nmk0718.com.com/jdk/jdk-8u181-windows-x64.exe</span><br><span class="line">https://nmk0718.com.com/jdk/jdk-8u181-linux-x64.tar.gz</span><br></pre></td></tr></table></figure><p>windows安装JDK</p><p>双击下载好的exe一直下一步即可</p><p>配置环境变量:右键我的电脑&gt;属性&gt;高级系统设置&gt;环境变量</p><img src="\image\image-20210319105114950.png"><p>新增用户变量</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">变量名:JAVA_HOME</span><br><span class="line">变量值:C:\Program Files\Java\jdk1.8.0_181</span><br><span class="line"></span><br><span class="line">变量名:CLASSPATH</span><br><span class="line">变量值:.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar</span><br><span class="line"></span><br><span class="line">变量名:Path</span><br><span class="line">变量值:%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin;</span><br></pre></td></tr></table></figure><p>通过cmd查看是否已经配置完成</p><img src="\image\image-20210319105859901.png"><p>linux安装JDK</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@centos ~]# cd /usr/local/</span><br><span class="line">[root@centos local]# wget https://nmk0718.com.com/jdk/jdk-8u181-linux-x64.tar.gz</span><br><span class="line">--2021-03-19 11:00:06--  https://nmk0718.com.com/jdk/jdk-8u181-linux-x64.tar.gz</span><br><span class="line">Resolving nmk0718.com.com (nmk0718.com.com)... 119.130.113.242</span><br><span class="line">Connecting to nmk0718.com.com (nmk0718.com.com)|119.130.113.242|:443... connected.</span><br><span class="line">HTTP request sent, awaiting response... 200 OK</span><br><span class="line">Length: 185646832 (177M) [application/octet-stream]</span><br><span class="line">Saving to: ‘jdk-8u181-linux-x64.tar.gz’</span><br><span class="line"></span><br><span class="line">100%[================================================================================================================================================================&gt;] 185,646,832 57.6MB/s   in 3.1s   </span><br><span class="line"></span><br><span class="line">2021-03-19 11:00:09 (57.6 MB/s) - ‘jdk-8u181-linux-x64.tar.gz’ saved [185646832/185646832]</span><br><span class="line">[root@centos local]# tar zxvf jdk-8u181-linux-x64.tar.gz</span><br></pre></td></tr></table></figure><p>配置环境变量</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@centos local]# vi /etc/profile</span><br><span class="line">输入大写的G,到达文本的最后,输入i进入编辑模式加入以下配置,按esc键盘退出编辑模式,输入:wq保存并退出</span><br><span class="line">JAVA_HOME=/usr/local/jdk1.8.0_181</span><br><span class="line">CLASSPATH=$CLASSPATH:$JAVA_HOME/lib/</span><br><span class="line">PATH=$PATH:$JAVA_HOME/bin</span><br><span class="line">[root@centos local]# source /etc/profile</span><br><span class="line">[root@centos local]# java -version</span><br><span class="line">java version &quot;1.8.0_181&quot;</span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_181-b13)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.181-b13, mixed mode)</span><br></pre></td></tr></table></figure><h3 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h3><p>官网下载地址</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https://mirrors.bfsu.edu.cn/apache//jmeter/source/</span><br></pre></td></tr></table></figure><p>下载</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget https://mirrors.tuna.tsinghua.edu.cn/apache/jmeter/binaries/apache-jmeter-5.2.zip</span><br></pre></td></tr></table></figure><p>解压jmeter包,进入apache-jmeter-5.2\bin目录双击jmeter.bat</p><img src="\image\image-20210312165019995.png"><p>界面更改语言为简体中文(此次生效)<br><img src="\image\image-20210312165057251.png"></p><p>修改jmeter.properties文件中的#language=en为language=zh_CN,就可以实现永久中文界面了</p><h4 id="虚拟用户压测"><a href="#虚拟用户压测" class="headerlink" title="虚拟用户压测"></a>虚拟用户压测</h4><p>添加线程组</p><img src="\image\image-20210312165142531.png"><p>配置线程数和时间</p><img src="\image\image-20210315160425834.png"><p>线程数：配置几个就代表有几个虚拟用户</p><p>Ramp-Up 时间（秒）:表示从第一个虚拟用户开始生成直到最后一个虚拟用户开始生成的时间，加入配置了5个虚拟用户，Ramp-Up 设置成10s，那么jmeter会每隔2s生成1个虚拟用户，这个选项主要的作用是控制并发的强度，不让虚拟用户在同一时间产生从而对系统造成多大的复杂，Ramp-Up设置成0，那么所有用户将会同时立即产生</p><p>循环数：要么是N次，要么是永远</p><p>调度器：就是定时执行的设置方式。我们可以设置在未来的某个时间开始执行也可以设置多少秒后开始执行。</p><p>添加HTTP请求</p><img src="\image\image-20210315161224028.png"><p>配置请HTTP请求</p><img src="\image\image-20210315161618996.png"><p>添加结果树和聚合报告</p><img src="\image\image-20210315161726624.png"><p>配置HTTP信息头</p><img src="\image\image-20210315161937333.png"><p>执行请求</p><img src="\image\image-20210315162059990.png"><p>聚合报告中可查看到请求总数,异常数,吞吐量等</p><p>查看结果树中可查看到请求的接口返回结果</p><img src="\image\image-20210315162241338.png"><p>点击清除按钮,清除上次执行请求的结果</p><img src="\image\image-20210315162344364.png"><p>保存测试计划,保存后格式为jmx</p><img src="\image\image-20210315162551652.png"><h4 id="真实用户参数化压测"><a href="#真实用户参数化压测" class="headerlink" title="真实用户参数化压测"></a>真实用户参数化压测</h4><p>模拟多用户请求</p><img src="\image\image-20210318145516123.png"><p>配置CSV数据文件</p><img src="\image\image-20210318145657948.png"><p>在<strong>浏览</strong>中引入定义的CSV文件,指定文件的编码格式为UTF-8,定义变量名{phone,code},变量名称个数与CSV中的列数相对应,变量名以逗号分隔</p><p>CSV数据示例</p><img src="\image\image-20210318145932235.png"><p>更改HTTP请求中的请求数据为参数化,把请求的手机号和二维码信息配置为上面定义的参数,参数格式为<strong>${参数}</strong></p><img src="\image\image-20210318150323783.png"><p>添加表格查看结果</p><img src="\image\image-20210318150700170.png"><p>压测请求后,可看到具体请求时间,请求时间,连接大小等参数</p><img src="\image\image-20210318150630922.png"><h4 id="修改jmeter启动内存"><a href="#修改jmeter启动内存" class="headerlink" title="修改jmeter启动内存"></a>修改jmeter启动内存</h4><p>修改jmeter.bat文件</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">修改前:</span><br><span class="line">HEAP=-Xms1g -Xmx1g -XX:MaxMetaspaceSize=256m</span><br><span class="line">修改后</span><br><span class="line">HEAP=-Xms1024m -Xmx2048m -XX:MaxMetaspaceSize=600m</span><br></pre></td></tr></table></figure><p>启动meter.bat,发现弹窗里出现的还是256m,经检测发现该弹窗内显示的只是引导语,类似欢迎你,是写死的,不是真实的配置</p><img src="\image\image-20210318195746254.png"><p>可使用java中的jconsole(jdk\bin\jconsole.exe)查看真实的内存配置</p><img src="\image\image-20210318200420577.png"><p>连接本地的Jmeter进程,选择VM概要可查看到真实的内存配置</p><img src="\image\image-20210318200539443.png"><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><p>官网下载地址</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https://mirrors.bfsu.edu.cn/apache//jmeter/source/</span><br></pre></td></tr></table></figure><p>下载</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget https://mirrors.tuna.tsinghua.edu.cn/apache/jmeter/binaries/apache-jmeter-5.2.zip</span><br></pre></td></tr></table></figure><p>解压jmeter包</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">unzip apache-jmeter-5.2.zip</span><br></pre></td></tr></table></figure><p>配置环境变量</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#编辑系统环境变量</span><br><span class="line">[root@centos ~]# vi /etc/profile</span><br><span class="line">#使用快捷键 shift+g 到最后一行,加入以下配置</span><br><span class="line">#JMETER_HOME为jmeter解压目录</span><br><span class="line"></span><br><span class="line">export JMETER_HOME=/usr/local/apache-jmeter-5.2</span><br><span class="line">export CLASSPATH=$JMETER_HOME/lib/ext/ApacheJMeter_core.jar:$JMETER_HOME/lib/jorphan.jar:$CLASSPATH</span><br><span class="line">export PATH=$JMETER_HOME/bin:$PATH</span><br><span class="line"></span><br><span class="line">#使加入的环境变量生效</span><br><span class="line">[root@centos ~]# source /etc/profile</span><br><span class="line"></span><br><span class="line">#查看jmeter版本,验证安装成功</span><br><span class="line">[root@centos ~]# jmeter -v</span><br><span class="line">Mar 12, 2021 11:40:02 AM java.util.prefs.FileSystemPreferences$1 run</span><br><span class="line">INFO: Created user preferences directory.</span><br><span class="line">    _    ____   _    ____ _   _ _____       _ __  __ _____ _____ _____ ____</span><br><span class="line">   / \  |  _ \ / \  / ___| | | | ____|     | |  \/  | ____|_   _| ____|  _ \</span><br><span class="line">  / _ \ | |_) / _ \| |   | |_| |  _|    _  | | |\/| |  _|   | | |  _| | |_) |</span><br><span class="line"> / ___ \|  __/ ___ \ |___|  _  | |___  | |_| | |  | | |___  | | | |___|  _ &lt;</span><br><span class="line">/_/   \_\_| /_/   \_\____|_| |_|_____|  \___/|_|  |_|_____| |_| |_____|_| \_\ 5.2</span><br><span class="line"></span><br><span class="line">Copyright (c) 1999-2019 The Apache Software Foundation</span><br></pre></td></tr></table></figure><p>上传windows保存的测试计划.jmx文件到jmeter的bin目录下</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@centos bin]# pwd</span><br><span class="line">/home/apache-jmeter-5.2/bin</span><br><span class="line">[root@centos bin]# ls</span><br><span class="line">ApacheJMeter.jar          create-rmi-keystore.sh  jaas.conf                   jmeter.properties  krb5.conf                   report-template         stoptest.sh         user.properties</span><br><span class="line">BeanShellAssertion.bshrc  examples                jdk-8u281-linux-x64.tar.gz  jmeter-server      log4j2.xml                  rmi_keystore.jks        system.properties   utility.groovy</span><br><span class="line">BeanShellFunction.bshrc   hc.parameters           jmeter                      jmeter-server.bat  mirror-server               saveservice.properties  templates           wget-log</span><br><span class="line">BeanShellListeners.bshrc  heapdump.cmd            jmeter.bat                  jmeter.sh          mirror-server.cmd           shutdown.cmd            threaddump.cmd</span><br><span class="line">BeanShellSampler.bshrc    heapdump.sh             jmeter-n.cmd                jmeter-t.cmd       mirror-server.sh            shutdown.sh             threaddump.sh</span><br><span class="line">create-rmi-keystore.bat   HttpRequest.jmx         jmeter-n-r.cmd              jmeterw.cmd        reportgenerator.properties  stoptest.cmd            upgrade.properties</span><br></pre></td></tr></table></figure><p>执行测试计划</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@centos bin]# jmeter -n -t HttpRequest.jmx -l request.log</span><br><span class="line">Creating summariser &lt;summary&gt;</span><br><span class="line">Created the tree successfully using HttpRequest.jmx</span><br><span class="line">Starting standalone test @ Mon Mar 15 16:34:43 CST 2021 (1615797283522)</span><br><span class="line">Waiting for possible Shutdown/StopTestNow/HeapDump/ThreadDump message on port 4445</span><br><span class="line">summary =     10 in 00:00:02 =    5.3/s Avg:  1490 Min:  1343 Max:  1636 Err:     0 (0.00%)</span><br><span class="line">Tidying up ...    @ Mon Mar 15 16:34:46 CST 2021 (1615797286014)</span><br><span class="line">... end of run</span><br><span class="line"></span><br><span class="line">#因jmx文件和执行命令相同,故无须指定jmx的绝对路径,当执行命令与jmx不在同一目录下时,需要指定绝对路径</span><br><span class="line">#-n：以NoGUI方式运行脚本 -t：后面接脚本名称 -l：后面接日志名称，保存运行结果</span><br><span class="line">#注意：客户端和服务器的Jmeter版本最好保持一致，不然运行脚本时会报错</span><br><span class="line">#-l后的文件后缀可随意取名,建议以jtl结尾</span><br></pre></td></tr></table></figure><p>查看结果</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@centos bin]# cat request.log </span><br><span class="line">timeStamp,elapsed,label,responseCode,responseMessage,threadName,dataType,success,failureMessage,bytes,sentBytes,grpThreads,allThreads,URL,Latency,IdleTime,Connect</span><br><span class="line">1615797284375,1343,HTTP请求,200,,线程组 1-10,text,true,,816,357,10,10,https://nmk0718.com/host-api/v3_0/login/VerificationCodeLogin,1340,0,1009</span><br><span class="line">1615797284375,1378,HTTP请求,200,,线程组 1-9,text,true,,816,357,9,9,https://nmk0718.com/host-api/v3_0/login/VerificationCodeLogin,1377,0,999</span><br><span class="line">1615797284375,1406,HTTP请求,200,,线程组 1-2,text,true,,816,357,8,8,https://nmk0718.com/host-api/v3_0/login/VerificationCodeLogin,1406,0,1004</span><br><span class="line">1615797284371,1412,HTTP请求,200,,线程组 1-7,text,true,,816,357,7,7,https://nmk0718.com/host-api/v3_0/login/VerificationCodeLogin,1412,0,1013</span><br><span class="line">1615797284375,1504,HTTP请求,200,,线程组 1-4,text,true,,816,357,6,6,https://nmk0718.com/host-api/v3_0/login/VerificationCodeLogin,1504,0,1008</span><br><span class="line">1615797284389,1513,HTTP请求,200,,线程组 1-1,text,true,,816,357,5,5,https://nmk0718.com/host-api/v3_0/login/VerificationCodeLogin,1513,0,990</span><br><span class="line">1615797284388,1517,HTTP请求,200,,线程组 1-6,text,true,,816,357,4,4,https://nmk0718.com/host-api/v3_0/login/VerificationCodeLogin,1516,0,992</span><br><span class="line">1615797284388,1578,HTTP请求,200,,线程组 1-8,text,true,,816,357,3,3,https://nmk0718.com/host-api/v3_0/login/VerificationCodeLogin,1578,0,995</span><br><span class="line">1615797284373,1619,HTTP请求,200,,线程组 1-5,text,true,,816,357,2,2,https://nmk0718.com/host-api/v3_0/login/VerificationCodeLogin,1619,0,1005</span><br><span class="line">1615797284375,1636,HTTP请求,200,,线程组 1-3,text,true,,816,357,1,1,https://nmk0718.com/host-api/v3_0/login/VerificationCodeLogin,1636,0,1007</span><br><span class="line"></span><br><span class="line">#可以看到responseCode这一列都是200,代表请求成功</span><br></pre></td></tr></table></figure><p>查看聚合报告</p><p>把request.log下载到桌面,添加一个新的聚合报告,导入request.log即可看到聚合报告</p><img src="\image\image-20210315164725351.png"><p>查看请求结果</p><p>从linux导出的文件,是看不到请求返回的数据的</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@centos bin]# pwd</span><br><span class="line">/home/apache-jmeter-5.2/bin</span><br><span class="line">[root@centos bin]# vi jmeter.properties </span><br><span class="line">修改前:</span><br><span class="line">#jmeter.save.saveservice.response_data=false</span><br><span class="line">#jmeter.save.saveservice.samplerData=false</span><br><span class="line"></span><br><span class="line">修改后:</span><br><span class="line">jmeter.save.saveservice.response_data=true</span><br><span class="line">jmeter.save.saveservice.samplerData=true</span><br><span class="line"></span><br><span class="line">[root@centos bin]# vi user.properties </span><br><span class="line">#在文件的最后面加入以下配置</span><br><span class="line">jmeter.save.saveservice.output_format=xml</span><br><span class="line">jmeter.save.saveservice.response_data=true</span><br><span class="line">jmeter.save.saveservice.samplerData=true</span><br><span class="line">jmeter.save.saveservice.requestHeaders=true</span><br><span class="line">jmeter.save.saveservice.url=true</span><br><span class="line">jmeter.save.saveservice.responseHeaders=true</span><br></pre></td></tr></table></figure><p>再重新执行脚本</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@centos bin]# jmeter -n -t HttpRequest.jmx -l request.jtl</span><br><span class="line">Creating summariser &lt;summary&gt;</span><br><span class="line">Created the tree successfully using HttpRequest.jmx</span><br><span class="line">Starting standalone test @ Fri Mar 19 15:51:56 CST 2021 (1616140316075)</span><br><span class="line">Waiting for possible Shutdown/StopTestNow/HeapDump/ThreadDump message on port 4445</span><br><span class="line">summary +     45 in 00:00:03 =   13.8/s Avg:  2299 Min:  2061 Max:  2663 Err:     0 (0.00%) Active: 56 Started: 100 Finished: 44</span><br><span class="line">summary +     55 in 00:00:01 =   63.7/s Avg:  3070 Min:  2649 Max:  3478 Err:     0 (0.00%) Active: 0 Started: 100 Finished: 100</span><br><span class="line">summary =    100 in 00:00:04 =   24.2/s Avg:  2723 Min:  2061 Max:  3478 Err:     0 (0.00%)</span><br><span class="line">Tidying up ...    @ Fri Mar 19 15:52:00 CST 2021 (1616140320872)</span><br><span class="line">... end of run</span><br></pre></td></tr></table></figure><p>在windows查看结果树</p><img src="\image\image-20210319155449953.png"><p>导入request.jtl文件,即可看到请求的响应数据</p><img src="\image\image-20210319155539610.png">]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Apache JMeter是Apache组织开发的基于Java的压力测试工具.它可以用于测试静态和动态资源，例如静态文件、Java 小服务程序、CGI 脚本、Java 对象、数据库、FTP 服务器， 等等。JMeter 可以用于对服务器、网络或对象模拟巨大的负载，来自不同压</summary>
      
    
    
    
    
    <category term="Jmeter" scheme="https://nmk0718.github.io/tag/Jmeter/"/>
    
  </entry>
  
  <entry>
    <title>LogView</title>
    <link href="https://nmk0718.github.io/2021/03/27/LogView/"/>
    <id>https://nmk0718.github.io/2021/03/27/LogView/</id>
    <published>2021-03-27T06:05:00.000Z</published>
    <updated>2024-11-29T06:44:53.284Z</updated>
    
    <content type="html"><![CDATA[<p>1.登录阿里云<br>登录地址：<a href="https://signin.aliyun.com/login.htm#/main" target="_blank" rel="noopener">https://signin.aliyun.com/login.htm#/main</a>  </p><h5 id="实时日志"><a href="#实时日志" class="headerlink" title="实时日志"></a>实时日志</h5><img src="\image\image-20210224153302900.png"><p>生产集群 liangjian-prod</p><img src="\image\image-20210224153409185.png"><p>无状态&gt;对应服务</p><img src="\image\image-20210224153503908.png"><p>查看到有两个日志选项</p><img src="\image\image-20210224153630926.png"><p><code>触发器</code>旁的<strong>日志</strong>可查看500行,不支持自动刷新</p><p><img src="\image\image-20210224153904216.png"><code>详情</code>旁的<strong>日志</strong>可查看200行,支持自动刷新</p><img src="\image\image-20210224153951254.png"><h5 id="历史日志"><a href="#历史日志" class="headerlink" title="历史日志"></a>历史日志</h5><img src="\image\image-20210224153320967.png"><p>liangjian_prod</p><img src="\image\image-20210224154056234.png"><p>选择对应的服务即可查找到日志</p><img src="\image\image-20210224154142147.png"><p>通过时间过滤日志</p><img src="\image\image-20210224154230642.png"><p>关键词搜索,查找<strong>开年大吉</strong></p><img src="\image\image-20210224154807352.png"><p>上图中出现了<strong>出参请求流水</strong> 查询出参流水字段</p><img src="\image\image-20210224155037661.png"><p>结果什么都没返回,在<strong>出参请求流水</strong>后加上*,可查找到, 这是因为日志的分词问题,⚠️注意观察下图字段的红色横线</p><p>它把红色横线中的(出参请求流水-出参:) 当作了一个字段,所以匹配搜索不到,这时候就需要加*进行模糊匹配</p><img src="\image\image-20210224155154773.png"><p>也可以通过增加分词,再进行查询</p><img src="\image\image-20210224173240145.png"><p>在对应输出的字段的分词中增加所需要的分词,此处增加为中文：和中文，</p><img src="\image\image-20210224173341635.png"><p>再次查询发现,分词成功</p><img src="\image\image-20210224173509000.png"><p>查找<strong>开年大吉</strong>和<strong>女性专场</strong></p><img src="\image\image-20210224155720883.png"><p>查找<strong>开年大吉</strong>或<strong>陈红</strong></p><img src="\image\image-20210224155913802.png"><p>查找<strong>开年大吉</strong>不包含<strong>陈红</strong></p><img src="\image\image-20210224160005711.png"><p>具体可查看以下运算符或访问阿里云帮助文档：<a href="https://help.aliyun.com/document_detail/29060.html?spm=a2c4g.11186623.6.829.f44f672c3F2old" target="_blank" rel="noopener">https://help.aliyun.com/document_detail/29060.html?spm=a2c4g.11186623.6.829.f44f672c3F2old</a></p><table><thead><tr><th align="left">运算符</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">and</td><td align="left">and运算符。例如<code>request_method:GET and status:200</code>。如果多个关键词之间没有语法关键词，默认为and关系，例如<code>GET 200 cn-shanghai</code>等同于<code>GET and 200 and cn-shanghai</code>。</td></tr><tr><td align="left">or</td><td align="left">or运算符。例如<code>request_method:GET or status:200</code>。</td></tr><tr><td align="left">not</td><td align="left">not运算符。例如<code>request_method:GET not status:200</code>、<code>not status:200</code>。</td></tr><tr><td align="left">( )</td><td align="left">用于提高括号内查询条件的优先级。例如<code>(request_method:GET or request_method:POST) and status:200</code>。</td></tr><tr><td align="left">:</td><td align="left">用于字段查询（Key:Value），例如<code>request_method:GET</code>。如果字段名称或者字段值内有空格、冒号（:）等保留字符，请使用双引号（””）包裹字段名称或者字段值，例如<code>&quot;file info&quot;:apsara</code>。</td></tr><tr><td align="left">“”</td><td align="left">使用双引号（””）包裹一个语法关键词，可以将该语法关键词转换成普通字符。例如<code>&quot;and&quot;</code>表示查询包含and的日志，此处的and不代表运算符。在字段查询中双引号（””）内的所有词被当成一个整体。</td></tr><tr><td align="left">\</td><td align="left">转义符号，用于转义双引号（””），转义后的引号表示符号本身。例如日志内容为<code>instance_id:nginx&quot;01&quot;</code>，您可以使用<code>instance_id:nginx\&quot;01\&quot;</code>进行查询。</td></tr><tr><td align="left">*</td><td align="left">通配符查询，匹配零个、单个、多个字符。例如<code>host:www.yl.mo*k.com</code>。<strong>说明</strong> 日志服务会在所有日志中为您查询到符合条件的100个词，返回包含这100个词并满足查询条件的所有日志。</td></tr><tr><td align="left">?</td><td align="left">通配符查询，匹配单个字符。例如<code>host:www.yl.mo?k.com</code>。</td></tr><tr><td align="left">&gt;</td><td align="left">查询某字段的值大于某数值的日志。例如<code>request_time&gt;100</code>。</td></tr><tr><td align="left">&gt;=</td><td align="left">查询某字段的值大于或等于某数值的日志。例如<code>request_time&gt;=100</code>。</td></tr><tr><td align="left">&lt;</td><td align="left">查询某字段的值小于某数值的日志。例如<code>request_time&lt;100</code>。</td></tr><tr><td align="left">&lt;=</td><td align="left">查询某字段的值小于或等于某数值的日志。例如<code>request_time&lt;=100</code>。</td></tr><tr><td align="left">=</td><td align="left">查询某字段的值等于某数值的日志。针对double、long类型的字段，等号（=）和冒号（:）作用相同。例如<code>request_time=100</code>等同于<code>request_time:100</code>。</td></tr><tr><td align="left">in</td><td align="left">查询某字段的值处于某数值范围内的日志，中括号表示闭区间，小括号表示开区间，两个数字之间使用空格分隔。例如<code>request_time in [100 200]</code>或<code>request_time in (100 200]</code>。<strong>说明</strong> in只能为小写字母。</td></tr><tr><td align="left"><strong><strong>source</strong></strong></td><td align="left">查询某个日志源的日志，支持通配符。例如<code>__source__:&quot;192.0.2.*&quot;</code>。<strong>注意</strong> 日志服务中的<strong><strong>source</strong></strong>为保留字段，可缩写为<strong>source</strong>。如果您自定义的字段中存在<strong>source</strong>字段，则会与日志服务保留字段<strong>source</strong>冲突，此时您需要使用<strong>Source</strong>、<strong>SOURCE</strong>等词查询自定义的字段。</td></tr><tr><td align="left"><strong><strong>tag</strong></strong></td><td align="left">通过元数据信息查询日志。例如<code>__tag__:__receive_time__:1609837139</code>。</td></tr><tr><td align="left"><strong><strong>topic</strong></strong></td><td align="left">查询某日志主题下的日志。例如<code>__topic__:nginx_access_log</code>。</td></tr></tbody></table><p>上下文浏览</p><img src="\image\image-20210224160609787.png"><p>点击上下文浏览,往上滚动可查看当前日志的前几条日志,往下滚动可查看当前日志的后几条日志,可选择<code>高亮字符串</code>和<code>过滤条件</code></p><img src="\image\image-20210224160751446.png"><p>可把常用的查询语句保存为快速查询</p><img src="\image\image-20210224163256372.png"><p>设置对应的查询名称</p><img src="\image\image-20210224163327355.png"><p>下次可直接在快速查询中直接查看,无需再手动编写语句</p><img src="\image\image-20210224163618059.png"><p>可通过另存为告警进行告警通知该项目负责人(此为示例,通常设置查询信息为error进行过滤)</p><img src="\image\image-20210224170527703.png"><p>配置仪表盘等信息</p><img src="\image\image-20210224170812824.png"><p>告警通知选择钉钉</p><img src="\image\image-20210224171054017.png"><p>WebHook地址为钉钉群组中的WebHook地址</p><img src="\image\image-20210224171141251.png"><p>在下方设置<strong>关键词</strong>.要与配置的告警信息一致,否则会出现通知失败</p><img src="\image\image-20210224172650615.png"><p>因设置间隔为5分钟,5分钟后钉钉群组收到告警信息</p><img src="\image\image-20210224172147596.png"><p>可查看告警次数和告警历史</p><img src="\image\image-20210224172517286.png"><p>告警表达式可参考阿里云帮助文档：<a href="https://help.aliyun.com/document_detail/98379.html?spm=5176.2020520112.0.dexternal.7ec034c0CHYDNp" target="_blank" rel="noopener">https://help.aliyun.com/document_detail/98379.html?spm=5176.2020520112.0.dexternal.7ec034c0CHYDNp</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1.登录阿里云&lt;br&gt;登录地址：&lt;a href=&quot;https://signin.aliyun.com/login.htm#/main&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://signin.aliyun.com/login.htm#/m</summary>
      
    
    
    
    
    <category term="log" scheme="https://nmk0718.github.io/tag/log/"/>
    
  </entry>
  
  <entry>
    <title>Kunbernetes自动化部署</title>
    <link href="https://nmk0718.github.io/2020/10/17/Kunbernetes%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/"/>
    <id>https://nmk0718.github.io/2020/10/17/Kunbernetes%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/</id>
    <published>2020-10-17T01:29:00.000Z</published>
    <updated>2024-11-29T06:44:58.792Z</updated>
    
    <content type="html"><![CDATA[<p>部署流程如下图</p><img src="\image\1.png"><h3 id="Kubernetes"><a href="#Kubernetes" class="headerlink" title="Kubernetes"></a>Kubernetes</h3><p>此文档为安装 Kubernetes 单Master节点</p><h4 id="配置要求"><a href="#配置要求" class="headerlink" title="配置要求"></a>配置要求</h4><ul><li>至少2台<strong>2核4G</strong>的服务器</li><li><strong>Cent OS 7.6 / 7.7 / 7.8</strong></li></ul><h4 id="检查-centos-hostname"><a href="#检查-centos-hostname" class="headerlink" title="检查 centos / hostname"></a>检查 centos / hostname</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在 master 节点和 worker 节点都要执行</span></span><br><span class="line">[root@k8s-node1 ~]<span class="comment"># cat /etc/redhat-release</span></span><br><span class="line">CentOS Linux release 7.8.2003 (Core)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此处 hostname 的输出将会是该机器在 Kubernetes 集群中的节点名字</span></span><br><span class="line"><span class="comment"># 不能使用 localhost 作为节点的名字</span></span><br><span class="line">[root@k8s-node1 ~]<span class="comment"># hostname</span></span><br><span class="line">k8s-node1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 请使用 lscpu 命令，核对 CPU 信息</span></span><br><span class="line"><span class="comment"># Architecture: x86_64    本安装文档不支持 arm 架构</span></span><br><span class="line"><span class="comment"># CPU(s):       2         CPU 内核数量不能低于 2</span></span><br><span class="line">[root@k8s-node1 ~]<span class="comment"># lscpu</span></span><br><span class="line">Architecture:          x86_64</span><br><span class="line">CPU op-mode(s):        32-bit, 64-bit</span><br><span class="line">Byte Order:            Little Endian</span><br><span class="line">CPU(s):                2</span><br></pre></td></tr></table></figure><h4 id="修改-hostname"><a href="#修改-hostname" class="headerlink" title="修改 hostname"></a>修改 hostname</h4><p>如果您需要修改 hostname，可执行如下指令：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改 hostname</span></span><br><span class="line">hostnamectl <span class="built_in">set</span>-hostname your-new-host-name</span><br><span class="line"><span class="comment"># 查看修改结果</span></span><br><span class="line">hostnamectl status</span><br><span class="line"><span class="comment"># 设置 hostname 解析</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"127.0.0.1   <span class="variable">$(hostname)</span>"</span> &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure><h4 id="检查网络"><a href="#检查网络" class="headerlink" title="检查网络"></a>检查网络</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@k8s-node1 ~]# ip route show</span><br><span class="line">default via 192.168.229.2 dev ens33 proto static metric 100 </span><br><span class="line">192.168.229.0/24 dev ens33 proto kernel scope link src 192.168.229.6 metric 100 </span><br><span class="line"></span><br><span class="line">[root@k8s-node1 ~]# ip address</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000</span><br><span class="line">    link/ether 00:0c:29:67:6f:10 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 192.168.229.6/24 brd 192.168.229.255 scope global noprefixroute ens33</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure><p>kubelet使用的IP地址</p><ul><li><code>ip route show</code> 命令中，可以知道机器的默认网卡，通常是 <code>eth0</code>，如 <strong><em>default via 172.21.0.23 dev eth0</em></strong> . 这里的是<code>ens33</code></li><li><code>ip address</code> 命令中，可显示默认网卡的 IP 地址，Kubernetes 将使用此 IP 地址与集群内的其他节点通信，如 <code>192.168.229.6</code></li><li>所有节点上 Kubernetes 所使用的 IP 地址必须可以互通（无需 NAT 映射、无安全组或防火墙隔离）</li></ul><h4 id="安装docker及kubelet"><a href="#安装docker及kubelet" class="headerlink" title="安装docker及kubelet"></a>安装docker及kubelet</h4><p>确认是否满足以下条件</p><ul><li>显示 安装 docker/kubelet 的文档</li><li>我的任意节点 centos 版本为 7.6 / 7.7 或 7.8</li><li>我的任意节点 CPU 内核数量大于等于 2，且内存大于等于 4G</li><li>我的任意节点 hostname 不是 localhost，且不包含下划线、小数点、大写字母</li><li>我的任意节点都有固定的内网 IP 地址</li><li>我的任意节点都只有一个网卡，如果有特殊目的，我可以在完成 K8S 安装后再增加新的网卡</li><li>我的任意节点上 <a href="https://www.kuboard.cn/install/install-k8s.html#检查网络" target="_blank" rel="noopener">Kubelet使用的 IP 地址</a> 可互通（无需 NAT 映射即可相互访问），且没有防火墙、安全组隔离</li><li>我的任意节点不会直接使用 docker run 或 docker-compose 运行容器</li></ul><p>使用 root 身份在所有节点执行如下代码，以安装软件：</p><ul><li>docker</li><li>nfs-utils</li><li>kubectl / kubeadm / kubelet</li></ul><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在 master 节点和 worker 节点都要执行</span></span><br><span class="line"><span class="comment"># 阿里云 docker hub 镜像</span></span><br><span class="line"><span class="built_in">export</span> REGISTRY_MIRROR=https://registry.cn-hangzhou.aliyuncs.com</span><br><span class="line">curl -sSL https://kuboard.cn/install-script/v1.19.x/install_kubelet.sh | sh -s 1.19.2</span><br></pre></td></tr></table></figure><h4 id="初始化-master-节点"><a href="#初始化-master-节点" class="headerlink" title="初始化 master 节点"></a>初始化 master 节点</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 只在 master 节点执行</span></span><br><span class="line"><span class="comment"># 替换 x.x.x.x 为 master 节点实际 IP（请使用内网 IP）</span></span><br><span class="line"><span class="comment"># export 命令只在当前 shell 会话中有效，开启新的 shell 窗口后，如果要继续安装过程，请重新执行此处的 export 命令</span></span><br><span class="line"><span class="built_in">export</span> MASTER_IP=x.x.x.x</span><br><span class="line"><span class="comment"># 替换 apiserver.demo 为 您想要的 dnsName</span></span><br><span class="line"><span class="built_in">export</span> APISERVER_NAME=apiserver.demo</span><br><span class="line"><span class="comment"># Kubernetes 容器组所在的网段，该网段安装完成后，由 kubernetes 创建，事先并不存在于您的物理网络中</span></span><br><span class="line"><span class="built_in">export</span> POD_SUBNET=10.100.0.1/16</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;MASTER_IP&#125;</span>    <span class="variable">$&#123;APISERVER_NAME&#125;</span>"</span> &gt;&gt; /etc/hosts</span><br><span class="line">curl -sSL https://kuboard.cn/install-script/v1.19.x/init_master.sh | sh -s 1.19.2</span><br></pre></td></tr></table></figure><h5 id="检查-master-初始化结果"><a href="#检查-master-初始化结果" class="headerlink" title="检查 master 初始化结果"></a><strong>检查 master 初始化结果</strong></h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 只在 master 节点执行</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行如下命令，等待 3-10 分钟，直到所有的容器组处于 Running 状态</span></span><br><span class="line">[root@k8s-node1 ~]<span class="comment"># watch kubectl get pod -n kube-system -o wide</span></span><br><span class="line">NAME                                       READY   STATUS    RESTARTS   AGE   IP              NODE        </span><br><span class="line">calico-kube-controllers-6c89d944d5-zwcl2   1/1     Running   3          43h   10.100.36.75    k8s-node1   </span><br><span class="line">calico-node-6gcj9                          1/1     Running   3          43h   192.168.229.6   k8s-node1   </span><br><span class="line">calico-node-pgqjz                          1/1     Running   5          42h   192.168.229.7   k8s-node2   </span><br><span class="line">coredns-59c898cd69-7vnfg                   1/1     Running   3          43h   10.100.36.76    k8s-node1   </span><br><span class="line">coredns-59c898cd69-fmrjf                   1/1     Running   3          43h   10.100.36.77    k8s-node1   </span><br><span class="line">etcd-k8s-node1                             1/1     Running   3          43h   192.168.229.6   k8s-node1   </span><br><span class="line">kube-apiserver-k8s-node1                   1/1     Running   3          43h   192.168.229.6   k8s-node1   </span><br><span class="line">kube-controller-manager-k8s-node1          1/1     Running   3          43h   192.168.229.6   k8s-node1   </span><br><span class="line">kube-proxy-6sfnc                           1/1     Running   5          42h   192.168.229.7   k8s-node2   </span><br><span class="line">kube-proxy-gpfrv                           1/1     Running   3          43h   192.168.229.6   k8s-node1   </span><br><span class="line">kube-scheduler-k8s-node1                   1/1     Running   3          43h   192.168.229.6   k8s-node1   </span><br><span class="line">kuboard-655785f55c-rc52g                   1/1     Running   1          23h   10.100.36.78    k8s-node1   </span><br><span class="line">metrics-server-7dbf6c4558-5ggbt            1/1     Running   3          21h   192.168.229.7   k8s-node2  </span><br><span class="line"><span class="comment"># 查看 master 节点初始化结果</span></span><br><span class="line">[root@k8s-node1 ~]<span class="comment"># kubectl get nodes -o wide</span></span><br><span class="line">NAME        STATUS   ROLES    AGE   VERSION   INTERNAL-IP     EXTERNAL-IP   OS-IMAGE                KERNEL-VERSION           CONTAINER-RUNTIME</span><br><span class="line">k8s-node1   Ready    master   43h   v1.19.2   192.168.229.6   &lt;none&gt;        CentOS Linux 7 (Core)   3.10.0-1127.el7.x86_64   docker://19.3.11</span><br></pre></td></tr></table></figure><h4 id="初始化-worker节点"><a href="#初始化-worker节点" class="headerlink" title="初始化 worker节点"></a>初始化 worker节点</h4><h5 id="获得-join命令参数"><a href="#获得-join命令参数" class="headerlink" title="获得 join命令参数"></a>获得 join命令参数</h5><p><strong>在 master 节点上执行</strong></p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 只在 master 节点执行</span></span><br><span class="line">kubeadm token create --<span class="built_in">print</span>-join-command</span><br></pre></td></tr></table></figure><p>可获取kubeadm join 命令及参数，如下所示</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubeadm token create 命令的输出</span></span><br><span class="line">kubeadm join apiserver.demo:6443 --token mpfjma.4vjjg8flqihor4vt     --discovery-token-ca-cert-hash sha256:6f7a8e40a810323672de5eee6f4d19aa2dbdb38411845a1bf5dd63485c43d303</span><br></pre></td></tr></table></figure><p>有效时间</p><p>该 token 的有效时间为 2 个小时，2小时内，您可以使用此 token 初始化任意数量的 worker 节点。</p><p><strong>针对所有的 worker 节点执行</strong></p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 只在 worker 节点执行</span></span><br><span class="line"><span class="comment"># 替换 x.x.x.x 为 master 节点的内网 IP</span></span><br><span class="line"><span class="built_in">export</span> MASTER_IP=x.x.x.x</span><br><span class="line"><span class="comment"># 替换 apiserver.demo 为初始化 master 节点时所使用的 APISERVER_NAME</span></span><br><span class="line"><span class="built_in">export</span> APISERVER_NAME=apiserver.demo</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;MASTER_IP&#125;</span>    <span class="variable">$&#123;APISERVER_NAME&#125;</span>"</span> &gt;&gt; /etc/hosts</span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换为 master 节点上 kubeadm token create 命令的输出</span></span><br><span class="line">kubeadm join apiserver.demo:6443 --token mpfjma.4vjjg8flqihor4vt     --discovery-token-ca-cert-hash sha256:6f7a8e40a810323672de5eee6f4d19aa2dbdb38411845a1bf5dd63485c43d303</span><br></pre></td></tr></table></figure><h4 id="检查初始化结果"><a href="#检查初始化结果" class="headerlink" title="检查初始化结果"></a>检查初始化结果</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 只在 master 节点执行</span></span><br><span class="line">[root@k8s-node1 ~]<span class="comment"># kubectl get nodes -o wide</span></span><br><span class="line">NAME        STATUS   ROLES    AGE   VERSION   INTERNAL-IP     EXTERNAL-IP   OS-IMAGE                KERNEL-VERSION           CONTAINER-RUNTIME</span><br><span class="line">k8s-node1   Ready    master   43h   v1.19.2   192.168.229.6   &lt;none&gt;        CentOS Linux 7 (Core)   3.10.0-1127.el7.x86_64   docker://19.3.11</span><br><span class="line">k8s-node2   Ready    &lt;none&gt;   42h   v1.19.2   192.168.229.7   &lt;none&gt;        CentOS Linux 7 (Core)   3.10.0-1127.el7.x86_64   docker://19.3.11</span><br><span class="line">[root@k8s-node1 ~]<span class="comment">#  kubectl get nodes</span></span><br><span class="line">NAME        STATUS   ROLES    AGE   VERSION</span><br><span class="line">k8s-node1   Ready    master   43h   v1.19.2</span><br><span class="line">k8s-node2   Ready    &lt;none&gt;   42h   v1.19.2</span><br></pre></td></tr></table></figure><h4 id="安装-Ingress-Controller"><a href="#安装-Ingress-Controller" class="headerlink" title="安装 Ingress Controller"></a>安装 Ingress Controller</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 只在 master 节点执行</span></span><br><span class="line">kubectl apply -f https://kuboard.cn/install-script/v1.19.x/nginx-ingress.yaml</span><br></pre></td></tr></table></figure><h4 id="安装Kuboard"><a href="#安装Kuboard" class="headerlink" title="安装Kuboard"></a>安装Kuboard</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">kubectl apply -f https://kuboard.cn/install-script/kuboard.yaml</span><br><span class="line">kubectl apply -f https://addons.kuboard.cn/metrics-server/0.3.7/metrics-server.yaml</span><br></pre></td></tr></table></figure><h5 id="查看Kuboard运行状态："><a href="#查看Kuboard运行状态：" class="headerlink" title="查看Kuboard运行状态："></a>查看Kuboard运行状态：</h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@k8s-node1 ~]<span class="comment"># kubectl get pods -l k8s.kuboard.cn/name=kuboard -n kube-system</span></span><br><span class="line">NAME                       READY   STATUS    RESTARTS   AGE</span><br><span class="line">kuboard-655785f55c-rc52g   1/1     Running   1          23h</span><br></pre></td></tr></table></figure><h5 id="获取token"><a href="#获取token" class="headerlink" title="获取token"></a>获取token</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@k8s-master ~]# echo $(kubectl -n kube-system get secret $(kubectl -n kube-system get secret | grep kuboard-user | awk &apos;&#123;print $1&#125;&apos;) -o go-template=&apos;&#123;&#123;.data.token&#125;&#125;&apos; | base64 -d)</span><br><span class="line">eyJhbGciOiJSUzI1NiIsImtpZCI6IjctcWttYVAycFljWlRoMUhtbE5lQzNueHV1dzhHX2xOUUNOQUpaSFI0TkUifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlLXN5c3RlbSIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJrdWJvYXJkLXVzZXItdG9rZW4tbTlycXMiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoia3Vib2FyZC11c2VyIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQudWlkIjoiODdmMjBjOTQtZDZjZi00N2Y3LTg3ZjItNTg3NDc4OTY1ZDE0Iiwic3ViIjoic3lzdGVtOnNlcnZpY2VhY2NvdW50Omt1YmUtc3lzdGVtOmt1Ym9hcmQtdXNlciJ9.mMD-OaqLoHrUeHFNNP2LyAS6d5yO1SbbkdPtxFCKFiGG7y5l6A6cuWzE0gqnrZXRXGMJ8nLJqNRmZDgdlyUnlBPtVe2ipWK3SYNy4kVRSguRqEXjhw7H6r1zDkyHRNczkuQQ6eYCAS55t-NRohBE6e4CAE_FiPnDF-AaO-0a0p2cZnqO1vgrkt3y_-9wfs2btmACkbzXJUyfECVWF2LYDsmeQvuiMMQkn_qcPRqh_Y65wBVfXv575NpyJox4KVEcPHcTUxgkMciIlgB6SjDCJI3PrX3GrXilqPx0tSILhvPo-cglwyK33Spvh7b0DWNi-oR3SL3aeME4Khz-ZLiLIQ</span><br></pre></td></tr></table></figure><h5 id="使用token登录kuboard"><a href="#使用token登录kuboard" class="headerlink" title="使用token登录kuboard"></a>使用token登录kuboard</h5><p>http://任意一个Worker节点的IP地址:32567/</p><h3 id="GitLab"><a href="#GitLab" class="headerlink" title="GitLab"></a>GitLab</h3><h5 id="使用docker下载gitlab镜像"><a href="#使用docker下载gitlab镜像" class="headerlink" title="使用docker下载gitlab镜像"></a>使用docker下载gitlab镜像</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@public ~]#  docker pull gitlab/gitlab-ce</span><br><span class="line">Using default tag: latest</span><br><span class="line">latest: Pulling from gitlab/gitlab-ce</span><br><span class="line">001ecc9468da: Pull complete </span><br><span class="line">f2b966749869: Pull complete </span><br><span class="line">abe474042557: Pull complete </span><br><span class="line">e1bf2fb0fbbc: Pull complete </span><br><span class="line">01aa4f31067e: Pull complete </span><br><span class="line">3e98644dd3ba: Pull complete </span><br><span class="line">d1964c740a63: Pull complete </span><br><span class="line">67d6f9c7950b: Pull complete </span><br><span class="line">3a47828397ca: Pull complete </span><br><span class="line">00ef60c779e0: Pull complete </span><br><span class="line">Digest: sha256:81ff3b05d4da7a8c9b73ec0c4945319932f2ed1d89661831f5a9defe5e408125</span><br><span class="line">Status: Downloaded newer image for gitlab/gitlab-ce:latest</span><br><span class="line">docker.io/gitlab/gitlab-ce:latest</span><br></pre></td></tr></table></figure><h5 id="检查镜像下载是否成功"><a href="#检查镜像下载是否成功" class="headerlink" title="检查镜像下载是否成功"></a>检查镜像下载是否成功</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@public ~]# docker images</span><br><span class="line">REPOSITORY                                TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">gitlab/gitlab-ce                          latest              85ef0c92d667        3 days ago          1.98GB</span><br><span class="line">registry.aliyuncs.com/k8sxio/kube-proxy   v1.19.2             d373dd5a8593        11 days ago         118MB</span><br><span class="line">eipwork/kuboard                           latest              58cbda9ae6df        2 weeks ago         182MB</span><br><span class="line">eipwork/metrics-server                    v0.3.7              07c9e703ca2c        5 months ago        55.4MB</span><br><span class="line">calico/node                               v3.13.1             2e5029b93d4a        6 months ago        260MB</span><br><span class="line">calico/pod2daemon-flexvol                 v3.13.1             e8c600448aae        6 months ago        111MB</span><br><span class="line">calico/cni                                v3.13.1             6912ec2cfae6        6 months ago        207MB</span><br><span class="line">registry.aliyuncs.com/k8sxio/pause        3.2                 80d28bedfe5d        7 months ago        683kB</span><br><span class="line">nginx/nginx-ingress                       1.5.5               1e674eebb1af        12 months ago       161MB</span><br></pre></td></tr></table></figure><h5 id="创建数据存储目录"><a href="#创建数据存储目录" class="headerlink" title="创建数据存储目录"></a>创建数据存储目录</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@public ~]# mkdir  -p /file/gitlab/data</span><br><span class="line">[root@public ~]# mkdir /file/gitlab/logs</span><br><span class="line">[root@public ~]# mkdir /file/gitlab/config</span><br></pre></td></tr></table></figure><h5 id="启动gitlab"><a href="#启动gitlab" class="headerlink" title="启动gitlab"></a>启动gitlab</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@public gitlab]# docker run --detach \</span><br><span class="line">&gt;       --hostname 192.168.229.8 \</span><br><span class="line">&gt;       --publish 8443:443 --publish 9080:80 --publish 2222:22 \</span><br><span class="line">&gt;       --name gitlab \</span><br><span class="line">&gt;       --restart always \</span><br><span class="line">&gt;       --volume /file/gitlab/config:/etc/gitlab \</span><br><span class="line">&gt;       --volume /file/gitlab/logs:/var/log/gitlab \</span><br><span class="line">&gt;       --volume /file/gitlab/data:/var/opt/gitlab \</span><br><span class="line">&gt;    docker.io/gitlab/gitlab-ce:latest</span><br><span class="line">ca10c6a70bfc8f55cd43af2471c1d670fc378726375ac4b39b6c9a761d2b5ed1</span><br></pre></td></tr></table></figure><p><strong>gitlab如使用单台服务器可使用默认配置,若跟别的服务放一起会出现gitlab占用内存过多问题</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi /file/gitlab/config/gitlab.rb</span><br><span class="line"></span><br><span class="line">#去掉下面的注释</span><br><span class="line"></span><br><span class="line">unicorn[&apos;worker_processes&apos;] = 2</span><br><span class="line"></span><br><span class="line">#之后执行</span><br><span class="line"></span><br><span class="line">docker exec -it gitlab gitlab-ctl reconfigure</span><br><span class="line"></span><br><span class="line">docker exec -it gitlab gitlab-ctl restart</span><br></pre></td></tr></table></figure><h5 id="创建项目组"><a href="#创建项目组" class="headerlink" title="创建项目组"></a>创建项目组</h5><img src="\image\image-20200929152933319.png"><h5 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h5><img src="\image\image-20200929153011476.png"><h5 id="配置本地Git环境"><a href="#配置本地Git环境" class="headerlink" title="配置本地Git环境"></a>配置本地Git环境</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;Administrator&quot;</span><br><span class="line">git config --global user.email &quot;admin@example.com&quot;</span><br></pre></td></tr></table></figure><h3 id="Jenkins"><a href="#Jenkins" class="headerlink" title="Jenkins"></a>Jenkins</h3><h5 id="安装jdk"><a href="#安装jdk" class="headerlink" title="安装jdk"></a>安装jdk</h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">tar zxvf jdk-8u181-linux-x64.tar.gz</span><br><span class="line">mv jdk1.8.0_181/ java</span><br><span class="line">mv java /usr/<span class="built_in">local</span>/</span><br><span class="line"></span><br><span class="line"><span class="comment">#加入环境变量</span></span><br><span class="line">vi /etc/profile</span><br><span class="line"></span><br><span class="line">JAVA_HOME=/usr/<span class="built_in">local</span>/java</span><br><span class="line">CLASSPATH=<span class="variable">$CLASSPATH</span>:<span class="variable">$JAVA_HOME</span>/lib/</span><br><span class="line">PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin</span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br><span class="line"><span class="comment">#查看版本号</span></span><br><span class="line">java -version</span><br></pre></td></tr></table></figure><h5 id="安装Jenkins"><a href="#安装Jenkins" class="headerlink" title="安装Jenkins"></a>安装Jenkins</h5><p>yum的repos中默认是没有Jenkins的，需要先将Jenkins存储库添加到yum repos。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo</span><br><span class="line">sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key</span><br></pre></td></tr></table></figure><p>yum安装Jenkins</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum install jenkins</span><br></pre></td></tr></table></figure><p>启动jenkins</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/lib/jenkins/</span><br><span class="line">java -jar -Xms512m -Xmx1024m jenkins.war  &amp;</span><br></pre></td></tr></table></figure><p>配置文件/root/.jenkins/config.xml</p><p>在浏览器输入<code>ip:8080</code>进入Jenkins登录页面。</p><p>进入登录页面后，Jenkins提示我们需要输入超级管理员密码进行解锁。根据提示，我们可以在<code>/var/lib/jenkins/secrets/initialAdminPassword</code>文件里找到密码。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat /var/lib/jenkins/secrets/initialAdminPassword</span><br></pre></td></tr></table></figure><p>找到密码后，复制密码，粘贴到Jenkins解锁页面，点击<code>Continue</code>继续初始化配置。短暂的等待后，进入插件安装页面。</p><p>点击<code>Install suggested plugins</code>，安装默认插件</p><p>安装完成后，页面自动进入了管理员账户注册页面</p><p>输入信息注册。点击<code>Save and Finish</code>。</p><p>点击<code>Start using Jenkins</code>，进入Jenkins主页面。</p><h5 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install curl-devel expat-devel gettext-devel \</span><br><span class="line">  openssl-devel zlib-devel</span><br><span class="line"></span><br><span class="line">yum -y install git-core</span><br><span class="line">#查看版本号</span><br><span class="line">git --version</span><br></pre></td></tr></table></figure><h5 id="安装Maven"><a href="#安装Maven" class="headerlink" title="安装Maven"></a>安装Maven</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#下载maven包,解压</span><br><span class="line">wget https://mirrors.tuna.tsinghua.edu.cn/apache/maven/maven-3/3.6.3/binaries/apache-maven-3.6.3-bin.tar.gz</span><br><span class="line">tar zxvf apache-maven-3.6.3-bin.tar.gz </span><br><span class="line">mv apache-maven-3.6.3 /usr/local/maven</span><br><span class="line"></span><br><span class="line">#添加环境变量</span><br><span class="line">vi /etc/profile</span><br><span class="line">#MAVEN</span><br><span class="line">MAVEN_HOME=/usr/local/maven</span><br><span class="line">export MAVEN_HOME</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin:$MAVEN_HOME/bin</span><br><span class="line"></span><br><span class="line">#生效环境变量</span><br><span class="line">source /etc/profile</span><br><span class="line"></span><br><span class="line">#查看版本号</span><br><span class="line">mvn -v</span><br></pre></td></tr></table></figure><h5 id="安装NPM"><a href="#安装NPM" class="headerlink" title="安装NPM"></a>安装NPM</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#下载node,解压</span><br><span class="line">[root@public home]# wget https://nodejs.org/dist/v12.19.0/node-v12.19.0-linux-x64.tar.xz</span><br><span class="line">[root@public home]# tar xf  node-v12.19.0-linux-x64.tar.xz </span><br><span class="line">[root@public home]# cd node-v12.19.0-linux-x64</span><br><span class="line">#软链接</span><br><span class="line">[root@public node-v12.19.0-linux-x64]# ln -s /home/node-v12.19.0-linux-x64/bin/npm   /usr/local/bin/ </span><br><span class="line">[root@public node-v12.19.0-linux-x64]# ln -s /home/node-v12.19.0-linux-x64/bin/node   /usr/local/bin/</span><br><span class="line">#查看版本号验证</span><br><span class="line">[root@public node-v12.19.0-linux-x64]# node -v</span><br><span class="line">v12.19.0</span><br><span class="line">[root@public node-v12.19.0-linux-x64]# npm -v</span><br><span class="line">6.14.8</span><br><span class="line">#安装依赖</span><br><span class="line">[root@public node-v12.19.0-linux-x64]# npm install</span><br></pre></td></tr></table></figure><h5 id="创建构建"><a href="#创建构建" class="headerlink" title="创建构建"></a>创建构建</h5><img src="\image\image-20201009095212341.png"><h5 id="配置参数"><a href="#配置参数" class="headerlink" title="配置参数"></a>配置参数</h5><img src="\image\image-20201009095313048.png"><h5 id="配置打包构建"><a href="#配置打包构建" class="headerlink" title="配置打包构建"></a>配置打包构建</h5><img src="\image\image-20200929153431712.png"><p>通过git clone 拉取代码.mvn clean install进行打包.通过dockerfile上传到镜像仓库</p><h5 id="发布到k8s"><a href="#发布到k8s" class="headerlink" title="发布到k8s"></a>发布到k8s</h5><img src="\image\image-20200929154250350.png">通过ssh插件发送yaml文件到k8s-master<h5 id="删除打包文件"><a href="#删除打包文件" class="headerlink" title="删除打包文件"></a>删除打包文件</h5><img src="\image\image-20200929154426301.png"><h5 id="dockerfile文件"><a href="#dockerfile文件" class="headerlink" title="dockerfile文件"></a>dockerfile文件</h5><p>Dockerfile</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FROM  192.168.229.8:8551/centos:latest</span><br><span class="line">MAINTAINER nmk</span><br><span class="line"></span><br><span class="line">COPY  *.jar /home/App.jar</span><br><span class="line">COPY  start.sh /home/start.sh</span><br><span class="line">RUN chmod +x /home/start.sh</span><br><span class="line">ENV JAVA_HOME=/usr/local/java</span><br><span class="line">ENV PATH $JAVA_HOME/bin:$PATH</span><br><span class="line">ENV CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class="line">ENV LC_ALL=&quot;en_US.UTF-8&quot;</span><br><span class="line">ENV LANG=&quot;en_US.UTF-8&quot;</span><br><span class="line"></span><br><span class="line">EXPOSE appport</span><br><span class="line">CMD [&quot;/home/start.sh&quot;]</span><br></pre></td></tr></table></figure><p>build.sh</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">#构建有版本号的镜像，以防需要回滚，而且是从镜像创建服务</span><br><span class="line">docker build -t 192.168.229.8:8551/$1:$2     . -f Dockerfile</span><br><span class="line"></span><br><span class="line">docker push     192.168.229.8:8551/$1:$2</span><br><span class="line">#构建latest版本，用于自动部署</span><br><span class="line">docker build -t 192.168.229.8:8551/$1:latest . -f Dockerfile</span><br><span class="line">docker push     192.168.229.8:8551/$1:latest</span><br></pre></td></tr></table></figure><p>start.sh</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">JARFILE=/home/App.jar</span><br><span class="line">LOGPATH=/home/logs</span><br><span class="line">LOG=/home/logs/app.log</span><br><span class="line">if [ ! -d $LOGPATH ];then</span><br><span class="line">   mkdir -p $LOGPATH</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">java -jar -Xms512M -Xmx1024M -Djava.security.egd=file:/dev/./urandom $JARFILE &gt;&gt; $LOG &amp;</span><br><span class="line"></span><br><span class="line">tail  -50f $LOG</span><br></pre></td></tr></table></figure><h5 id="yaml文件"><a href="#yaml文件" class="headerlink" title="yaml文件"></a>yaml文件</h5><p>app.yaml</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    app: appname</span><br><span class="line">  name: appname</span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  replicas: 2</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: appname</span><br><span class="line">  strategy:</span><br><span class="line">    rollingUpdate:</span><br><span class="line">      maxSurge: 25%</span><br><span class="line">      maxUnavailable: 25%</span><br><span class="line">    type: RollingUpdate</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: appname</span><br><span class="line">    spec:</span><br><span class="line">      imagePullSecrets:</span><br><span class="line">      - name: regcred</span><br><span class="line">      containers:</span><br><span class="line">      - name: appname</span><br><span class="line">        image: 192.168.229.8:8551/appname:latest</span><br><span class="line">        imagePullPolicy: Always</span><br><span class="line">        livenessProbe:</span><br><span class="line">            failureThreshold: 3</span><br><span class="line">            httpGet:</span><br><span class="line">              path: apppath</span><br><span class="line">              port: appport</span><br><span class="line">              scheme: HTTP</span><br><span class="line">            initialDelaySeconds: 180</span><br><span class="line">            periodSeconds: 10</span><br><span class="line">            successThreshold: 1</span><br><span class="line">            timeoutSeconds: 1 </span><br><span class="line">        readinessProbe:</span><br><span class="line">            failureThreshold: 3</span><br><span class="line">            httpGet:</span><br><span class="line">              path: apppath</span><br><span class="line">              port: appport</span><br><span class="line">              scheme: HTTP</span><br><span class="line">            initialDelaySeconds: 180</span><br><span class="line">            periodSeconds: 10</span><br><span class="line">            successThreshold: 1</span><br><span class="line">            timeoutSeconds: 1</span><br><span class="line">        resources:</span><br><span class="line">            limits:</span><br><span class="line">              cpu: 200m</span><br><span class="line">              memory: 512Mi</span><br><span class="line">            requests:</span><br><span class="line">              cpu: 100m</span><br><span class="line">              memory: 256Mi</span><br></pre></td></tr></table></figure><p>service.yaml</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  annotations:</span><br><span class="line">  labels:</span><br><span class="line">    app: appname</span><br><span class="line">  name: appname</span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">    - name: appname</span><br><span class="line">      port: appport</span><br><span class="line">      protocol: TCP</span><br><span class="line">      targetPort: appport</span><br><span class="line">  selector:</span><br><span class="line">    app: appname</span><br><span class="line">  sessionAffinity: None</span><br><span class="line">  type: ClusterIP</span><br></pre></td></tr></table></figure><p>ingress.yaml</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apiVersion: networking.k8s.io/v1beta1</span><br><span class="line">kind: Ingress</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    app: appname</span><br><span class="line">  name: appname</span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  rules:</span><br><span class="line">    - host: nmk0718.com</span><br><span class="line">      http:</span><br><span class="line">        paths:</span><br><span class="line">          - backend:</span><br><span class="line">              serviceName: appname</span><br><span class="line">              servicePort: appname</span><br><span class="line">            path: /apppath</span><br><span class="line">            pathType: ImplementationSpecific</span><br></pre></td></tr></table></figure><p>*ingress.yaml同域名不同URL创建会覆盖,需手动进行添加。不同域名同URL创建不会覆盖.</p><h5 id="打包前端项目"><a href="#打包前端项目" class="headerlink" title="打包前端项目"></a>打包前端项目</h5><ul><li>拉取前端代码和dockerfile文件</li><li>解压前端依赖的node_modules</li><li>使用npm run build打包</li><li>压缩build出来的dist文件夹</li><li>移动dist压缩包到dockerfile文件夹</li><li>授予build.sh执行权限,传递appname和build_number进行打包镜像</li><li>替换yaml文件的配置</li></ul><img src="\image\image-20201010152902659.png"><ul><li>通过ssh插件发送yaml文件到k8s-master</li><li>通过yaml文件创建应用和应用需要的service</li><li>删除yaml文件</li></ul><img src="\image\image-20201010153404229.png"><ul><li>手动更新ingress进行路径转发</li></ul><img src="\image\image-20201010153550656.png"><ul><li>通过插件在发布完清空工作空间的残留</li></ul><img src="\image\image-20201010153710024.png"><ul><li>查看应用是service是否创建成功</li></ul><img src="\image\image-20201010154554549.png"><ul><li>访问域名查看是否成功</li></ul><img src="\image\image-20201010155028976.png"><h5 id="打包后端项目"><a href="#打包后端项目" class="headerlink" title="打包后端项目"></a>打包后端项目</h5><ul><li>拉取后端代码和dockerfile</li><li>进入项目目录进行打包构建</li><li>复制jar包到dockerfile的文件夹</li><li>进入dockerfile文件夹 替换参数到docker和yaml</li><li>授予build.sh执行权限 执行build.sh并传递参数</li></ul><img src="\image\image-20201010155626966.png"><ul><li>通过ssh插件发送yaml文件到k8s-master</li><li>通过yaml文件创建应用和应用需要的service</li><li>删除yaml文件</li></ul><img src="\image\image-20201010155815880.png"><ul><li>手动更新ingress进行路径转发</li></ul><img src="\image\image-20201010155910502.png"><ul><li>通过插件在发布完清空工作空间的残留</li></ul><img src="\image\image-20201010153710024.png"><ul><li>查看应用是service是否创建成功</li></ul><img src="\image\image-20201010154554549.png"><ul><li>访问域名查看是否成功</li></ul><img src="\image\image-20201010160221404.png"><h3 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h3><h5 id="打包基础镜像供项目使用"><a href="#打包基础镜像供项目使用" class="headerlink" title="打包基础镜像供项目使用"></a>打包基础镜像供项目使用</h5><p>拉取centos镜像</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@public bin]# docker pull centos:7.8.2003</span><br><span class="line">7.8.2003: Pulling from library/centos</span><br><span class="line">9b4ebb48de8d: Already exists </span><br><span class="line">Digest: sha256:8540a199ad51c6b7b51492fa9fee27549fd11b3bb913e888ab2ccf77cbb72cc1</span><br><span class="line">Status: Downloaded newer image for centos:7.8.2003</span><br><span class="line">docker.io/library/centos:7.8.2003</span><br></pre></td></tr></table></figure><p>查看镜像信息</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@public bin]# docker images</span><br><span class="line">REPOSITORY                                TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">centos                                    7.8.2003            afb6fca791e0        4 months ago        203MB</span><br></pre></td></tr></table></figure><p>后台运行镜像</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker  run -d afb6fca791e0  tail -f /dev/null</span><br></pre></td></tr></table></figure><p>查看运行的容器</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@public bin]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND               CREATED             STATUS                  PORTS               NAMES</span><br><span class="line">fc7ac56e28e4        afb6fca791e0        &quot;tail -f /dev/null&quot;   3 seconds ago       Up Less than a second                       determined_nightingale</span><br></pre></td></tr></table></figure><h5 id="安装jdk-1"><a href="#安装jdk-1" class="headerlink" title="安装jdk"></a>安装jdk</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#拷贝压缩包到容器</span><br><span class="line">docker cp jdk-8u181-linux-x64.tar.gz fc7ac56e28e4:/home/</span><br><span class="line"></span><br><span class="line">#进入容器</span><br><span class="line">docker exec -it fc7ac56e28e4 /bin/bash</span><br><span class="line">tar zxvf jdk-8u181-linux-x64.tar.gz</span><br><span class="line">mv jdk-8u181-linux-x64 java</span><br><span class="line">mv java /usr/local/</span><br><span class="line"> </span><br><span class="line">#加入环境变量</span><br><span class="line">vi /etc/profile</span><br><span class="line"> </span><br><span class="line">export JAVA_HOME=/usr/local/java</span><br><span class="line">export CLASSPATH=$CLASSPATH:$JAVA_HOME/lib/</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin</span><br><span class="line"></span><br><span class="line">#生效环境变量</span><br><span class="line">source /etc/profile</span><br><span class="line"></span><br><span class="line">#查看版本号</span><br><span class="line">java -version</span><br></pre></td></tr></table></figure><h5 id="打包镜像"><a href="#打包镜像" class="headerlink" title="打包镜像"></a>打包镜像</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#把运行的容器打成镜像</span><br><span class="line">[root@public bin]# docker commit -a &quot;nmk&quot; fc7ac56e28e4 centos:v1.1</span><br><span class="line">sha256:bd61002052705bc6b2c838ddae7fb2e1d4974c7ed32ab6dd0ed205096deba5d5</span><br><span class="line"></span><br><span class="line">[root@public bin]# docker images</span><br><span class="line">REPOSITORY                                TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">centos                                    v1.1                bd6100205270        3 seconds ago       203MB</span><br><span class="line">centos                                    7.8.2003            afb6fca791e0        4 months ago        203MB</span><br></pre></td></tr></table></figure><h3 id="Nexus"><a href="#Nexus" class="headerlink" title="Nexus"></a>Nexus</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">下载nexus</span><br><span class="line">https://www.sonatype.com/download-oss-sonatype</span><br><span class="line">选择   Nexus Repository Manager OSS 3.x - Unix</span><br><span class="line"></span><br><span class="line">tar zxvf nexus-3.27.0-03-unix.tar.gz</span><br><span class="line">mv nexus-3.27.0-03 /usr/local/nexus</span><br><span class="line">mv sonatype-work/ /usr/local/</span><br><span class="line"></span><br><span class="line">vi /etc/profile</span><br><span class="line">#nexus</span><br><span class="line">export NEXUS_HOME=/usr/local/nexus</span><br><span class="line">export PATH=$PATH:$NEXUS_HOME/bin</span><br><span class="line"></span><br><span class="line">source /etc/profile</span><br><span class="line"></span><br><span class="line">cd /usr/local/nexus/etc/</span><br><span class="line">vi nexus-default.properties</span><br><span class="line"></span><br><span class="line">cd /usr/local/nexus/bin</span><br><span class="line">nexus start</span><br><span class="line"></span><br><span class="line">访问http://192.168.229.8:8081/</span><br></pre></td></tr></table></figure><h5 id="创建Docker仓库"><a href="#创建Docker仓库" class="headerlink" title="创建Docker仓库"></a>创建Docker仓库</h5><p>在Nexus中Docker仓库被分为了三种</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hosted： 托管仓库 ，私有仓库，可以push和pull </span><br><span class="line">proxy： 代理和缓存远程仓库 ，只能pull</span><br><span class="line">group： 将多个proxy和hosted仓库添加到一个组，只访问一个组地址即可，只能pull</span><br></pre></td></tr></table></figure><p><strong>1、配置Blob Stores</strong></p><p>点击 管理 -&gt;Repository -&gt;Blob Stores-&gt; Create blob stores</p><img src="\image\image-20200923150230710.png"><p>一旦创建了blob store，就不可修改类型和名称。而且，该blob store被仓库或者仓库组使用后，都不可以被删除。一个仓库只可以使用一个Blob Store，一个Blob Store可以对应多个仓库。Blob store的大小为Path对应的文件夹的大小。</p><p><strong>2.创建<code>hosted repository*</code></strong></p><p>点击 管理 -&gt; Repository -&gt; Repositories -&gt; Create Repository -&gt; Docker(hosted)</p><img src="\image\image-20200923150844177.png"><p>这样就创建好了一个私有仓库。访问地址即 为192.168.229.8:8551</p><h5 id="查看私有镜像仓库的列表"><a href="#查看私有镜像仓库的列表" class="headerlink" title="查看私有镜像仓库的列表"></a>查看私有镜像仓库的列表</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@public ~]#  curl -X GET -u admin:nmk0718 http://192.168.229.8:8551/v2/_catalog</span><br><span class="line">&#123;&quot;repositories&quot;:[&quot;bosybox&quot;,&quot;centos&quot;,&quot;nmk0718&quot;,&quot;nmktest&quot;]&#125;</span><br></pre></td></tr></table></figure><h5 id="查看私有镜像仓库的版本"><a href="#查看私有镜像仓库的版本" class="headerlink" title="查看私有镜像仓库的版本"></a>查看私有镜像仓库的版本</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@public ~]#  curl -X GET -u admin:nmk0718 http://192.168.229.8:8551/v2/centos/tags/list</span><br><span class="line">&#123;&quot;name&quot;:&quot;centos&quot;,&quot;tags&quot;:[&quot;v1.1&quot;,&quot;v1.2&quot;,&quot;v1.3&quot;]&#125;</span><br></pre></td></tr></table></figure><p><strong>修改docker配置</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">增加&quot;insecure-registries&quot;: [&quot;私服库地址&quot;] 到配置中</span><br><span class="line">[root@k8s-node2 ~]# vi /etc/docker/daemon.json</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://registry.cn-hangzhou.aliyuncs.com&quot;],</span><br><span class="line">  &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;],</span><br><span class="line">  &quot;log-driver&quot;: &quot;json-file&quot;,</span><br><span class="line">  &quot;log-opts&quot;: &#123;</span><br><span class="line">    &quot;max-size&quot;: &quot;100m&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;storage-driver&quot;: &quot;overlay2&quot;,</span><br><span class="line">  &quot;storage-opts&quot;: [</span><br><span class="line">    &quot;overlay2.override_kernel_check=true&quot;</span><br><span class="line">  ],</span><br><span class="line"></span><br><span class="line">    &quot;insecure-registries&quot;: [</span><br><span class="line">       &quot;192.168.229.8:8551&quot;</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">service docker restart</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#标记镜像</span><br><span class="line">docker tag cenots:v1.1 192.168.229.8:8551/centos:v1.1</span><br><span class="line">#语法和格式：docker tag &lt;imageId or imageName&gt; &lt;nexus-hostname&gt;:&lt;repository-port&gt;/&lt;image&gt;:&lt;tag&gt;</span><br></pre></td></tr></table></figure><p>登录到私服库</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker login -u admin -p nmk0718 192.168.229.8:8551</span><br></pre></td></tr></table></figure><p>查看登录凭证</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@k8s-node2 ~]# cat ~/.docker/config.json</span><br><span class="line">&#123;</span><br><span class="line">        &quot;auths&quot;: &#123;</span><br><span class="line">                &quot;192.168.229.8:8551&quot;: &#123;</span><br><span class="line">                        &quot;auth&quot;: &quot;YWRtaW46bm1rMDcxOA==&quot;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;HttpHeaders&quot;: &#123;</span><br><span class="line">                &quot;User-Agent&quot;: &quot;Docker-Client/19.03.11 (linux)&quot;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>用户名密码可通过命令解码为明文</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@k8s-node2 ~]# echo &apos;YWRtaW46bm1rMDcxOA==&apos; | base64 --decode</span><br><span class="line">admin:nmk0718</span><br></pre></td></tr></table></figure><p><strong>后续需优化</strong>:</p><p>Docker直接将仓库的用户名密码明文保存在配置文件中非常不安全，除非用户每次在与镜像仓库交互完成之后手动执行<code>docker logout</code>删除，这种明文密码很容易被他人窃取. Docker也考虑到这一点，针对不同的平台，其提供了不同的辅助工具将仓库的登录凭证保存到其他安全系数高的存储中。</p><p>上传镜像到私服仓库</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker push 192.168.229.8:8551/centos:v1.1</span><br></pre></td></tr></table></figure><p>查看上传的镜像</p><img src="\image\3.png"><p>拉取上传到私服仓库的镜像</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@public bin]# docker pull 192.168.229.8:8551/centos:v1.1</span><br><span class="line">v1.1: Pulling from centos</span><br><span class="line">9b4ebb48de8d: Already exists </span><br><span class="line">72bf021082cd: Pull complete </span><br><span class="line">7f669da652be: Pull complete </span><br><span class="line">b64a50fe3bd5: Pull complete </span><br><span class="line">3e3a9f68a07c: Pull complete </span><br><span class="line">Digest: sha256:7c78a495de5556ab53b14c017bc20c1c4ce682d1e9d4c6aefde2c908d65ef80c</span><br><span class="line">Status: Downloaded newer image for 192.168.229.8:8551/centos:v1.1</span><br><span class="line">192.168.229.8:8551/centos:v1.1</span><br></pre></td></tr></table></figure><p>查看拉取完的镜像信息</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@public bin]# docker images</span><br><span class="line">REPOSITORY                                TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">192.168.229.8:8551/centos                 v1.1                3a26ef36258c        18 hours ago        1.03GB</span><br><span class="line">centos                                    7.8.2003            afb6fca791e0        4 months ago        203MB</span><br></pre></td></tr></table></figure><h5 id="Kubernetes从私有镜像拉取镜像"><a href="#Kubernetes从私有镜像拉取镜像" class="headerlink" title="Kubernetes从私有镜像拉取镜像"></a>Kubernetes从私有镜像拉取镜像</h5><p><strong>生成密钥</strong></p><p>在使用私有镜像拉取镜像时，需要为私有镜像仓库创建一个镜像仓库的密钥，并在创建容器中进行引用。创建镜像仓库的语法和格式：</p><p><em>kubectl create secret docker–registry &lt;<strong>regsecret-name&gt;</strong> —docker–server=&lt;your–registry–server&gt; —docker–username=&lt;your–name&gt; —docker–password=&lt;your–pword&gt; —docker–email=&lt;your–email&gt;。</em></p><ul><li><regsecret-name>：所创建的私有镜像仓库密钥的名称；</regsecret-name></li><li><your-registry-server>：为镜像仓库的服务器地址；</your-registry-server></li><li><your-name>：登录镜像仓库的用户名；</your-name></li><li><your-pword>：登录镜像仓库的密码；</your-pword></li><li><your-email>：用户的邮箱地址。</your-email></li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubectl create secret docker-registry regcred   --docker-server=192.168.229.8:8551   --docker-username=admin   --docker-password=nmk0718   --docker-email=nmk0718@163.com</span><br></pre></td></tr></table></figure><h5 id="检查-Secret-regcred"><a href="#检查-Secret-regcred" class="headerlink" title="检查 Secret regcred"></a>检查 Secret <code>regcred</code></h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@k8s-node1 ~]# kubectl get secret regcred --output=yaml</span><br><span class="line">apiVersion: v1</span><br><span class="line">data:</span><br><span class="line">  .dockerconfigjson: eyJhdXRocyI6eyIxOTIuMTY4LjIyOS44Ojg1NTEiOnsidXNlcm5hbWUiOiJhZG1pbiIsInBhc3N3b3JkIjoibm1rMDcxOCIsImVtYWlsIjoibm1rMDcxOEAxNjMuY29tIiwiYXV0aCI6IllXUnRhVzQ2Ym0xck1EY3hPQT09In19fQ==</span><br><span class="line">kind: Secret</span><br><span class="line">metadata:</span><br><span class="line">  creationTimestamp: &quot;2020-09-22T10:38:20Z&quot;</span><br><span class="line">  managedFields:</span><br><span class="line">  - apiVersion: v1</span><br><span class="line">    fieldsType: FieldsV1</span><br><span class="line">    fieldsV1:</span><br><span class="line">      f:data:</span><br><span class="line">        .: &#123;&#125;</span><br><span class="line">        f:.dockerconfigjson: &#123;&#125;</span><br><span class="line">      f:type: &#123;&#125;</span><br><span class="line">    manager: kubectl-create</span><br><span class="line">    operation: Update</span><br><span class="line">    time: &quot;2020-09-22T10:38:20Z&quot;</span><br><span class="line">  name: regcred</span><br><span class="line">  namespace: default</span><br><span class="line">  resourceVersion: &quot;98093&quot;</span><br><span class="line">  selfLink: /api/v1/namespaces/default/secrets/regcred</span><br><span class="line">  uid: 4bd46b7a-9f5c-4a73-9651-c1d947bba264</span><br><span class="line">type: kubernetes.io/dockerconfigjson</span><br></pre></td></tr></table></figure><p><code>.dockerconfigjson</code> 字段的值是 Docker 凭据的 base64 表示。</p><p>要了解 <code>dockerconfigjson</code> 字段中的内容，请将 Secret 数据转换为可读格式：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@k8s-node1 ~]# kubectl get secret regcred --output=&quot;jsonpath=&#123;.data.\.dockerconfigjson&#125;&quot; | base64 --decode</span><br><span class="line">&#123;&quot;auths&quot;:&#123;&quot;192.168.229.8:8551&quot;:&#123;&quot;username&quot;:&quot;admin&quot;,&quot;password&quot;:&quot;nmk0718&quot;,&quot;email&quot;:&quot;nmk0718@163.com&quot;,&quot;auth&quot;:&quot;YWRtaW46bm1rMDcxOA==&quot;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><p>要了解 <code>auth</code> 字段中的内容，请将 base64 编码过的数据转换为可读格式：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@k8s-node1 ~]# echo &quot;YWRtaW46bm1rMDcxOA==&quot; | base64 --decode</span><br><span class="line">admin:nmk0718</span><br></pre></td></tr></table></figure><p>注意，Secret 数据包含与本地 <code>~/.docker/config.json</code> 文件类似的授权令牌。</p><p>这样你就已经成功地将 Docker 凭据设置为集群中的名为 <code>regcred</code> 的 Secret。</p><h5 id="定义拉取镜像的部署"><a href="#定义拉取镜像的部署" class="headerlink" title="定义拉取镜像的部署"></a>定义拉取镜像的部署</h5><p>创建一个使用你的secret的pod</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: private-reg</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: private-reg-container</span><br><span class="line">    image: &lt;your-private-image&gt;</span><br><span class="line">  imagePullSecrets:</span><br><span class="line">  - name: regcred</span><br></pre></td></tr></table></figure><p>在<code>my-private-reg-pod.yaml</code> 文件中，使用私有仓库的镜像路径替换 <code>&lt;your-private-image&gt;</code>，例如：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">192.168.229.8:8551/centos:v1.1</span><br></pre></td></tr></table></figure><p>要从私有仓库拉取镜像，Kubernetes 需要凭证。 配置文件中的 <code>imagePullSecrets</code> 字段表明 Kubernetes 应该通过名为 <code>regcred</code> 的 Secret 获取凭证。</p><p>创建使用了你的 Secret 的 Pod，并检查它是否正常运行：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubectl apply -f my-private-reg-pod.yaml</span><br><span class="line">[root@k8s-node1 ~]# kubectl get pod private-reg</span><br><span class="line">NAME          READY   STATUS    RESTARTS   AGE</span><br><span class="line">private-reg   1/1     Running   1          20h</span><br></pre></td></tr></table></figure><h5 id="kubernetes命令"><a href="#kubernetes命令" class="headerlink" title="kubernetes命令"></a>kubernetes命令</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、查看指定pod的日志</span><br><span class="line"></span><br><span class="line">kubectl logs &lt;pod_name&gt;</span><br><span class="line"></span><br><span class="line">kubectl logs -f &lt;pod_name&gt; #类似tail -f的方式查看(tail -f 实时查看日志文件 tail -f 日志文件log)</span><br><span class="line"></span><br><span class="line">2、查看指定pod中指定容器的日志</span><br><span class="line"></span><br><span class="line">kubectl logs &lt;pod_name&gt; -c &lt;container_name&gt;</span><br><span class="line"></span><br><span class="line">3、进入容器的pod</span><br><span class="line">kubectl exec -ti &lt;your-pod-name&gt;  -n &lt;your-namespace&gt;  -- /bin/sh</span><br><span class="line"></span><br><span class="line">kubectl exec -it private-reg -n default /bin/bash</span><br><span class="line"></span><br><span class="line">4、显示Pod的更多信息</span><br><span class="line">kubectl get pod &lt;pod-name&gt; -o wide</span><br><span class="line"></span><br><span class="line">#以yaml格式显示Pod的详细信息</span><br><span class="line">kubectl get pod &lt;pod-name&gt; -o yaml</span><br><span class="line"></span><br><span class="line">5、查看所有Pod列表</span><br><span class="line">kubectl get pods</span><br><span class="line"></span><br><span class="line">#查看rc和service列表</span><br><span class="line">kubectl get rc,service</span><br><span class="line"></span><br><span class="line">#查看资源详细描述</span><br><span class="line"></span><br><span class="line">kubectl describe $&#123;type&#125; $&#123;name&#125; -o wide</span><br><span class="line">kubectl describe pod private-reg</span><br><span class="line">#查看资源</span><br><span class="line">kubectl get nodes|namespaces|services|pods|rc|deployments|replicasets(rs) -o wide</span><br><span class="line">kubectl get nodes -o wide</span><br></pre></td></tr></table></figure><h5 id="扩容应用"><a href="#扩容应用" class="headerlink" title="扩容应用"></a>扩容应用</h5><p>1）进行扩容</p><p>根据场景需要，通过kubectl scale deployment命令将Pod的扩容到4个。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ kubectl scale deployments my-nexus3 --replicas=4</span><br></pre></td></tr></table></figure><p>2）查看扩容后的Pod</p><p>在扩容后，通过kubectl get pods能够查看扩容后的Pod数量。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ kubectl get pods -o wide</span><br></pre></td></tr></table></figure><h5 id="升级应用"><a href="#升级应用" class="headerlink" title="升级应用"></a>升级应用</h5><p>1）使用kubectl set image命令更新应用镜像版本</p><p>当应用发布新版本后，可以</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ kubectl set image deployments/my-nexus3 *=sonatype/nexus3:latest</span><br></pre></td></tr></table></figure><p>2）回滚升级到之前的版本</p><p>当部署的版本存在问题时，可以通过执行kubectl rollout unduo回滚至之前的版本：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ kubectl rollout undo deployments/my-nexus3</span><br></pre></td></tr></table></figure><p>3）查看部署的回滚状态</p><p>回滚状态，可以通过rollout status确认。通过执行kubectl rollout stauts可以查看升级和回归的状态信息：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ kubectl rollout status deployments/my-nexus3</span><br></pre></td></tr></table></figure><h5 id="脚本定时删除worker环境的镜像"><a href="#脚本定时删除worker环境的镜像" class="headerlink" title="脚本定时删除worker环境的镜像"></a>脚本定时删除worker环境的镜像</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker rmi `docker images | grep  &quot;&lt;none&gt;&quot; | awk &apos;&#123;print $3&#125;&apos;`</span><br></pre></td></tr></table></figure><h5 id="docker-login-出现错误"><a href="#docker-login-出现错误" class="headerlink" title="docker login 出现错误"></a>docker login 出现错误</h5><p>WARNING! Using –password via the CLI is insecure. Use –password-stdin.<br>Error response from daemon: Get <a href="https://192.168.229.8:8551/v2/" target="_blank" rel="noopener">https://192.168.229.8:8551/v2/</a>: http: server gave HTTP response to HTTPS client</p><p>在/etc/docker/daemon.json中加入insecure-registries指定私服库地址,重启docker即可</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@k8s-node2 ~]# vi /etc/docker/daemon.json</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://registry.cn-hangzhou.aliyuncs.com&quot;],</span><br><span class="line">  &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;],</span><br><span class="line">  &quot;log-driver&quot;: &quot;json-file&quot;,</span><br><span class="line">  &quot;log-opts&quot;: &#123;</span><br><span class="line">    &quot;max-size&quot;: &quot;100m&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;storage-driver&quot;: &quot;overlay2&quot;,</span><br><span class="line">  &quot;storage-opts&quot;: [</span><br><span class="line">    &quot;overlay2.override_kernel_check=true&quot;</span><br><span class="line">  ],</span><br><span class="line"></span><br><span class="line">    &quot;insecure-registries&quot;: [</span><br><span class="line">       &quot;192.168.229.8:8551&quot;</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">[root@k8s-node2 ~]# systemctl restart docker</span><br></pre></td></tr></table></figure><p>Error response from daemon: login attempt to <a href="http://xx.xx.xx.xx:2020/v2/" target="_blank" rel="noopener">http://xx.xx.xx.xx:2020/v2/</a> failed with status: 401 Unauthorized</p><img src="\image\2.png"><p>添加<code>Docker Bearer Token Realm</code>到Active即可</p><h5 id="Kubernetes-pod状态出现ImagePullBackOff的原因"><a href="#Kubernetes-pod状态出现ImagePullBackOff的原因" class="headerlink" title="Kubernetes pod状态出现ImagePullBackOff的原因"></a>Kubernetes pod状态出现ImagePullBackOff的原因</h5><p>查看这个Pod的状态，发现状态为 ErrImagePull 或者 ImagePullBackOff：</p><p>[root@k8s-node1 ~]#  kubectl get pods<br>NAME          READY   STATUS    RESTARTS   AGE<br>failpod   1/1     ImagePullBackOff   1          14h</p><p>可以使用describe命令查看这个失败的Pod的明细：<br>[root@k8s-node1 ~]#  kubectl describe pod failpod</p><p>查看 describe 命令的输出中 Events 这部分，我们可以看到如下内容：<br>  Normal   BackOff                 14h (x5 over 14h)   kubelet            Back-off pulling image “192.168.229.8:8551/centos:v1.3”<br>  Warning  Failed                  14h (x4 over 14h)   kubelet            Failed to pull image “192.168.229.8:8551/centos:v1.3”: rpc error: code = Unknown desc = Error response from daemon: Get <a href="https://192.168.229.8:8551/v2/" target="_blank" rel="noopener">https://192.168.229.8:8551/v2/</a>: http: server gave HTTP response to HTTPS client<br>  Warning  Failed                  14h (x4 over 14h)   kubelet            Error: ErrImagePull</p><p>得知原因为pull的链接为https,更改/etc/docker/daemon.json添加私有库地址重启即可</p><p>注意：观察 Pod 状态的时候，镜像缺失和仓库权限不正确是没法区分的。其它情况下，Kubernetes 将报告一个 ErrImagePull 状态。</p><h3 id="宿主机映射k8s中的服务"><a href="#宿主机映射k8s中的服务" class="headerlink" title="宿主机映射k8s中的服务"></a>宿主机映射k8s中的服务</h3><h4 id="NodePort"><a href="#NodePort" class="headerlink" title="NodePort"></a>NodePort</h4><p>我们需要在service的yaml定义中指定nodePort：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kind: Service</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  name: my-service</span><br><span class="line">spec:</span><br><span class="line">  type: NodePort        // 指定service类型</span><br><span class="line">  selector:</span><br><span class="line">    app: forme</span><br><span class="line">  ports:</span><br><span class="line">    - port: 8088         // 供集群中其它服务访问的端口</span><br><span class="line">      targetPort: 8088 // 后端pod中container暴露的端口</span><br><span class="line">      nodePort: 8088   //  节点暴露的端口</span><br></pre></td></tr></table></figure><p>验证</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http://192.168.50.56:8088/health(宿主机ip+nodePort)</span><br></pre></td></tr></table></figure><p><strong>修改NodePort的范围</strong></p><p>在 Kubernetes 集群中，NodePort 默认范围是 30000-32767</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@k8s-master ~]# vi /etc/kubernetes/manifests/kube-apiserver.yaml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  annotations:</span><br><span class="line">    kubeadm.kubernetes.io/kube-apiserver.advertise-address.endpoint: 192.168.50.53:6443</span><br><span class="line">  creationTimestamp: null</span><br><span class="line">  labels:</span><br><span class="line">    component: kube-apiserver</span><br><span class="line">    tier: control-plane</span><br><span class="line">  name: kube-apiserver</span><br><span class="line">  namespace: kube-system</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - command:</span><br><span class="line">    - kube-apiserver</span><br><span class="line">    - --advertise-address=192.168.50.53</span><br><span class="line">    - --allow-privileged=true</span><br><span class="line">    - --authorization-mode=Node,RBAC</span><br><span class="line">    - --client-ca-file=/etc/kubernetes/pki/ca.crt</span><br><span class="line">    - --enable-admission-plugins=NodeRestriction</span><br><span class="line">    - --enable-bootstrap-token-auth=true</span><br><span class="line">    - --etcd-cafile=/etc/kubernetes/pki/etcd/ca.crt</span><br><span class="line">    - --etcd-certfile=/etc/kubernetes/pki/apiserver-etcd-client.crt</span><br><span class="line">    - --etcd-keyfile=/etc/kubernetes/pki/apiserver-etcd-client.key</span><br><span class="line">    - --etcd-servers=https://127.0.0.1:2379</span><br><span class="line">    - --insecure-port=0</span><br><span class="line">    - --kubelet-client-certificate=/etc/kubernetes/pki/apiserver-kubelet-client.crt</span><br><span class="line">    - --kubelet-client-key=/etc/kubernetes/pki/apiserver-kubelet-client.key</span><br><span class="line">    - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname</span><br><span class="line">    - --proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.crt</span><br><span class="line">    - --proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client.key</span><br><span class="line">    - --requestheader-allowed-names=front-proxy-client</span><br><span class="line">    - --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt</span><br><span class="line">    - --requestheader-extra-headers-prefix=X-Remote-Extra-</span><br><span class="line">    - --requestheader-group-headers=X-Remote-Group</span><br><span class="line">    - --requestheader-username-headers=X-Remote-User</span><br><span class="line">    - --secure-port=6443</span><br><span class="line">    - --service-account-key-file=/etc/kubernetes/pki/sa.pub</span><br><span class="line">    - --service-cluster-ip-range=10.96.0.0/16</span><br><span class="line">    - --tls-cert-file=/etc/kubernetes/pki/apiserver.crt</span><br><span class="line">    - --tls-private-key-file=/etc/kubernetes/pki/apiserver.key</span><br><span class="line">    image: registry.aliyuncs.com/k8sxio/kube-apiserver:v1.19.2</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line">    livenessProbe:</span><br><span class="line">      failureThreshold: 8</span><br><span class="line">      httpGet:</span><br><span class="line">        host: 192.168.50.53</span><br><span class="line">        path: /livez</span><br><span class="line">        port: 6443</span><br><span class="line">        scheme: HTTPS</span><br><span class="line">      initialDelaySeconds: 10</span><br><span class="line">      periodSeconds: 10</span><br><span class="line">      timeoutSeconds: 15</span><br><span class="line">    name: kube-apiserver</span><br><span class="line">    readinessProbe:</span><br><span class="line">      failureThreshold: 3</span><br><span class="line">      httpGet:</span><br><span class="line">        host: 192.168.50.53</span><br><span class="line">        path: /readyz</span><br><span class="line">        port: 6443</span><br><span class="line">        scheme: HTTPS</span><br><span class="line">      periodSeconds: 1</span><br><span class="line">      timeoutSeconds: 15</span><br><span class="line">    resources:</span><br><span class="line">      requests:</span><br><span class="line">        cpu: 250m</span><br><span class="line">    startupProbe:</span><br><span class="line">      failureThreshold: 24</span><br><span class="line">      httpGet:</span><br><span class="line">        host: 192.168.50.53</span><br><span class="line">        path: /livez</span><br><span class="line">        port: 6443</span><br><span class="line">        scheme: HTTPS</span><br><span class="line">      initialDelaySeconds: 10</span><br><span class="line">      periodSeconds: 10</span><br><span class="line">      timeoutSeconds: 15</span><br><span class="line">    volumeMounts:</span><br><span class="line">    - mountPath: /etc/ssl/certs</span><br><span class="line">      name: ca-certs</span><br><span class="line">      readOnly: true</span><br><span class="line">    - mountPath: /etc/pki</span><br><span class="line">      name: etc-pki</span><br><span class="line">      readOnly: true</span><br><span class="line">    - mountPath: /etc/kubernetes/pki</span><br><span class="line">      name: k8s-certs</span><br><span class="line">      readOnly: true</span><br><span class="line">  hostNetwork: true</span><br><span class="line">  priorityClassName: system-node-critical</span><br><span class="line">  volumes:</span><br><span class="line">  - hostPath:</span><br><span class="line">      path: /etc/ssl/certs</span><br><span class="line">      type: DirectoryOrCreate</span><br><span class="line">    name: ca-certs</span><br><span class="line">  - hostPath:</span><br><span class="line">      path: /etc/pki</span><br><span class="line">      type: DirectoryOrCreate</span><br><span class="line">    name: etc-pki</span><br><span class="line">  - hostPath:</span><br><span class="line">      path: /etc/kubernetes/pki</span><br><span class="line">      type: DirectoryOrCreate</span><br><span class="line">    name: k8s-certs</span><br><span class="line">status: &#123;&#125;</span><br><span class="line"></span><br><span class="line">在- --service-cluster-ip-range=10.96.0.0/16下面加入以下配置</span><br><span class="line">- --service-node-port-range=7000-10000</span><br></pre></td></tr></table></figure><p>重启apiserver</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 获得 apiserver 的 pod 名字</span><br><span class="line">export apiserver_pods=$(kubectl get pods --selector=component=kube-apiserver -n kube-system --output=jsonpath=&#123;.items..metadata.name&#125;)</span><br><span class="line"># 删除 apiserver 的 pod</span><br><span class="line">kubectl delete pod $apiserver_pods -n kube-system</span><br></pre></td></tr></table></figure><p>执行以下命令，验证修改是否生效:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubectl describe pod $apiserver_pods -n kube-system</span><br></pre></td></tr></table></figure><h4 id="HostNetwork"><a href="#HostNetwork" class="headerlink" title="HostNetwork"></a>HostNetwork</h4><p>更改app.yaml</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    app: ymall</span><br><span class="line">  name: ymall</span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: ymall</span><br><span class="line">  strategy:</span><br><span class="line">    rollingUpdate:</span><br><span class="line">      maxSurge: 25%</span><br><span class="line">      maxUnavailable: 25%</span><br><span class="line">    type: RollingUpdate</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: ymall</span><br><span class="line">    spec:</span><br><span class="line">      hostNetwork: true</span><br><span class="line">      imagePullSecrets:</span><br><span class="line">      - name: regcred</span><br><span class="line">      containers:</span><br><span class="line">      - name: ymall</span><br><span class="line">        image: 192.168.50.52:8551/ymall:latest</span><br><span class="line">        imagePullPolicy: Always</span><br><span class="line">        ports:</span><br><span class="line">    - containerPort: 8080</span><br><span class="line">        resources:</span><br><span class="line">            limits:</span><br><span class="line">              cpu: 800m</span><br><span class="line">              memory: 1224Mi</span><br><span class="line">            requests:</span><br><span class="line">              cpu: 100m</span><br><span class="line">              memory: 512Mi</span><br></pre></td></tr></table></figure><ul><li>主要参数:hostNetwork: true,containerPort: 8080</li><li>使用host网络模式,使容器使用宿主机ip就无需再进行创建service.yaml</li></ul><p>创建即可获得宿主机ip的容器</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubectl apply -f app.yaml</span><br><span class="line">[root@k8s-master ~]# kubectl get po --all-namespaces -o wide --show-labels |grep ymall</span><br><span class="line">default         ymall-754946fd54-dwwjp                          1/1     Running   0          37s   192.168.50.54    k8s-work1    &lt;none&gt;           &lt;none&gt;            app=ymall,pod-template-hash=754946fd54</span><br></pre></td></tr></table></figure><p>容器ip已经变更为宿主机ip</p><h4 id="挂载容器目录到宿主机目录"><a href="#挂载容器目录到宿主机目录" class="headerlink" title="挂载容器目录到宿主机目录"></a>挂载容器目录到宿主机目录</h4><p>更改yaml</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    app: appname</span><br><span class="line">  name: appname</span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: appname</span><br><span class="line">  strategy:</span><br><span class="line">    rollingUpdate:</span><br><span class="line">      maxSurge: 25%</span><br><span class="line">      maxUnavailable: 25%</span><br><span class="line">    type: RollingUpdate</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: appname</span><br><span class="line">    spec:</span><br><span class="line">      hostNetwork: true</span><br><span class="line">      imagePullSecrets:</span><br><span class="line">      - name: regcred</span><br><span class="line">      containers:</span><br><span class="line">      - name: appname</span><br><span class="line">        image: 192.168.50.52:8551/appname:latest</span><br><span class="line">        imagePullPolicy: Always</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: appname</span><br><span class="line">          mountPath: /home/www/appCenterTest/public</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 8081</span><br><span class="line">        resources:</span><br><span class="line">            limits:</span><br><span class="line">              cpu: 800m</span><br><span class="line">              memory: 1224Mi</span><br><span class="line">            requests:</span><br><span class="line">              cpu: 100m</span><br><span class="line">              memory: 512Mi</span><br><span class="line">      volumes:</span><br><span class="line">      - name: appname</span><br><span class="line">        hostPath:</span><br><span class="line">           path: /data</span><br><span class="line">           type: Directory</span><br></pre></td></tr></table></figure><h3 id="Prometheus"><a href="#Prometheus" class="headerlink" title="Prometheus"></a>Prometheus</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@k8s-master ~]# wget https://github.com/prometheus-operator/kube-prometheus/archive/v0.6.0.tar.gz</span><br><span class="line">[root@k8s-master ~]# tar zxvf kube-prometheus-0.6.0.tar.gz</span><br><span class="line">[root@k8s-master ~]# cd kube-prometheus-0.6.0</span><br><span class="line">[root@k8s-master ~]# kubectl create -f manifests/setup</span><br><span class="line">[root@k8s-master ~]# until kubectl get servicemonitors --all-namespaces ; do date; sleep 1; echo “”; done</span><br><span class="line">[root@k8s-master ~]# kubectl create -f manifests/</span><br><span class="line">[root@k8s-master ~]# kubectl get pod -n monitoring</span><br><span class="line">NAME                                   READY   STATUS    RESTARTS   AGE</span><br><span class="line">alertmanager-main-0                    2/2     Running   0          74m</span><br><span class="line">alertmanager-main-1                    2/2     Running   0          74m</span><br><span class="line">alertmanager-main-2                    2/2     Running   0          74m</span><br><span class="line">grafana-7c9bc466d8-r566p               1/1     Running   0          88m</span><br><span class="line">kube-state-metrics-66b65b78bc-mhgxq    3/3     Running   0          88m</span><br><span class="line">node-exporter-2764r                    2/2     Running   0          88m</span><br><span class="line">node-exporter-92pd7                    2/2     Running   0          88m</span><br><span class="line">node-exporter-mkj2p                    2/2     Running   0          88m</span><br><span class="line">node-exporter-mxrd9                    2/2     Running   0          88m</span><br><span class="line">prometheus-adapter-557648f58c-j4jcz    1/1     Running   0          88m</span><br><span class="line">prometheus-k8s-0                       3/3     Running   1          74m</span><br><span class="line">prometheus-k8s-1                       3/3     Running   0          74m</span><br><span class="line">prometheus-operator-5b7946f4d6-jqwbb   2/2     Running   0          88m</span><br><span class="line"></span><br><span class="line">#因端口问题,需手动修改prometheus alertmanager grafana的Nodeport,加入nodePort: 8001和type: NodePort即可</span><br><span class="line">示例</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  creationTimestamp: &apos;2020-12-05T09:37:14Z&apos;</span><br><span class="line">  labels:</span><br><span class="line">    app: grafana</span><br><span class="line">  managedFields:</span><br><span class="line">    - apiVersion: v1</span><br><span class="line">      fieldsType: FieldsV1</span><br><span class="line">      fieldsV1:</span><br><span class="line">        &apos;f:metadata&apos;: &#123;&#125;</span><br><span class="line">        &apos;f:spec&apos;:</span><br><span class="line">          &apos;f:ports&apos;: &#123;&#125;</span><br><span class="line">      manager: kubectl-create</span><br><span class="line">      operation: Update</span><br><span class="line">      time: &apos;2020-12-05T09:37:14Z&apos;</span><br><span class="line">  name: grafana</span><br><span class="line">  namespace: monitoring</span><br><span class="line">  resourceVersion: &apos;9637020&apos;</span><br><span class="line">  selfLink: /api/v1/namespaces/monitoring/services/grafana</span><br><span class="line">  uid: 6e6edd10-68b4-43b6-93ba-9b72e280d411</span><br><span class="line">spec:</span><br><span class="line">  clusterIP: 10.96.98.51</span><br><span class="line">  ports:</span><br><span class="line">    - name: http</span><br><span class="line">      port: 3000</span><br><span class="line">      protocol: TCP</span><br><span class="line">      targetPort: http</span><br><span class="line">  selector:</span><br><span class="line">    app: grafana</span><br><span class="line">  sessionAffinity: None</span><br><span class="line">  type: ClusterIP</span><br><span class="line">改为</span><br><span class="line">spec:</span><br><span class="line">  clusterIP: 10.96.98.51</span><br><span class="line">  ports:</span><br><span class="line">    - name: http</span><br><span class="line">      nodePort: 8001</span><br><span class="line">      port: 3000</span><br><span class="line">      protocol: TCP</span><br><span class="line">      targetPort: http</span><br><span class="line">  selector:</span><br><span class="line">    app: grafana</span><br><span class="line">  sessionAffinity: None</span><br><span class="line">  type: NodePort</span><br></pre></td></tr></table></figure><p>等待全部启动完毕即可<br><img src="\image\image-20201210154137980.png"></p><p>导入监控模板<br><img src="\image\image-20201210154216377.png"></p><p>完成<br><img src="\image\image-20201210154228617.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;部署流程如下图&lt;/p&gt;
&lt;img src=&quot;\image\1.png&quot;&gt;

&lt;h3 id=&quot;Kubernetes&quot;&gt;&lt;a href=&quot;#Kubernetes&quot; class=&quot;headerlink&quot; title=&quot;Kubernetes&quot;&gt;&lt;/a&gt;Kubernetes&lt;/h3&gt;</summary>
      
    
    
    
    
    <category term="k8s" scheme="https://nmk0718.github.io/tag/k8s/"/>
    
  </entry>
  
  <entry>
    <title>Process</title>
    <link href="https://nmk0718.github.io/2020/10/16/Process/"/>
    <id>https://nmk0718.github.io/2020/10/16/Process/</id>
    <published>2020-10-16T03:35:00.000Z</published>
    <updated>2024-11-29T06:44:07.100Z</updated>
    
    <content type="html"><![CDATA[<h3 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h3><h4 id="windows下杀掉指定应用"><a href="#windows下杀掉指定应用" class="headerlink" title="windows下杀掉指定应用"></a>windows下杀掉指定应用</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">taskkill /im nginx.exe /f</span><br><span class="line">#/im  立即  /f   强制结束进程</span><br><span class="line">#任务管理器&gt;详细信息&gt;内存&gt;查看应用的pid</span><br></pre></td></tr></table></figure><h4 id="windows下杀掉指定端口的进程"><a href="#windows下杀掉指定端口的进程" class="headerlink" title="windows下杀掉指定端口的进程"></a>windows下杀掉指定端口的进程</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for /f &quot;tokens=5&quot; %%i in (&apos;netstat -aon ^| findstr &quot;:9091&quot;&apos;) do (set j=%%i)</span><br><span class="line">taskkill /t /f /pid %j% </span><br><span class="line">#netstat -aon | findstr &quot;:port&quot; 查找端口对应的pid</span><br><span class="line">#taskkill /t /f /pid 杀掉pid对应的进程</span><br></pre></td></tr></table></figure><h4 id="如有遇到删除文件-提示正在被使用"><a href="#如有遇到删除文件-提示正在被使用" class="headerlink" title="如有遇到删除文件,提示正在被使用"></a>如有遇到删除文件,提示正在被使用</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">任务管理器&gt;性能&gt;打开资源监视器&gt;CPU&gt;关联的句柄</span><br><span class="line">搜索需要删除的文件夹名称或文件名称</span><br></pre></td></tr></table></figure><h4 id="如有遇到某进程占用内存过大-并不清楚应用情况下"><a href="#如有遇到某进程占用内存过大-并不清楚应用情况下" class="headerlink" title="如有遇到某进程占用内存过大,并不清楚应用情况下"></a>如有遇到某进程占用内存过大,并不清楚应用情况下</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">任务管理器&gt;详细信息&gt;内存&gt;查看应用的pid</span><br><span class="line">任务管理器&gt;&gt;性能&gt;打开资源监视器&gt;概述&gt;磁盘&gt;按pid排序</span><br><span class="line">即可看到pid对应的启动文件和目录</span><br></pre></td></tr></table></figure><h4 id="如有遇到使用windows远程-不可复制粘贴情况"><a href="#如有遇到使用windows远程-不可复制粘贴情况" class="headerlink" title="如有遇到使用windows远程,不可复制粘贴情况"></a>如有遇到使用windows远程,不可复制粘贴情况</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">任务管理器&gt;用户&gt;nmk&gt;RDP剪贴板监视程序</span><br><span class="line">结束掉RDP,使用windows+R运行rdpclip.exe即可</span><br></pre></td></tr></table></figure><h4 id="如有遇到windows黑屏或任务栏不见等情况"><a href="#如有遇到windows黑屏或任务栏不见等情况" class="headerlink" title="如有遇到windows黑屏或任务栏不见等情况"></a>如有遇到windows黑屏或任务栏不见等情况</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">任务管理器&gt;用户&gt;nmk&gt;windows资源管理器</span><br><span class="line">结束掉windows资源管理器,使用windows+R运行explorer.exe即可</span><br></pre></td></tr></table></figure><h3 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h3><h4 id="linux下查看ip"><a href="#linux下查看ip" class="headerlink" title="linux下查看ip"></a>linux下查看ip</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ifconfig|grep 192|awk &apos;&#123;print $2&#125;&apos;</span><br><span class="line">curl ifconfig.me</span><br></pre></td></tr></table></figure><h4 id="linux下杀掉指定端口进程"><a href="#linux下杀掉指定端口进程" class="headerlink" title="linux下杀掉指定端口进程"></a>linux下杀掉指定端口进程</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">port=48094</span><br><span class="line">#根据端口号查询对应的pid</span><br><span class="line">pid=$(netstat -nlp | grep :$port | awk &apos;&#123;print $7&#125;&apos; | awk -F&quot;/&quot; &apos;&#123; print $1 &#125;&apos;);</span><br><span class="line"></span><br><span class="line">#杀掉对应的进程，如果pid不存在，则不执行</span><br><span class="line">if [  -n  &quot;$pid&quot;  ];  then</span><br><span class="line">    kill  -9  $pid;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h4 id="linux查看应用进程"><a href="#linux查看应用进程" class="headerlink" title="linux查看应用进程"></a>linux查看应用进程</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ps -ef|grep java</span><br><span class="line">#grep为过滤 java为启动的应用</span><br><span class="line">#输出结果java后的数字为pid,如需结束,使用kill -9 pid</span><br><span class="line">netstat -lntp</span><br><span class="line">#查看当前应用使用的端口和pid</span><br></pre></td></tr></table></figure><h4 id="linux查看文件有多少行"><a href="#linux查看文件有多少行" class="headerlink" title="linux查看文件有多少行"></a>linux查看文件有多少行</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wc -l filename#输出filename的行数</span><br><span class="line">wc -c filename#输出filename的字节数</span><br><span class="line">wc -m filename#输出filename的字符数</span><br><span class="line">wc -w filename#输出filename的字数</span><br></pre></td></tr></table></figure><h4 id="linux查找文件"><a href="#linux查找文件" class="headerlink" title="linux查找文件"></a>linux查找文件</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在使用linux时，经常需要进行文件查找。其中查找的命令主要有find和grep。两个命令是有区别的。</span><br><span class="line">(1)find命令是根据文件的属性进行查找，如文件名，文件大小，所有者，所属组，是否为空，访问时间，修改时间等。 </span><br><span class="line">(2)grep是根据文件的内容进行查找，会对文件的每一行按照给定的模式(patter)进行匹配查找。</span><br><span class="line"></span><br><span class="line">　　一.find命令</span><br><span class="line"></span><br><span class="line">　　　　基本格式：find  path expression</span><br><span class="line"></span><br><span class="line">　　　　1.按照文件名查找</span><br><span class="line"></span><br><span class="line">　　　　(1)find / -name httpd.conf　　#在根目录下查找文件httpd.conf，表示在整个硬盘查找</span><br><span class="line">　　　　(2)find /etc -name httpd.conf　　#在/etc目录下文件httpd.conf</span><br><span class="line">　　　　(3)find /etc -name &apos;*srm*&apos;　　#使用通配符*(0或者任意多个)。表示在/etc目录下查找文件名中含有字符串‘srm’的文件</span><br><span class="line">　　　　(4)find . -name &apos;srm*&apos; 　　#表示当前目录下查找文件名开头是字符串‘srm’的文件</span><br><span class="line"></span><br><span class="line">　　　　2.按照文件特征查找 　　　　</span><br><span class="line"></span><br><span class="line">　　　　(1)find / -amin -10 　　# 查找在系统中最后10分钟访问的文件(access time)</span><br><span class="line">　　　　(2)find / -atime -2　　 # 查找在系统中最后48小时访问的文件</span><br><span class="line">　　　　(3)find / -empty 　　# 查找在系统中为空的文件或者文件夹</span><br><span class="line">　　　　(4)find / -group cat 　　# 查找在系统中属于 group为cat的文件</span><br><span class="line">　　　　(5)find / -mmin -5 　　# 查找在系统中最后5分钟里修改过的文件(modify time)</span><br><span class="line">　　　　(6)find / -mtime -1 　　#查找在系统中最后24小时里修改过的文件</span><br><span class="line">　　　　(7)find / -user fred 　　#查找在系统中属于fred这个用户的文件</span><br><span class="line">　　　　(8)find / -size +10000c　　#查找出大于10000000字节的文件(c:字节，w:双字，k:KB，M:MB，G:GB)</span><br><span class="line">　　　　(9)find / -size -1000k 　　#查找出小于1000KB的文件</span><br><span class="line"></span><br><span class="line">　　　　3.使用混合查找方式查找文件</span><br><span class="line"></span><br><span class="line">　　　　参数有： ！，-and(-a)，-or(-o)。</span><br><span class="line"></span><br><span class="line">　　　　(1)find /tmp -size +10000c -and -mtime +2 　　#在/tmp目录下查找大于10000字节并在最后2分钟内修改的文件</span><br><span class="line">   　　    (2)find / -user fred -or -user george 　　#在/目录下查找用户是fred或者george的文件文件</span><br><span class="line">   　　    (3)find /tmp ! -user panda　　#在/tmp目录中查找所有不属于panda用户的文件</span><br><span class="line">    　　  </span><br><span class="line"></span><br><span class="line">　　二、grep命令</span><br><span class="line"></span><br><span class="line">　　　  基本格式：find  expression</span><br><span class="line"></span><br><span class="line"> 　　　 1.主要参数</span><br><span class="line"></span><br><span class="line">　　　　[options]主要参数：</span><br><span class="line">　　　　－c：只输出匹配行的计数。</span><br><span class="line">　　　　－i：不区分大小写</span><br><span class="line">　　　　－h：查询多文件时不显示文件名。</span><br><span class="line">　　　　－l：查询多文件时只输出包含匹配字符的文件名。</span><br><span class="line">　　　　－n：显示匹配行及行号。</span><br><span class="line">　　　　－s：不显示不存在或无匹配文本的错误信息。</span><br><span class="line">　　　　－v：显示不包含匹配文本的所有行。</span><br><span class="line"></span><br><span class="line">　　　　pattern正则表达式主要参数：</span><br><span class="line">　　　　\： 忽略正则表达式中特殊字符的原有含义。</span><br><span class="line">　　　　^：匹配正则表达式的开始行。</span><br><span class="line">　　　　$: 匹配正则表达式的结束行。</span><br><span class="line">　　　　\&lt;：从匹配正则表达 式的行开始。</span><br><span class="line">　　　　\&gt;：到匹配正则表达式的行结束。</span><br><span class="line">　　　　[ ]：单个字符，如[A]即A符合要求 。</span><br><span class="line">　　　　[ - ]：范围，如[A-Z]，即A、B、C一直到Z都符合要求 。</span><br><span class="line">　　　　.：所有的单个字符。</span><br><span class="line"></span><br><span class="line">   * ：有字符，长度可以为0。</span><br><span class="line"></span><br><span class="line">　　　　2.实例　 </span><br><span class="line"></span><br><span class="line">　　(1)grep &apos;test&apos; d*　　#显示所有以d开头的文件中包含 test的行</span><br><span class="line">　　(2)grep ‘test’ aa bb cc 　　 #显示在aa，bb，cc文件中包含test的行</span><br><span class="line">　　(3)grep ‘[a-z]\&#123;5\&#125;’ aa 　　#显示所有包含每行字符串至少有5个连续小写字符的字符串的行</span><br><span class="line">　　(4)grep magic /usr/src　　#显示/usr/src目录下的文件(不含子目录)包含magic的行</span><br><span class="line">　　(5)grep -r magic /usr/src　　#显示/usr/src目录下的文件(包含子目录)包含magic的行</span><br><span class="line"></span><br><span class="line">　　(6)grep -w pattern files ：只匹配整个单词，而不是字符串的一部分(如匹配’magic’，而不是’magical’)，</span><br><span class="line"></span><br><span class="line">如果你想在当前目录下 查找&quot;hello,world!&quot;字符串,可以这样:</span><br><span class="line"></span><br><span class="line">grep -rn &quot;hello,world!&quot; *</span><br><span class="line"></span><br><span class="line">* : 表示当前目录所有文件，也可以是某个文件名</span><br><span class="line"></span><br><span class="line">-r 是递归查找（如果不加-r表示只查找当前目录，不会递归的查找子目录）</span><br><span class="line"></span><br><span class="line">-n 是显示行号</span><br><span class="line"></span><br><span class="line">-R 查找所有文件包含子目录</span><br><span class="line"></span><br><span class="line">-i 忽略大小写</span><br><span class="line"></span><br><span class="line">下面是一些有意思的命令行参数：</span><br><span class="line"></span><br><span class="line">grep -i pattern files ：不区分大小写地搜索。默认情况区分大小写， </span><br><span class="line"></span><br><span class="line">grep -l pattern files ：只列出匹配的文件名， </span><br><span class="line"></span><br><span class="line">grep -L pattern files ：列出不匹配的文件名， </span><br><span class="line"></span><br><span class="line">grep -w pattern files ：只匹配整个单词，而不是字符串的一部分（如匹配‘magic’，而不是‘magical’）， </span><br><span class="line"></span><br><span class="line">grep -C number pattern files ：匹配的上下文分别显示[number]行， </span><br><span class="line"></span><br><span class="line">grep pattern1 | pattern2 files ：显示匹配 pattern1 或 pattern2 的行， </span><br><span class="line"></span><br><span class="line">grep pattern1 files | grep pattern2 ：显示既匹配 pattern1 又匹配 pattern2 的行。</span><br></pre></td></tr></table></figure><h4 id="查看应用所占内存"><a href="#查看应用所占内存" class="headerlink" title="查看应用所占内存"></a>查看应用所占内存</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# ps -u postgres o pid,rss:8,cmd | awk &apos;NR&gt;1 &#123;A+=$2&#125; &#123;print&#125; END&#123;print &quot;Total RSS: &quot; A&#125;&apos;</span><br><span class="line">  PID      RSS CMD</span><br><span class="line"> 3314    47100 /usr/pgsql-12/bin/postmaster -D /home/pgsql12/data/</span><br><span class="line"> 3318      544 postgres: logger   </span><br><span class="line"> 3320    76952 postgres: checkpointer   </span><br><span class="line"> 3321    57716 postgres: background writer   </span><br><span class="line"> 3322    16980 postgres: walwriter   </span><br><span class="line"> 3323     1664 postgres: autovacuum launcher   </span><br><span class="line"> 3324     1248 postgres: stats collector   </span><br><span class="line"> 3325      920 postgres: logical replication launcher   </span><br><span class="line">34905    23572 postgres: dbuser qiyewechat 192.168.138.1(59622) idle</span><br><span class="line">39446     9936 postgres: dbuser qiyewechat 192.168.138.1(49408) idle</span><br><span class="line">39449    16132 postgres: dbuser qiyewechat 192.168.138.1(49412) idle</span><br><span class="line">42193    32336 postgres: dbuser ymall_test 192.168.138.1(52546) idle</span><br><span class="line">42194    15376 postgres: dbuser ymall_test 192.168.138.1(52547) idle</span><br><span class="line">42996     4492 postgres: dbuser ymall_test 192.168.138.1(54459) idle</span><br><span class="line">43002     8260 postgres: dbuser ymall 192.168.138.1(54498) idle</span><br><span class="line">43489     6604 postgres: dbuser ymall 192.168.138.1(55454) idle</span><br><span class="line">43490     6612 postgres: dbuser ymall 192.168.138.1(55461) idle</span><br><span class="line">43885     4496 postgres: dbuser ymall 192.168.138.1(56158) idle</span><br><span class="line">43886     4496 postgres: dbuser ymall 192.168.138.1(56160) idle</span><br><span class="line">43887    18624 postgres: dbuser ymall 192.168.138.1(56163) idle</span><br><span class="line">43888    25448 postgres: dbuser ymall 192.168.138.1(56165) idle</span><br><span class="line">43889    26704 postgres: dbuser ymall 192.168.138.1(56167) idle</span><br><span class="line">44302    10696 postgres: dbuser qiyewechat 192.168.138.1(57075) idle</span><br><span class="line">44369    14456 postgres: dbuser qiyewechat 192.168.138.1(57083) idle</span><br><span class="line">44370     6028 postgres: dbuser qiyewechat 192.168.138.1(57084) idle</span><br><span class="line">44478     4496 postgres: dbuser ymall_test 192.168.138.1(57323) idle</span><br><span class="line">45814     8460 postgres: dbuser qiyewechat 192.168.138.1(59407) idle</span><br><span class="line">45900    13064 postgres: dbuser qiyewechat 192.168.138.1(59474) idle</span><br><span class="line">45907     5776 postgres: dbuser qiyewechat 192.168.138.1(59514) idle</span><br><span class="line">45992     6344 postgres: dbuser ymall_test 192.168.138.1(59703) idle</span><br><span class="line">46565    17660 postgres: dbuser ymall 192.168.138.1(60717) idle</span><br><span class="line">46573    14536 postgres: dbuser ymall 192.168.138.1(60758) idle</span><br><span class="line">46574     6048 postgres: dbuser ymall 192.168.138.1(60759) idle</span><br><span class="line">47215     4504 postgres: dbuser ymall_test 192.168.138.1(61764) idle</span><br><span class="line">47879     9428 postgres: dbuser ymall_test 192.168.138.1(63113) idle</span><br><span class="line">47880    15380 postgres: dbuser ymall_test 192.168.138.1(63114) idle</span><br><span class="line">48631     4496 postgres: dbuser ymall_test 192.168.138.1(64278) idle</span><br><span class="line">49247     6076 postgres: dbuser postgres 192.168.138.1(65312) idle</span><br><span class="line">49890    18168 postgres: dbuser ymall 192.168.138.1(50169) idle</span><br><span class="line">49893    14576 postgres: dbuser ymall 192.168.138.1(50175) idle</span><br><span class="line">49894     5816 postgres: dbuser ymall 192.168.138.1(50176) idle</span><br><span class="line">50162     4492 postgres: dbuser ymall_test 192.168.138.1(50486) idle</span><br><span class="line">50710    10560 postgres: dbuser ymall 192.168.138.1(51809) idle</span><br><span class="line">50711    14512 postgres: dbuser ymall 192.168.138.1(51810) idle</span><br><span class="line">50717    14816 postgres: dbuser ymall 192.168.138.1(51826) idle</span><br><span class="line">50718     7660 postgres: dbuser ymall 192.168.138.1(51827) idle</span><br><span class="line">50719     5824 postgres: dbuser postgres 192.168.138.1(51828) idle</span><br><span class="line">50723     6064 postgres: dbuser ymall 192.168.138.1(51833) idle</span><br><span class="line">51657     4500 postgres: dbuser ymall_test 192.168.138.1(53646) idle</span><br><span class="line">53083     4504 postgres: dbuser ymall_test 192.168.138.1(56425) idle</span><br><span class="line">53091     8468 postgres: dbuser ymall 192.168.138.1(56449) idle</span><br><span class="line">53092    14500 postgres: dbuser ymall 192.168.138.1(56450) idle</span><br><span class="line">53093     6048 postgres: dbuser ymall 192.168.138.1(56451) idle</span><br><span class="line">62156     4228 postgres: dbuser ymall 192.168.138.1(57632) idle</span><br><span class="line">Total RSS: 698396</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@prod-ghospital ~]#  ps -u mysql o pid,rss:8,cmd | awk &apos;NR&gt;1 &#123;A+=$2&#125; &#123;print&#125; END&#123;print &quot;Total RSS: &quot; A&#125;&apos;</span><br><span class="line">  PID      RSS CMD</span><br><span class="line"> 3057  1496720 /usr/sbin/mysqld --daemonize --pid-file=/var/run/mysqld/mysqld.pid</span><br><span class="line">Total RSS: 1496720</span><br></pre></td></tr></table></figure><h4 id="检测页面的状态码查看项目存活"><a href="#检测页面的状态码查看项目存活" class="headerlink" title="检测页面的状态码查看项目存活"></a>检测页面的状态码查看项目存活</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@lepeng ~]# cat url.txt </span><br><span class="line">http://localhost:9980/front/test/aaaa2</span><br><span class="line"></span><br><span class="line">[root@lepeng ~]# cat checkurl.sh </span><br><span class="line">fileurl=&apos;/root/url.txt&apos;</span><br><span class="line">for chkurl in $(cat $&#123;fileurl&#125;)  # $&#123;&#125;忽略空格</span><br><span class="line">do</span><br><span class="line">    # -o 输出内容到/dev/null; -s 静默方式 ；-w 定义显示输出格式；&quot;%&#123;http_code&#125;&quot; 在最后被检索的 HTTP(S) 页中被找到的数字的代码</span><br><span class="line">    HTTP_CODE=`curl -o /dev/null -s --head -w &quot;%&#123;http_code&#125;&quot; &quot;$&#123;chkurl&#125;&quot;`</span><br><span class="line">    if [ $&#123;HTTP_CODE&#125; -ne 200 ]</span><br><span class="line">    then</span><br><span class="line">        port=9980</span><br><span class="line">        echo `date &quot;+%Y-%m-%d %H:%M:%S&quot;` 项目正在重启.....  &gt;&gt;check-result.txt</span><br><span class="line">        #根据端口号查询对应的pid</span><br><span class="line">        pid=$(netstat -nlp | grep :$port | awk &apos;&#123;print $7&#125;&apos; | awk -F&quot;/&quot; &apos;&#123; print $1 &#125;&apos;);</span><br><span class="line"></span><br><span class="line">        #杀掉对应的进程，如果pid不存在，则不执行</span><br><span class="line">        if [  -n  &quot;$pid&quot;  ];  then</span><br><span class="line">                kill  -9  $pid;</span><br><span class="line">        fi</span><br><span class="line">        cd /home/tomcat/lepeng_tomcat/tomcat-8.0.46-9980/bin/</span><br><span class="line">        ./startup.sh</span><br><span class="line">    else</span><br><span class="line">        echo -e  `date &quot;+%Y-%m-%d %H:%M:%S&quot;` 当前状态码为$&#123;HTTP_CODE&#125;: $chkurl  &gt;&gt;check-result.txt</span><br><span class="line">    fi</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>加入定时任务</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*/5 * * * * sh /root/checkurl.sh</span><br><span class="line">#每5分钟执行一次检测脚本</span><br><span class="line">#例如项目要3分钟,定时任务要大于3分钟,否则会一直重启</span><br></pre></td></tr></table></figure><h4 id="服务一直kill不掉"><a href="#服务一直kill不掉" class="headerlink" title="服务一直kill不掉"></a>服务一直kill不掉</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@prodl bin]# ps -ef|grep runsv</span><br><span class="line">root      7808     1  0 21:11 ?        00:00:00 runsvdir -P /opt/gitlab/service log: vlogd: warning: unable to lock directory: /var/log/gitlab/grafana: temporary failure svlogd: fatal: no functional log directories. svlogd: warning: unable to lock directory: /var/log/gitlab/grafana: temporary failure svlogd: fatal: no functional log directories. svlogd: warning: unable to lock directory: /var/log/gitlab/grafana: temporary failure svlogd: fatal: no functional log directories. </span><br><span class="line">root      7811  7808  0 21:11 ?        00:00:00 runsv gitaly</span><br><span class="line">root      7812  7808  0 21:11 ?        00:00:00 runsv alertmanager</span><br><span class="line">root      7813  7808  0 21:11 ?        00:00:00 runsv sidekiq</span><br><span class="line">root      7814  7808  0 21:11 ?        00:00:00 runsv postgresql</span><br><span class="line">root      7815  7808  0 21:11 ?        00:00:00 runsv unicorn</span><br><span class="line">root      7816  7808  0 21:11 ?        00:00:00 runsv prometheus</span><br><span class="line">root      7818  7808  0 21:11 ?        00:00:00 runsv postgres-exporter</span><br><span class="line">root      7819  7808  0 21:11 ?        00:00:00 runsv logrotate</span><br><span class="line">root      7820  7808  0 21:11 ?        00:00:00 runsv node-exporter</span><br><span class="line">root      7821  7808  0 21:11 ?        00:00:00 runsv gitlab-exporter</span><br><span class="line">root      7822  7808  0 21:11 ?        00:00:00 runsv gitlab-workhorse</span><br><span class="line">root      8329  7808  0 21:23 ?        00:00:00 runsv grafana</span><br></pre></td></tr></table></figure><p>runsvdir -P /opt/gitlab/service log为主进程</p><p>这是一个runit service，kill -9 无法杀死。【runsvdir 进程杀死后又重新创建（杀不死）】</p><p>后来查看了官方文档中的说明后， 使用如下命令：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@prod-ghospital bin]# systemctl stop gitlab-runsvdir</span><br><span class="line">[root@prod-ghospital bin]# ps -ef|grep runsv</span><br><span class="line">root     12453  6424  0 21:36 pts/0    00:00:00 grep --color=auto runsv</span><br><span class="line">[root@prod-ghospital bin]# netstat -lntp</span><br><span class="line">Active Internet connections (only servers)</span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    </span><br><span class="line">tcp        0      0 127.0.0.1:25            0.0.0.0:*               LISTEN      4904/sendmail: acce </span><br><span class="line">tcp        0      0 0.0.0.0:443             0.0.0.0:*               LISTEN      2081/nginx: master  </span><br><span class="line">tcp        0      0 127.0.0.1:20037         0.0.0.0:*               LISTEN      2534/java           </span><br><span class="line">tcp        0      0 0.0.0.0:6379            0.0.0.0:*               LISTEN      1350/redis-server * </span><br><span class="line">tcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN      2081/nginx: master  </span><br><span class="line">tcp        0      0 0.0.0.0:8081            0.0.0.0:*               LISTEN      2534/java           </span><br><span class="line">tcp        0      0 0.0.0.0:81              0.0.0.0:*               LISTEN      2081/nginx: master  </span><br><span class="line">tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      2978/sshd           </span><br><span class="line">tcp6       0      0 127.0.0.1:9600          :::*                    LISTEN      18615/java          </span><br><span class="line">tcp6       0      0 :::9000                 :::*                    LISTEN      19159/java          </span><br><span class="line">tcp6       0      0 :::3306                 :::*                    LISTEN      2970/mysqld         </span><br><span class="line">tcp6       0      0 :::6379                 :::*                    LISTEN      1350/redis-server * </span><br><span class="line">tcp6       0      0 :::9200                 :::*                    LISTEN      20071/java          </span><br><span class="line">tcp6       0      0 :::80                   :::*                    LISTEN      2081/nginx: master  </span><br><span class="line">tcp6       0      0 :::9300                 :::*                    LISTEN      19159/java          </span><br><span class="line">tcp6       0      0 :::9302                 :::*                    LISTEN      20071/java</span><br></pre></td></tr></table></figure><p>系统负载大于等于4并且cpu&gt;200% 重启程序</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">#获取5分钟系统负载</span><br><span class="line">sys_load=`/bin/cat /proc/loadavg | awk &apos;&#123;print $2&#125;&apos;`</span><br><span class="line">#获取pot进程pid</span><br><span class="line">pot=$(netstat -nlp | grep 10010 | awk &apos;&#123;print $7&#125;&apos; | awk -F&quot;/&quot; &apos;&#123; print $1 &#125;&apos;);</span><br><span class="line">#获取shop进程pid</span><br><span class="line">shop=$(netstat -nlp | grep 9980 | awk &apos;&#123;print $7&#125;&apos; | awk -F&quot;/&quot; &apos;&#123; print $1 &#125;&apos;);</span><br><span class="line"></span><br><span class="line">#如果系统负载大于等于4并且cpu&gt;200%杀掉该进程</span><br><span class="line">if [ &quot;$sys_load&quot; &gt; &quot;4&quot; ] || [ &quot;$sys_load&quot; = &quot;4&quot; ]; then</span><br><span class="line"></span><br><span class="line">ps axf -o &quot;pid %cpu&quot; | awk &apos;&#123;if($2&gt;=200.0) print $1&#125;&apos; | while read procid</span><br><span class="line">do</span><br><span class="line">kill -9 $procid</span><br><span class="line">echo 系统负载+$sys_load &gt;&gt; /home/output.txt</span><br><span class="line">echo cpu高的进程+ $procid &gt;&gt; /home/output.txt</span><br><span class="line">echo `date`+&quot;杀掉cpu高的进程&quot; &gt;&gt; /home/output.txt</span><br><span class="line"></span><br><span class="line">#如果pot进程不在 重启pot</span><br><span class="line">if [ &quot;$pot&quot; = &quot;&quot;  ];  then</span><br><span class="line">echo pot进程+$pot &gt;&gt; /home/output.txt</span><br><span class="line">cd /home/tomcat/lepeng_tomcat/tomcat-8.0.46-10010/bin/</span><br><span class="line">./startup.sh</span><br><span class="line">echo `date`+&quot;pot重启&quot; &gt;&gt; /home/output.txt</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">#如果shop进程不在 重启shop</span><br><span class="line">if [ &quot;$shop&quot; = &quot;&quot;  ];  then</span><br><span class="line">echo shop进程+$shop &gt;&gt; /home/output.txt</span><br><span class="line">cd /home/tomcat/lepeng_tomcat/tomcat-8.0.46-9980/bin/</span><br><span class="line">./startup.sh</span><br><span class="line">echo `date`+&quot;shop重启&quot; &gt;&gt; /home/output.txt</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h4 id="ssh登陆即进行告警通知"><a href="#ssh登陆即进行告警通知" class="headerlink" title="ssh登陆即进行告警通知"></a>ssh登陆即进行告警通知</h4><p>编写相关脚本内容如下:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">#msg=&apos;监控服务器登录用户:\n主机名: &apos;`hostname`&apos;\n监控主机IP: &apos;`ifconfig eth0|awk -F &apos;[ :]+&apos; &apos;NR==2 &#123;print $3&#125;&apos;`&apos;\n监控登录用户: &apos;`whoami`&apos;\n监控登录IP: &apos;`who am i |awk -F &apos;[()]&apos; &apos;&#123;print $2&#125;&apos;`&apos;\n监控登录时间: &apos;`date &apos;+%Y-%m-%d-%H:%M:%S&apos;`&apos;&apos;</span><br><span class="line">#获取相关登陆信息</span><br><span class="line">name=`hostname`</span><br><span class="line">ip=`ifconfig eth0|awk -F &apos;[ :]+&apos; &apos;NR==2 &#123;print $3&#125;&apos;`</span><br><span class="line">user=`whoami`</span><br><span class="line">_ip=`who am i |awk -F &apos;[()]&apos; &apos;&#123;print $2&#125;&apos;`</span><br><span class="line">_time=`date &apos;+%Y-%m-%d-%H:%M:%S&apos;`</span><br><span class="line">#查询登陆地址并返回相应信息</span><br><span class="line">addr=`curl -q -s http://freeapi.ipip.net/$_ip | awk -F &apos;&quot;&apos; &apos;&#123;print $2&quot;-&quot;$4&quot;-&quot;$6&#125;&apos;`</span><br><span class="line">#自定义接入钉钉函数</span><br><span class="line">function SendMessageToDingding()&#123;</span><br><span class="line">    #钉钉地址</span><br><span class="line">        url=&quot;https://oapi.dingtalk.com/robot/send?access_token=11030e780f87aee0e5849dc488072940405c03aefa66341cde7e3a3d09916583&quot;</span><br><span class="line">    #推送到钉钉</span><br><span class="line">        res=`curl -XPOST -s -L -H &quot;Content-Type:application/json&quot; -H &quot;charset:utf-8&quot; $url -d &quot;</span><br><span class="line">        &#123;</span><br><span class="line">        \&quot;msgtype\&quot;: \&quot;text\&quot;, </span><br><span class="line">        \&quot;text\&quot;: &#123;</span><br><span class="line">                 \&quot;content\&quot;: \&quot;监控主机名：$1\n主机IP: $2\n 登陆用户：$3\n 登陆IP: $4\nIP归属：$5\n登陆时间：$6\&quot;</span><br><span class="line">                 &#125;</span><br><span class="line">    &#125;&quot;`</span><br><span class="line">        echo $res</span><br><span class="line">&#125;</span><br><span class="line">#subject=`echo -e $msg`</span><br><span class="line">body=&quot;ECS监控ssh登陆&quot;</span><br><span class="line">#SendMessageToDingding $subject $body</span><br><span class="line">#调用函数</span><br><span class="line">SendMessageToDingding $name $ip $user $_ip $addr $_time $body</span><br></pre></td></tr></table></figure><p>将脚本文件放置在 /etc/profile.d/ 文件目录下，即可实现登陆时，发送相关告警至钉钉</p><p>效果如下：<br><img src="\image\image-20210325100413140.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;windows&quot;&gt;&lt;a href=&quot;#windows&quot; class=&quot;headerlink&quot; title=&quot;windows&quot;&gt;&lt;/a&gt;windows&lt;/h3&gt;&lt;h4 id=&quot;windows下杀掉指定应用&quot;&gt;&lt;a href=&quot;#windows下杀掉指定应用&quot; cla</summary>
      
    
    
    
    
    <category term="Process" scheme="https://nmk0718.github.io/tag/Process/"/>
    
  </entry>
  
  <entry>
    <title>Loki</title>
    <link href="https://nmk0718.github.io/2020/10/16/Loki/"/>
    <id>https://nmk0718.github.io/2020/10/16/Loki/</id>
    <published>2020-10-16T03:18:00.000Z</published>
    <updated>2024-11-29T06:44:20.734Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Grafana日志聚合工具Loki搭建使用"><a href="#Grafana日志聚合工具Loki搭建使用" class="headerlink" title="Grafana日志聚合工具Loki搭建使用"></a>Grafana日志聚合工具Loki搭建使用</h3><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><p>与其他日志聚合系统相比， Loki具有下面的一些特性：</p><ul><li>不对日志进行全文索引。通过存储压缩非结构化日志和仅索引元数据，Loki 操作起来会更简单，更省成本。</li><li>通过使用与 Prometheus 相同的标签记录流对日志进行索引和分组，这使得日志的扩展和操作效率更高。</li><li>特别适合储存 Kubernetes Pod 日志; 诸如 Pod 标签之类的元数据会被自动删除和编入索引。</li><li>受 Grafana 原生支持。</li></ul><h4 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h4><ul><li>loki是主服务器，负责存储日志和处理查询。</li><li>promtail是代理，负责收集日志并将其发送给 loki。</li><li>Grafana 用于 UI 展示。</li></ul><h4 id="Loki"><a href="#Loki" class="headerlink" title="Loki"></a>Loki</h4><h5 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://github.com/grafana/loki/releases/download/v1.6.0/loki-linux-amd64.zip</span><br><span class="line">mkdir /usr/local/loki</span><br><span class="line">unzip loki-linux-amd64.zip</span><br><span class="line">mv loki-linux-amd64 loki</span><br><span class="line">mv loki /usr/local/loki</span><br></pre></td></tr></table></figure><h5 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd /usr/local/loki</span><br><span class="line">vi loki-local-config.yaml</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">auth_enabled: false</span><br><span class="line"></span><br><span class="line">server:</span><br><span class="line">  http_listen_port: 3100</span><br><span class="line"></span><br><span class="line">ingester:</span><br><span class="line">  lifecycler:</span><br><span class="line">    address: 127.0.0.1</span><br><span class="line">    ring:</span><br><span class="line">      kvstore:</span><br><span class="line">        store: inmemory</span><br><span class="line">      replication_factor: 1</span><br><span class="line">    final_sleep: 0s</span><br><span class="line">  chunk_idle_period: 5m</span><br><span class="line">  chunk_retain_period: 30s</span><br><span class="line">  max_transfer_retries: 1</span><br><span class="line"></span><br><span class="line">schema_config:</span><br><span class="line">  configs:</span><br><span class="line">  - from: 2018-04-15</span><br><span class="line">    store: boltdb</span><br><span class="line">    object_store: filesystem</span><br><span class="line">    schema: v9</span><br><span class="line">    index:</span><br><span class="line">      prefix: index_</span><br><span class="line">      period: 168h</span><br><span class="line"></span><br><span class="line">storage_config:</span><br><span class="line">  boltdb:</span><br><span class="line">    directory: /tmp/loki/index</span><br><span class="line"></span><br><span class="line">  filesystem:</span><br><span class="line">    directory: /tmp/loki/chunks</span><br><span class="line"></span><br><span class="line">limits_config:</span><br><span class="line">  enforce_metric_name: false</span><br><span class="line">  reject_old_samples: true</span><br><span class="line">  reject_old_samples_max_age: 168h</span><br><span class="line"></span><br><span class="line">chunk_store_config:</span><br><span class="line">  max_look_back_period: 0</span><br><span class="line"></span><br><span class="line">table_manager:</span><br><span class="line">  chunk_tables_provisioning:</span><br><span class="line">    inactive_read_throughput: 0</span><br><span class="line">    inactive_write_throughput: 0</span><br><span class="line">    provisioned_read_throughput: 0</span><br><span class="line">    provisioned_write_throughput: 0</span><br><span class="line">  index_tables_provisioning:</span><br><span class="line">    inactive_read_throughput: 0</span><br><span class="line">    inactive_write_throughput: 0</span><br><span class="line">    provisioned_read_throughput: 0</span><br><span class="line">    provisioned_write_throughput: 0</span><br><span class="line">  retention_deletes_enabled: false</span><br><span class="line">  retention_period: 0</span><br></pre></td></tr></table></figure><h5 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd /usr/local/loki</span><br><span class="line">./loki -config.file=loki-local-config.yaml</span><br></pre></td></tr></table></figure><h5 id="配置系统服务"><a href="#配置系统服务" class="headerlink" title="配置系统服务"></a>配置系统服务</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi /etc/systemd/system/loki.service</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[Unit]</span><br><span class="line">Description=loki</span><br><span class="line">Wants=network-online.target</span><br><span class="line">After=network-online.target</span><br><span class="line">[Service]</span><br><span class="line">Restart=on-failure</span><br><span class="line">ExecStart=/usr/local/loki/loki --config.file=/usr/local/loki/loki-local-config.yaml</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>配置好均需要执行以下命令</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure><ul><li>相关启动，停止命令</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl start loki.service</span><br><span class="line">systemctl status loki.service</span><br><span class="line">systemctl stop loki.service</span><br><span class="line">systemctl restart loki.service</span><br></pre></td></tr></table></figure><h4 id="Promtail"><a href="#Promtail" class="headerlink" title="Promtail"></a>Promtail</h4><h5 id="下载-1"><a href="#下载-1" class="headerlink" title="下载"></a>下载</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget https://github.com/grafana/loki/releases/download/v1.6.0/promtail-linux-amd64.zip</span><br><span class="line">unzip promtail-linux-amd64.zip</span><br><span class="line">mkdir /usr/local/promtail</span><br><span class="line">mv promtail-linux-amd64 promtail</span><br><span class="line">mv promtail /usr/local/promtail</span><br></pre></td></tr></table></figure><h5 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd /usr/local/promtail</span><br><span class="line">vi promtail-local-config.yaml</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server:</span><br><span class="line">  http_listen_port: 9080</span><br><span class="line">  grpc_listen_port: 0</span><br><span class="line"></span><br><span class="line">positions:</span><br><span class="line">  filename: /tmp/positions.yaml</span><br><span class="line"></span><br><span class="line">clients:</span><br><span class="line">  - url: http://localhost:3100/loki/api/v1/push</span><br><span class="line"></span><br><span class="line">scrape_configs:</span><br><span class="line">- job_name: system</span><br><span class="line">  static_configs:</span><br><span class="line">  - targets:</span><br><span class="line">      - localhost</span><br><span class="line">    labels:</span><br><span class="line">      job: varlogs</span><br><span class="line">      __path__: /var/log/*</span><br></pre></td></tr></table></figure><h5 id="启动-1"><a href="#启动-1" class="headerlink" title="启动"></a>启动</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd /usr/local/promtail</span><br><span class="line">./promtail -config.file=promtail-local-config.yaml</span><br></pre></td></tr></table></figure><h5 id="配置系统服务-1"><a href="#配置系统服务-1" class="headerlink" title="配置系统服务"></a>配置系统服务</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi /etc/systemd/system/promtail.service</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[Unit]</span><br><span class="line">Description=promtail</span><br><span class="line">Wants=network-online.target</span><br><span class="line">After=network-online.target</span><br><span class="line">[Service]</span><br><span class="line">Restart=on-failure</span><br><span class="line">ExecStart=/usr/local/promtail/promtail --config.file=/usr/local/promtail/promtail-local-config.yaml</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>配置好执行以下命令</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure><ul><li>相关启动，停止命令</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl start  promtail.service</span><br><span class="line">systemctl status  promtail.service</span><br><span class="line">systemctl restart  promtail.service</span><br><span class="line">systemctl stop  promtail.service</span><br></pre></td></tr></table></figure><h5 id="Promtail页面"><a href="#Promtail页面" class="headerlink" title="Promtail页面"></a>Promtail页面</h5><img src="\image\image-20201013173438546.png"><h4 id="Grafana"><a href="#Grafana" class="headerlink" title="Grafana"></a>Grafana</h4><h5 id="下载-2"><a href="#下载-2" class="headerlink" title="下载"></a>下载</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget https://dl.grafana.com/oss/release/grafana-7.2.0-1.x86_64.rpm</span><br><span class="line">sudo yum install grafana-7.2.0-1.x86_64.rpm</span><br></pre></td></tr></table></figure><h5 id="启动-2"><a href="#启动-2" class="headerlink" title="启动"></a>启动</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd /usr/share/grafana &amp;&amp; grafana-server web</span><br></pre></td></tr></table></figure><p>访问 <a href="http://localhost:3000" target="_blank" rel="noopener">http://localhost:3000</a> </p><h5 id="配置-2"><a href="#配置-2" class="headerlink" title="配置"></a>配置</h5><p>执行成功进入到grafana登录页面。</p><p>默认账号密码都是admin</p><p>首次进入会提示修改密码。看清楚输入框。</p><img src="\image\image-20201013173155583.png"><p> 创建一个data sources</p><img src="\image\image-20201013173306785.png"><p>这里填写的是loki的链接，这个链接可以访问，正常是返回数据，但有时候也可能返回404。目前没发现影响使用的地方</p><img src="\image\image-20201013173222709.png"><p> 保存成功的提示是两个绿色的弹窗success </p><img src="\image\image-20201013173818989.png"><p>然后直接去查看explore</p><img src="\image\image-20201013174000884.png"><h5 id="LogQL-语法"><a href="#LogQL-语法" class="headerlink" title="LogQL 语法"></a>LogQL 语法</h5><h5 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h5><p>对于查询表达式的标签部分，将放在{}中，多个标签表达式用逗号分隔：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;app=&quot;mysql&quot;,name=&quot;mysql-backup&quot;&#125;</span><br></pre></td></tr></table></figure><p>支持的符号有：</p><ul><li>= 完全相同。</li><li>!= 不平等。</li><li>=~ 正则表达式匹配。</li><li>!~ 不要正则表达式匹配。</li></ul><h5 id="过滤表达式"><a href="#过滤表达式" class="headerlink" title="过滤表达式"></a>过滤表达式</h5><p>编写日志流选择器后，您可以通过编写搜索表达式进一步过滤结果。搜索表达式可以文本或正则表达式。 如：</p><ul><li>{job=“mysql”} |= “error”</li><li>{name=“kafka”} |~ “tsdb-ops.*io:2003”</li><li>{instance=~“kafka-[23]”,name=“kafka”} != kafka.server:type=ReplicaManager 支持多个过滤</li><li>{job=“mysql”} |= “error” != “timeout” 目前支持的操作符：</li><li>|= line包含字符串。</li><li>!= line不包含字符串。</li><li>|~ line匹配正则表达式。</li><li>!~ line与正则表达式不匹配。</li></ul><p>Loki语法  查询是ERROR的日志 |=”ERROR” 查询不是ERROR的日志 !=”ERROR”<br>查询含有4187的日志 又不是INFO级别的日志<br>{filename=”/home/app/logs/nHospitalService/app.2020-10-27.0.log”}!=”INFO” |=”4187”</p><h5 id="查看更多"><a href="#查看更多" class="headerlink" title="查看更多"></a>查看更多</h5><p>在查询出来的结果行后面有一个show context （查看上下文）,点击这个按钮，默认展示结果行前10行和后10行。</p><img src="\image\8RI0zT.png"><h4 id="实际应用"><a href="#实际应用" class="headerlink" title="实际应用"></a>实际应用</h4><h5 id="promtail打如基础镜像"><a href="#promtail打如基础镜像" class="headerlink" title="promtail打如基础镜像"></a>promtail打如基础镜像</h5><p>拉取基础镜像</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker pull 192.168.229.8:8551/centos:latest</span><br></pre></td></tr></table></figure><p>启动基础镜像</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run -d 92926cb8d09b tail -f /dev/null</span><br></pre></td></tr></table></figure><p>复制文件到基础镜像</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker exec d8dcd4162411  mkdir /usr/local/promtail</span><br><span class="line">docker cp promtail d8dcd4162411:/usr/local/promtail</span><br><span class="line">docker cp promtail-local-config.yaml d8dcd4162411:/usr/local/promtail</span><br></pre></td></tr></table></figure><p>给镜像打标记</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker commit d8dcd4162411 192.168.229.8:8551/centos:latest</span><br></pre></td></tr></table></figure><p>推送镜像到镜像仓库</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker push 192.168.229.8:8551/centos:latest</span><br></pre></td></tr></table></figure><h5 id="更改启动文件"><a href="#更改启动文件" class="headerlink" title="更改启动文件"></a>更改启动文件</h5><p>配置promtail开机启动,并建立本机ip的目录做日志区分</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">cd /usr/local/promtail/</span><br><span class="line">nohup ./promtail -config.file=promtail-local-config.yaml &gt;&gt; /usr/local/promtail.log 2&gt;&amp;1 &amp;</span><br><span class="line">JARFILE=/home/App.jar</span><br><span class="line">ip=`hostname -I`</span><br><span class="line">mkdir -p /var/log/$ip</span><br><span class="line">cd /var/log/$ip</span><br><span class="line"></span><br><span class="line">java -jar -Xms512M -Xmx1024M -Djava.security.egd=file:/dev/./urandom $JARFILE &gt;&gt; app.log &amp;</span><br><span class="line"></span><br><span class="line">tail  -50f app.log</span><br></pre></td></tr></table></figure><h5 id="查看Grafana中是否区分"><a href="#查看Grafana中是否区分" class="headerlink" title="查看Grafana中是否区分"></a>查看Grafana中是否区分</h5><img src="\image\image-20201016111119852.png"><p>注:Grafana中不论区间大小,单次查询条数最大为5000,建议通过精确时间查询</p><h4 id="采集性能"><a href="#采集性能" class="headerlink" title="采集性能"></a>采集性能</h4><p>promtail在容器中,一秒钟采集1w行数据时,cpu为4-10%之间,内存无明显变化</p><p>loki收到promtail采集的数据时间内,cpu为3%左右,内存无明显变化</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Grafana日志聚合工具Loki搭建使用&quot;&gt;&lt;a href=&quot;#Grafana日志聚合工具Loki搭建使用&quot; class=&quot;headerlink&quot; title=&quot;Grafana日志聚合工具Loki搭建使用&quot;&gt;&lt;/a&gt;Grafana日志聚合工具Loki搭建使用&lt;/</summary>
      
    
    
    
    
    <category term="log" scheme="https://nmk0718.github.io/tag/log/"/>
    
  </entry>
  
  <entry>
    <title>Gogs</title>
    <link href="https://nmk0718.github.io/2020/10/13/gogs/"/>
    <id>https://nmk0718.github.io/2020/10/13/gogs/</id>
    <published>2020-10-13T07:30:00.000Z</published>
    <updated>2024-11-29T06:44:30.319Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Gogs安装"><a href="#Gogs安装" class="headerlink" title="Gogs安装"></a>Gogs安装</h4><h5 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install -y docker</span><br></pre></td></tr></table></figure><h5 id="拉取gogs镜像"><a href="#拉取gogs镜像" class="headerlink" title="拉取gogs镜像"></a>拉取gogs镜像</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker pull gogs/gogs:0.11.29</span><br></pre></td></tr></table></figure><h5 id="docker-运行容器"><a href="#docker-运行容器" class="headerlink" title="docker 运行容器"></a>docker 运行容器</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run -d --name=gogs -p 8030:3000 -p 8022:22 -v /docker/gogs:/data gogs:0.11.29</span><br><span class="line">#8030和8022为外部访问端口,3000和22对应容器内部端口</span><br></pre></td></tr></table></figure><h5 id="查看是否运行成功"><a href="#查看是否运行成功" class="headerlink" title="查看是否运行成功"></a>查看是否运行成功</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@public-service ~]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE                         COMMAND                  CREATED             STATUS              PORTS                                          NAMES</span><br><span class="line">2317dd952a84        docker.io/gogs/gogs:0.11.29   &quot;/app/gogs/docker/...&quot;   4 hours ago         Up 53 minutes       0.0.0.0:8022-&gt;22/tcp, 0.0.0.0:8030-&gt;3000/tcp   gogs</span><br></pre></td></tr></table></figure><p>安装完成后,访问<a href="http://192.168.1.1:8030" target="_blank" rel="noopener">http://192.168.1.1:8030</a></p><p>数据库设置，这里我们直接使用内置的 数据库即可,使用其他的需要自行搭建数据库；</p><img src="\image\922993672-889e9757631ec0c2_articlex.png"><p>应用基本设置，主要修改域名、SSH端口号和应用URL即可。</p><img src="\image\3165017497-1e7f737f53650d12_articlex.png">#### Gogs使用<p>外网访问路径为:<a href="http://192.168.1.1:8030/" target="_blank" rel="noopener">http://192.168.1.1:8030/</a></p><h5 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h5><p>使用各自的名称全拼登录,例如(倪明坤,用户名为nimingkun,密码为nimingkun)</p><img src="\image\image-20201013143334338.png"><p>登录之后点击头像右侧的按钮,进入用户设置,修改密码</p><img src="\image\image-20201013143605181.png"><h5 id="查看账户对应的仓库"><a href="#查看账户对应的仓库" class="headerlink" title="查看账户对应的仓库"></a>查看账户对应的仓库</h5><img src="\image\image-20201013144342105.png"><h5 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h5><img src="\image\image-20201013145515110.png"><h5 id="用户授权"><a href="#用户授权" class="headerlink" title="用户授权"></a>用户授权</h5><img src="\image\image-20201013145545961.png"><h5 id="创建组织"><a href="#创建组织" class="headerlink" title="创建组织"></a>创建组织</h5><p>注意:需要把仓库建立再组织下</p><img src="\image\image-20201013145623214.png"><h5 id="查看账户对应的组织"><a href="#查看账户对应的组织" class="headerlink" title="查看账户对应的组织"></a>查看账户对应的组织</h5><img src="\image\image-20201013144427973.png"><h5 id="创建新的仓库"><a href="#创建新的仓库" class="headerlink" title="创建新的仓库"></a>创建新的仓库</h5><p>注意拥有者应设置为<strong>组织名</strong>,禁止设置为自己的用户</p><img src="\image\image-20201013143251028.png"><p>创建后可根据命令进行拉取或工具拉取</p><img src="\image\image-20201013144846374.png"><h5 id="HTTP方式拉取"><a href="#HTTP方式拉取" class="headerlink" title="HTTP方式拉取"></a>HTTP方式拉取</h5><p>开发需要在本地配置</p><p>示例:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;nimingkun&quot;</span><br><span class="line">git config --global user.email nimingkun@liangjian.com</span><br></pre></td></tr></table></figure><p>配置后即可拉取git代码</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@public ~]# git clone http://192.168.1.1:8030/hospWeb/bridge.git</span><br><span class="line">正克隆到 &apos;bridge&apos;...</span><br><span class="line">Username for &apos;http://192.168.1.1:8030&apos;: nimingkun</span><br><span class="line">Password for &apos;http://nimingkun@192.168.1.1:8030&apos;: </span><br><span class="line">remote: Counting objects: 1966, done.</span><br><span class="line">remote: Compressing objects: 100% (777/777), done.</span><br><span class="line">remote: Total 1966 (delta 1093), reused 1966 (delta 1093)</span><br><span class="line">接收对象中: 100% (1966/1966), 773.85 KiB | 0 bytes/s, done.</span><br><span class="line">处理 delta 中: 100% (1093/1093), done.</span><br><span class="line">[root@public code]# ls</span><br><span class="line">bridge</span><br></pre></td></tr></table></figure><h5 id="SSH方式拉取"><a href="#SSH方式拉取" class="headerlink" title="SSH方式拉取"></a>SSH方式拉取</h5><p>开发需要在本地配置</p><p>示例:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;nimingkun&quot;</span><br><span class="line">git config --global user.email nimingkun@liangjian.com</span><br></pre></td></tr></table></figure><p>生成SSH Key(密钥)</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;nimingkun@liangjian.com&quot;</span><br></pre></td></tr></table></figure><p>示例:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@public code]# ssh-keygen -t rsa -C &quot;nimingkun@liangjian.com&quot;</span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file in which to save the key (/root/.ssh/id_rsa): </span><br><span class="line">Enter passphrase (empty for no passphrase): </span><br><span class="line">Enter same passphrase again: </span><br><span class="line">Your identification has been saved in /root/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved in /root/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:G706PSkd8DxM7JS+wDzdrmZbFiZWuCYq/cpZXmr1g1k nimingkun@liangjian.com</span><br><span class="line">The key&apos;s randomart image is:</span><br><span class="line">+---[RSA 2048]----+</span><br><span class="line">|                 |</span><br><span class="line">|           .     |</span><br><span class="line">|         ....    |</span><br><span class="line">|        ..=o     |</span><br><span class="line">|       oS@*.o    |</span><br><span class="line">|     . .=*@+E.   |</span><br><span class="line">|    . o o*o@o    |</span><br><span class="line">|     o =++@o+    |</span><br><span class="line">|      +o==o+ .   |</span><br><span class="line">+----[SHA256]-----+</span><br><span class="line">[root@public code]# ll ~/.ssh/</span><br><span class="line">总用量 12</span><br><span class="line">-rw-------  1 root root 1679 10月 13 15:23 id_rsa</span><br><span class="line">-rw-r--r--  1 root root  405 10月 13 15:23 id_rsa.pub</span><br><span class="line">-rw-r--r--. 1 root root  175 9月  21 16:32 known_hosts</span><br><span class="line"></span><br><span class="line">Windows会生成在用户目录的.ssh下</span><br></pre></td></tr></table></figure><p>查看公钥</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@public code]# cat ~/.ssh/id_rsa.pub</span><br><span class="line">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDGyFIujsLkRzIVmfZJC2W7scE+JXljm54r98Od9LgTSsJosClHd9AmMNENtr1pX1s/yfp1UQVGk+BUJav+PrbboGJqE/PUQgQ3PaYhgl0YoVImLF3XvALJI3SgMTddRy4SOMkdqfzQnZRYY1R6YIpv+JNRY7W4HrbNRqP1x+HwFPP+fD/5tmF+rSKgHdJR6ygMxMf5y16V2FHjmf4s3iPAba10yvE/WW66/KV8s/FOnyjFNMYYS/aBsI73ilvE6sg9zLnZYxLIqMKIaQWak/p9iXTfRkJSI5d3sWx2c4tPyQsFJM895vsp0n+bKU02u/ekvaAZTEzHZ/5AjPK6IX91 nimingkun@liangjian.com</span><br></pre></td></tr></table></figure><p>在页面中添加公钥</p><img src="\image\image-20201013152656686.png"><p>使用ssh链接进行克隆项目</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@public code]# git clone ssh://git@192.168.1.1:8022/hospWeb/video.git</span><br><span class="line">正克隆到 &apos;video&apos;...</span><br><span class="line">The authenticity of host &apos;[192.168.1.1]:8022 ([192.168.1.1]:8022)&apos; can&apos;t be established.</span><br><span class="line">ECDSA key fingerprint is SHA256:3ZXSjpz9luXRVT9coc+57HwVSmaSdi7pL4pvetgHEpk.</span><br><span class="line">ECDSA key fingerprint is MD5:40:ca:ae:87:91:7b:f2:85:35:a3:7e:61:33:59:ce:95.</span><br><span class="line">Are you sure you want to continue connecting (yes/no)? yes</span><br><span class="line">Warning: Permanently added &apos;[192.168.1.1]:8022&apos; (ECDSA) to the list of known hosts.</span><br><span class="line">remote: Counting objects: 428, done.</span><br><span class="line">remote: Compressing objects: 100% (371/371), done.</span><br><span class="line">remote: Total 428 (delta 48), reused 428 (delta 48)</span><br><span class="line">接收对象中: 100% (428/428), 951.64 KiB | 1.36 MiB/s, done.</span><br><span class="line">处理 delta 中: 100% (48/48), done.</span><br><span class="line">[root@public code]# ls</span><br><span class="line">bridge  video</span><br></pre></td></tr></table></figure><h5 id="查看项目提交历史和分支"><a href="#查看项目提交历史和分支" class="headerlink" title="查看项目提交历史和分支"></a>查看项目提交历史和分支</h5><img src="\image\image-20201013145142683.png"><h5 id="搜索仓库-用户-组织"><a href="#搜索仓库-用户-组织" class="headerlink" title="搜索仓库,用户.组织"></a>搜索仓库,用户.组织</h5><img src="\image\image-20201013144513505.png"><h5 id="迁移外部仓库"><a href="#迁移外部仓库" class="headerlink" title="迁移外部仓库"></a>迁移外部仓库</h5><p>填入需要克隆的地址和git用户名密码,即可</p><img src="\image\image-20201013145727136.png"><h5 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h5><p>监听日志，提示没有权限<br>mkdir: can’t create directory ‘/data/git/‘: Permission denied<br>此时，可能是SELINUX阻止的原因</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost data]# docker logs --tail 0 -f 712c350adb28cc17b73f0a87548ab97e02f45d0b9bb56c6f6b495de258f01222</span><br><span class="line"></span><br><span class="line">Saving key &quot;/data/ssh/ssh_host_dsa_key&quot; failed: No such file or directory</span><br><span class="line">Saving key &quot;/data/ssh/ssh_host_ecdsa_key&quot; failed: No such file or directory</span><br><span class="line">Saving key &quot;/data/ssh/ssh_host_ed25519_key&quot; failed: No such file or directory</span><br><span class="line">chown: /data/ssh/*: No such file or directory</span><br><span class="line">chmod: /data/ssh: No such file or directory</span><br><span class="line">chmod: /data/ssh/*: No such file or directory</span><br><span class="line">Could not load host key: /data/ssh/ssh_host_rsa_key</span><br><span class="line">Could not load host key: /data/ssh/ssh_host_dsa_key</span><br><span class="line">Could not load host key: /data/ssh/ssh_host_ecdsa_key</span><br><span class="line">Could not load host key: /data/ssh/ssh_host_ed25519_key</span><br><span class="line">sshd: no hostkeys available -- exiting.</span><br><span class="line">mkdir: can&apos;t create directory &apos;/data/git/&apos;: Permission denied</span><br><span class="line">chmod: /data/git/.ssh: No such file or directory</span><br><span class="line">./run: ./setup: line 11: can&apos;t create /data/git/.ssh/environment: nonexistent directory</span><br><span class="line">chmod: /data/git/.ssh/environment: No such file or directory</span><br><span class="line">chown: /data: Permission denied</span><br><span class="line">chown: /data: Permission denied</span><br><span class="line">chown: /data/git/: No such file or directory</span><br><span class="line">chmod: /data: Permission denied</span><br><span class="line">chmod: /data/gogs: No such file or directory</span><br><span class="line">chmod: /data/git/: No such file or directory</span><br><span class="line">2017/12/31 01:19:08 [ WARN] Custom config &apos;/data/gogs/conf/app.ini&apos; not found, ignore this if you&apos;re running first time</span><br><span class="line">2017/12/31 01:19:08 [FATAL] [...g/setting/setting.go:501 NewContext()] Fail to create &apos;/data/git/.ssh&apos;: mkdir /data/git: permission denied</span><br><span class="line">Saving key &quot;/data/ssh/ssh_host_rsa_key&quot; failed: No such file or directory</span><br></pre></td></tr></table></figure><p>关闭SELINUX即可解决</p><ul><li>临时关闭：setenforce 0</li><li>永久关闭： vim /etc/selinux/config</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># This file controls the state of SELinux on the system.</span><br><span class="line"># SELINUX= can take one of these three values:</span><br><span class="line">#     enforcing - SELinux security policy is enforced.</span><br><span class="line">#     permissive - SELinux prints warnings instead of enforcing.</span><br><span class="line">#     disabled - No SELinux policy is loaded.</span><br><span class="line">#SELINUX=enforcing</span><br><span class="line">SELINUX=disabled</span><br><span class="line"># SELINUXTYPE= can take one of three two values:</span><br><span class="line">#     targeted - Targeted processes are protected,</span><br><span class="line">#     minimum - Modification of targeted policy. Only selected processes are protected.</span><br><span class="line">#     mls - Multi Level Security protection.</span><br><span class="line">SELINUXTYPE=targeted</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;Gogs安装&quot;&gt;&lt;a href=&quot;#Gogs安装&quot; class=&quot;headerlink&quot; title=&quot;Gogs安装&quot;&gt;&lt;/a&gt;Gogs安装&lt;/h4&gt;&lt;h5 id=&quot;安装docker&quot;&gt;&lt;a href=&quot;#安装docker&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    
    <category term="gogs" scheme="https://nmk0718.github.io/tag/gogs/"/>
    
  </entry>
  
  <entry>
    <title>k8s集群维护</title>
    <link href="https://nmk0718.github.io/2020/07/30/k8s%E9%9B%86%E7%BE%A4%E7%BB%B4%E6%8A%A4/"/>
    <id>https://nmk0718.github.io/2020/07/30/k8s%E9%9B%86%E7%BE%A4%E7%BB%B4%E6%8A%A4/</id>
    <published>2020-07-30T15:40:00.000Z</published>
    <updated>2025-02-10T04:00:59.703Z</updated>
    
    <content type="html"><![CDATA[<p>查看集群</p><p>图中有三个集群,集群区域为华北2 状态运行中,节点数为每个集群的worker数.<br><img src="https://nmk0718.github.io/image/5f0e9d826971d.png"></p><details><summary>集群扩容</summary>选择 更多>集群扩容 来为集群扩容节点也可选择 更多>添加已有节点 来扩容(把ecs添加到集群)<img src="https://nmk0718.github.io/image/5f0e9e447e472.png">选择 专有网络和交换机 付费方式<img src="https://nmk0718.github.io/image/5f0e9ecc9358f.png">选择扩容节点数和规格(规格>内存型>ecs.r5.xlarge)  设置密码提交即可<img src="https://nmk0718.github.io/image/5f0ea01d29a2e.png"></details><h4 id="节点详情"><a href="#节点详情" class="headerlink" title="节点详情"></a>节点详情</h4><p>图中test集群有两个worker节点,可查看对应的ip地址 计费方式 内存大小 到期时间 内存CPU使用<br>如需更细微的监控,请点击右边的监控可查看负载网络等情况<br>移除worker节点：更多&gt;移除 即可,如需批量移除,请勾选worker节点的选项,点击批量移除即可<br><img src="https://nmk0718.github.io/image/5f0fb71a27871.png"></p><h4 id="无状态"><a href="#无状态" class="headerlink" title="无状态"></a>无状态</h4><p>可查看应用数量,容器数量显示应用的节点数和状态<br>🌰举例:1/1代表1个节点启动成功.0/1代表1个节点但启动失败.1/2代表2个节点但只有一个启动成功<br><img src="https://nmk0718.github.io/image/5f0fb998b34c9.png"></p><details>  <summary>💁🏻<font color="blue">详情</font></summary>查看应用名称,应用的来源(镜像仓库地址),应用的状态,pod的ip,pod所在worker的ip 创建时间<img src="https://nmk0718.github.io/image/5f0fbb19e1c65.png">🔎<font color="blue">详情</font>查看该应用所在pod的资源情况<img src="https://nmk0718.github.io/image/5f0fbc63e18cb.png">📋<font color="blue">日志</font>选择显示的行数,是否自动刷新日志,可下载日志文件<img src="https://nmk0718.github.io/image/5f0fbcb40601f.png">⚙️<font color="blue">更多</font>编辑可查看该应用的yaml文件 终端可连接到pod里进行操作 删除可删除当前的pod,但会自动再创建一个<img src="https://nmk0718.github.io/image/5f0fbd389d876.png">🚪访问方式可查看和编辑 服务代表pod对外映射的端口 路由代表进来的域名地址转发到pod里的应用地址<img src="https://nmk0718.github.io/image/5f0fbfd4236f2.png">🎛容器水平伸缩器可按照规则进行自动的扩容和减少节点数 最小副本决定该应用的最小节点数<img src="https://nmk0718.github.io/image/5f0fbfe8106a7.png">📷历史版本出现问题时可使用进行回滚(运维配置该回滚有点问题,请勿使用)<img src="https://nmk0718.github.io/image/5f0fc088499a1.png">🧭触发器与容器镜像服务的触发器相对应,检测到镜像变化则更新应用<img src="https://nmk0718.github.io/image/5f0fc154cd697.png"></details><details>    <summary>💁🏻<font color="blue">编辑</font></summary>**镜像名称**: 镜像仓库地址**镜像Tag**: 镜像的版本**总是拉取镜像**: 当出现删除或扩容时拉取镜像**所需资源**: 定义的pod内存和cpu**资源限制**: pod共享的内存和cpu (此为pod的最大内存和cpu值)<img src="https://nmk0718.github.io/image/5f0fc613da038.png">存活检查就绪检查<img src="https://nmk0718.github.io/image/5f0fc70509928.png">挂载目录到worker节点(当pod重启时,对应目录的数据会保留)<img src="https://nmk0718.github.io/image/5f0fc7d588040.png"></details><details>    <summary>💁🏻<font color="blue">伸缩</font></summary>可增加和减少当前应用的节点数(⚠️<font color="red">当配置容器伸缩水平时,当前此配置无效</font>)<img src="https://nmk0718.github.io/image/5f0fc3fe369c2.png"></details><details>    <summary>💁🏻<font color="blue">监控</font></summary>可查看应用所在容器的监控,<font color="red">分组</font>为整个组的资源使用,<font color="red">实例</font>可查看单个节点的资源使用<img src="https://nmk0718.github.io/image/5f0fc3a3b9692.png"></details><details>    <summary>💁🏻<font color="blue">更多</font></summary>可查看yaml文件,重新部署应用,回滚到相应版本,删除应用<img src="https://nmk0718.github.io/image/5f0fc33ab80b4.png"></details><h4 id="有状态"><a href="#有状态" class="headerlink" title="有状态"></a>有状态</h4><h5 id="一、在阿里云Kubernetes中运行的服务分为-无状态和有状态"><a href="#一、在阿里云Kubernetes中运行的服务分为-无状态和有状态" class="headerlink" title="一、在阿里云Kubernetes中运行的服务分为:无状态和有状态"></a>一、在阿里云Kubernetes中运行的服务分为:无状态和有状态</h5><ul><li><p>无状态: K8S使用RC（或更新的Replica Set）来保证一个服务的实例数量，如果说某个Pod实例由于某种原因Crash了，RC会立刻用这个Pod的模版新启一个Pod来替代它，由于是无状态的服务，新启的Pod与原来健康状态下的Pod一模一样。在Pod被重建后它的IP地址可能发生变化，为了对外提供一个稳定的访问接口，K8S引入了Service的概念。一个Service后面可以挂多个Pod，实现服务的高可用。</p></li><li><p>有状态: K8S开发了一套以Pet Set为核心的全新特性，方便了有状态集群服务在K8S上的部署和管理。具体来说是通过Init Container来做集群的初始化工作，用 Headless Service 来维持集群成员的稳定关系，用动态存储供给来方便集群扩容，最后用Pet Set来综合管理整个集群。<br>(在 Kubernetes 1.5 或更高版本之后，PetSet 不再可用。改名为 StatefulSet)</p></li></ul><h5 id="二、什么是Init-Container？"><a href="#二、什么是Init-Container？" class="headerlink" title="二、什么是Init Container？"></a>二、什么是Init Container？</h5><p>Init Container就是用来做初始化工作的容器，可以是一个或者多个，如果有多个的话，这些容器会按定义的顺序依次执行，只有所有的Init Container执行完后，主容器才会被启动。</p><p>Init Container主要是来做初始化容器工作的应用场景：</p><ul><li>等待其他模块Ready：这个可以用来解决服务之间的依赖问题，比如我们有一个 Web 服务，该服务又依赖于另外一个数据库服务，但是在我们启动这个 Web 服务的时候我们并不能保证依赖的这个数据库服务就已经启动起来了，所以可能会出现一段时间内 Web 服务连接数据库异常。要解决这个问题的话我们就可以在 Web 服务的 Pod 中使用一个InitContainer，在这个初始化容器中去检查数据库是否已经准备好了，准备好了过后初始化容器就结束退出，然后我们的主容器 Web 服务被启动起来，这个时候去连接数据库就不会有问题了。</li><li>做初始化配置：比如集群里检测所有已经存在的成员节点，为主容器准备好集群的配置信息，这样主容器起来后就能用这个配置信息加入集群。</li><li>其它场景：如将Pod注册到一个中央数据库、配置中心等。</li></ul><h5 id="三、什么是Pet-Set？"><a href="#三、什么是Pet-Set？" class="headerlink" title="三、什么是Pet Set？"></a>三、什么是Pet Set？</h5><ul><li><p>Pet是一个有状态应用程序，本质上它是一个具有确定性名称以及唯一身份的Pod，身份内容包括：<br>DNS中可以识别的固定hostname<br>顺序化索引（Pet名称组成：PetSetName-Ordinal）<br>链接到索引与hostname的固定存储</p></li><li><p>Pet Set就是Pet集合，它具有特定数量的Pet，其目的就在于解耦集群化有状态应用程序，例如MySQL、PostgreSQL等数据库应用程序，或者Zookeeper、Etcd以及Elasticsearch等集群化应用程序。一般集群化应用程序都是部署在固定的结点上，具有永久性存储以及静态的IP地址，并且在部署过程中需要在结点之间建立一定的关联联系。而Pet Set会给每个应用程序实例分配一个身份，这样应用程序实例就不必固定在物理基础服务上，实例之间依靠身份建立联系。</p></li></ul><h6 id="一个Pet有三个特征。"><a href="#一个Pet有三个特征。" class="headerlink" title="一个Pet有三个特征。"></a>一个Pet有三个特征。</h6><ol><li><p>是有稳定的存储，这是通过PV/PVC 来实现的。</p></li><li><p>是稳定的网络身份，这是通过一种叫 Headless Service 的特殊Service来实现的。Service可以为多个Pod实例提供一个稳定的对外访问接口。这个稳定的接口是通过Cluster IP来实现的，Cluster IP是一个虚拟IP，不是真正的IP，所以稳定。K8S会在每个节点上创建一系列的IPTables规则，实现从Cluster IP到实际Pod IP的转发。同时还会监控这些Pod的IP地址变化，如果变了，会更新IP Tables规则，使转发路径保持正确。所以即使Pod IP有变化，外部照样能通过Service的ClusterIP访问到后面的Pod。<br><br>普通Service的Cluster IP 是对外的，用于外部访问多个Pod实例。而Headless Service的作用是对内的，用于为一个集群内部的每个成员提供一个唯一的DNS名字，这样集群成员之间就能相互通信了。所以<font color="red">Headless Service没有Cluster IP</font>，这是它和普通Service的区别。<br><br>Headless Service 会为关联的每一个 pod 提供对应的 DNS 地址，格式为<pod-name>.<service-name>。这样，客户端就可以自由地选择想要访问的应用实例，同时也能够解决分布式环境下不同实例之间身份识别的问题。<br><br>样例包含一个名为mysql的 Headless Service，该 service 与 StatefulSet 中的 pod 相关联，这些 pod 将被分配如下 DNS 地址mysql-0.mysql、mysql-1.mysql、mysql-2.mysql。这样，客户端就可以通过mysql-0.mysql访问 master 节点，通过mysql-1.mysql或mysql-2.mysql访问 slave 节点。</service-name></pod-name></p></li><li><p>是序号命名规则。Pet是一种特殊的Pod，那么Pet能不能用Pod的命名规则呢？答案是不能，因为Pod的名字是不稳定的。Pod的命名规则是，如果一个Pod是由一个RC创建的，那么Pod的名字是RC的名字加上一个随机字符串。为什么要加一个随机字符串，是因为RC里指定的是Pod的模版，为了实现高可用，通常会从这个模版里创建多个一模一样的Pod实例，如果没有这个随机字符串，同一个RC创建的Pod之间就会由名字冲突。<br><br>如果说某个Pod由于某种原因死掉了，RC会新建一个来代替它，但是这个新建里的Pod名字里的随机字符串与原来死掉的Pod是不一样的。所以Pod的名字跟它的IP一样是不稳定的。<br>为了解决名字不稳定的问题，K8S对Pet的名字不再使用随机字符串，而是为每个Pet分配一个唯一不变的序号，比如 Pet Set 的名字叫 mysql，那么第一个启起来的Pet就叫 mysql-0，第二个叫 mysql-1，如此下去。<br><br>当一个Pet down 掉后，新创建的Pet 会被赋予跟原来Pet一样的名字。由于Pet名字不变所以DNS名字也跟以前一样，同时通过名字还能匹配到原来Pet用到的存储，实现状态保存。<br>在Kubernetes中，其将容器部署划分成多个Pet，并保证每个Pet都有确定性的唯一身份，身份内容包括DNS域名、一致性存储以及顺序化pod索引。在此之前，使用Deployments和Replication Controllers进行部署，只会给应用程序分配一个非耦合的弱身份。弱身份比较适合微服务等应用程序，这类应用程序不关心pod的名称，其重点在于服务发现，并且这些应用程序是无状态的。然而有很多软件应用程序是需要强身份，例如多种不同类型的分布式有状态系统。Cassandra就是一个比较好的例子，它需要一致的网络标识以及固定的存储。<br><br>Pet Sets提供了如下功能：<br>在DNS中具有固定的hostname，同一个Pet Set中的Pet hostname以Pet Set名称为基础，加上从0开始的顺序化数字，例如cassandra-0。<br>顺序化索引，例如0、1、2、3。<br>链接到Pet序列以及hostname的固定存储。<br>通过DNS发现同伴，在Pet创建之前，同伴的名称是已知的。<br>顺序启动与销毁Pet，通过Pet编号，下一个需要被创建的Pet是已知的，并且当Pet Set规模减小时，哪些Pet需要被销毁也是已知的。当缩减集群规模时，对于从一个Pet中抽取数据这类管理任务来说，该功能是非常有用的。</p></li></ol><h5 id="四、创建有状态的容器"><a href="#四、创建有状态的容器" class="headerlink" title="四、创建有状态的容器"></a>四、创建有状态的容器</h5><ul><li><p>指定应用名称,集群,命名空间,节点数,类型</p><img src="https://nmk0718.github.io/image/5ef01fe715b40.png"></li><li><p>选择拉取的镜像的仓库地址</p></li><li><p>单击选择镜像Tag选择镜像的版本。若不指定，默认为最新版。</p></li><li><p>勾选总是拉取镜像，表示每次部署或扩容都会从容器镜像服务重新拉取镜像，而不会从本地拉取镜像。</p></li><li><p>配置应用的cpu和内存</p></li><li><p>存活检测和就绪检测可按照上篇文章进行配置</p></li><li><p>配置数据卷挂载本机目录到pod</p><img src="https://nmk0718.github.io/image/5ef024be1dcb3.png"></li><li><p>创建服务,服务名对应应用名</p></li><li><p>勾选实例间服务发现</p></li><li><p>端口映射</p><img src="https://nmk0718.github.io/image/5ef028fc3eb28.png"></li><li><p>创建后查看应用的主机名后是否有序号</p></li><li><p>在pod终端时候尝试是否能通过<pod-name>.<service-name>:<port>访问应用</port></service-name></pod-name></p><img src="https://nmk0718.github.io/image/5ef0297c107c7.png"></li></ul><h4 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h4><p><strong>名称</strong>: 自定义(应用名即可)<br><strong>关联</strong>: 应用的的无状态名称<br><strong>端口映射</strong>: 需要外放的端口<br><img src="https://nmk0718.github.io/image/5f0fee1759024.png"></p><h4 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h4><p><strong>名称</strong>: 自定义(可填写域名名称)<br><strong>域名</strong>: 域名(tdev.gzlplink.com)<br><strong>路径</strong>: 要访问的地址(如/api)<br><strong>服务</strong>: 选择服务对应的容器名<br>勾选开启TLS,使用密钥,既可使用https,如未有密钥可点击新建密钥进行创建<br><img src="https://nmk0718.github.io/image/5f0fefc2ea532.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;查看集群&lt;/p&gt;
&lt;p&gt;图中有三个集群,集群区域为华北2 状态运行中,节点数为每个集群的worker数.&lt;br&gt;&lt;img src=&quot;https://nmk0718.github.io/image/5f0e9d826971d.png&quot;&gt;&lt;/p&gt;
&lt;details&gt;
&lt;summ</summary>
      
    
    
    
    
    <category term="k8s" scheme="https://nmk0718.github.io/tag/k8s/"/>
    
  </entry>
  
  <entry>
    <title>elasticsearch</title>
    <link href="https://nmk0718.github.io/2020/07/30/elasticsearch/"/>
    <id>https://nmk0718.github.io/2020/07/30/elasticsearch/</id>
    <published>2020-07-30T14:55:00.000Z</published>
    <updated>2025-02-20T09:54:36.934Z</updated>
    
    <content type="html"><![CDATA[<h3 id="elasticsearch集群搭建"><a href="#elasticsearch集群搭建" class="headerlink" title="elasticsearch集群搭建"></a>elasticsearch集群搭建</h3><h4 id="elasticsearch"><a href="#elasticsearch" class="headerlink" title="elasticsearch"></a>elasticsearch</h4><h5 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-oss-7.8.0-linux-x86_64.tar.gz</span><br></pre></td></tr></table></figure><p>注意下载带oss的开源版本</p><h5 id="拷贝到安装目录"><a href="#拷贝到安装目录" class="headerlink" title="拷贝到安装目录"></a>拷贝到安装目录</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cp elasticsearch-7.8.0-linux-x86_64.tar.gz /opt/es</span><br></pre></td></tr></table></figure><h5 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd /opt/es</span><br><span class="line">tar -zxvf elasticsearch-7.8.0-linux-x86_64.tar.gz</span><br></pre></td></tr></table></figure><h5 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim elasticsearch-7.8.0/config/elasticsearch.yml</span><br></pre></td></tr></table></figure><ul><li><strong>cluster.name</strong>: 集群名称,集群名称用于跟其他相同名字的节点构成整个集群.</li><li><strong>node.name</strong>: 节点名称, 是该elasticsearch实例的唯一标识</li><li><strong>path.data</strong>: 数据路径,指定文档，索引存放的位置。</li><li><strong>path.logs</strong>:日志路径，指定运行日志的存放目录</li><li><strong>network.host</strong>: 绑定地址</li><li><strong>http.port</strong>: http端口,默认9200</li><li><strong>discovery.seed_hosts</strong>: 集群主机列表</li><li><strong>cluster.initial_master_nodes</strong>: 初始化一个新的集群时选举master(第一个启动为master)</li><li><strong>http.cors.enabled</strong>: 是否支持跨域,是：true，在使用head插件时需要此配置</li><li><strong>node.master</strong>: 是否是master节点</li><li><strong>discovery.type: single-node</strong> 单节点使用此配置</li></ul><p>配置如下</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># ======================== Elasticsearch Configuration =========================</span><br><span class="line">#</span><br><span class="line"># NOTE: Elasticsearch comes with reasonable defaults for most settings.</span><br><span class="line">#       Before you set out to tweak and tune the configuration, make sure you</span><br><span class="line">#       understand what are you trying to accomplish and the consequences.</span><br><span class="line">#</span><br><span class="line"># The primary way of configuring a node is via this file. This template lists</span><br><span class="line"># the most important settings you may want to configure for a production cluster.</span><br><span class="line">#</span><br><span class="line"># Please consult the documentation for further information on configuration options:</span><br><span class="line"># https://www.elastic.co/guide/en/elasticsearch/reference/index.html</span><br><span class="line">#</span><br><span class="line"># ---------------------------------- Cluster -----------------------------------</span><br><span class="line">#</span><br><span class="line"># Use a descriptive name for your cluster:</span><br><span class="line">#</span><br><span class="line">cluster.name: elasticsearch</span><br><span class="line">#</span><br><span class="line"># ------------------------------------ Node ------------------------------------</span><br><span class="line">#</span><br><span class="line"># Use a descriptive name for the node:</span><br><span class="line">#</span><br><span class="line">node.name: node-100</span><br><span class="line">#</span><br><span class="line"># Add custom attributes to the node:</span><br><span class="line">#</span><br><span class="line">#node.attr.rack: r1</span><br><span class="line">#</span><br><span class="line"># ----------------------------------- Paths ------------------------------------</span><br><span class="line">#</span><br><span class="line"># Path to directory where to store the data (separate multiple locations by comma):</span><br><span class="line">#</span><br><span class="line">path.data: /home/elasticsearch/data</span><br><span class="line">#</span><br><span class="line"># Path to log files:</span><br><span class="line">#</span><br><span class="line">path.logs: /home/elasticsearch/logs</span><br><span class="line">#</span><br><span class="line"># ----------------------------------- Memory -----------------------------------</span><br><span class="line">#</span><br><span class="line"># Lock the memory on startup:</span><br><span class="line">#</span><br><span class="line">#bootstrap.memory_lock: true</span><br><span class="line">#</span><br><span class="line"># Make sure that the heap size is set to about half the memory available</span><br><span class="line"># on the system and that the owner of the process is allowed to use this</span><br><span class="line"># limit.</span><br><span class="line">#</span><br><span class="line"># Elasticsearch performs poorly when the system is swapping the memory.</span><br><span class="line">#</span><br><span class="line"># ---------------------------------- Network -----------------------------------</span><br><span class="line">#</span><br><span class="line"># Set the bind address to a specific IP (IPv4 or IPv6):</span><br><span class="line">#</span><br><span class="line">network.host: 172.17.53.225</span><br><span class="line">#</span><br><span class="line"># Set a custom port for HTTP:</span><br><span class="line">#</span><br><span class="line">#</span><br><span class="line">http.port: 9100</span><br><span class="line">#</span><br><span class="line"># For more information, consult the network module documentation.</span><br><span class="line">#</span><br><span class="line"># --------------------------------- Discovery ----------------------------------</span><br><span class="line">#</span><br><span class="line"># Pass an initial list of hosts to perform discovery when this node is started:</span><br><span class="line"># The default list of hosts is [&quot;127.0.0.1&quot;, &quot;[::1]&quot;]</span><br><span class="line">#</span><br><span class="line">discovery.seed_hosts: [&quot;172.17.53.225:9300&quot;,&quot;172.17.53.226:9300&quot;,&quot;172.17.53.227:9300&quot;]</span><br><span class="line">#ES7.x前使用discovery.zen.ping.unicast.hosts: [&quot;192.168.1.130&quot;, &quot;192.168.1.134&quot;] </span><br><span class="line">#</span><br><span class="line"># Bootstrap the cluster using an initial set of master-eligible nodes:</span><br><span class="line">#</span><br><span class="line">cluster.initial_master_nodes: [&quot;node-100&quot;, &quot;node-101&quot;,&quot;node-102&quot;]</span><br><span class="line">#</span><br><span class="line"># For more information, consult the discovery and cluster formation module documentation.</span><br><span class="line">#</span><br><span class="line"># ---------------------------------- Gateway -----------------------------------</span><br><span class="line">#</span><br><span class="line"># Block initial recovery after a full cluster restart until N nodes are started:</span><br><span class="line">#</span><br><span class="line">#gateway.recover_after_nodes: 3</span><br><span class="line">#</span><br><span class="line"># For more information, consult the gateway module documentation.</span><br><span class="line">#</span><br><span class="line"># ---------------------------------- Various -----------------------------------</span><br><span class="line">#</span><br><span class="line"># Require explicit names when deleting indices:</span><br><span class="line">#</span><br><span class="line">#action.destructive_requires_name: true</span><br><span class="line">http.cors.enabled: true</span><br><span class="line">#</span><br><span class="line">node.master: true</span><br></pre></td></tr></table></figure><p>⚠️注意discovery.seed_hosts处为集群交互端口,默认为9300,如需更改请把下面参数加入配置</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#TCP的默认监听端口，默认 9300</span><br><span class="line">transport.tcp.port: 9300</span><br></pre></td></tr></table></figure><p>配置完成后，将整个文件copy到另外两个机器</p><p>Elasticsearch不允许使用root账号启动，因此需要建一个专用的账号。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adduser es</span><br><span class="line">passwd gzlp</span><br><span class="line">chown -R es ./elasticsearch-7.8.0</span><br></pre></td></tr></table></figure><p>修改数据路径和日志路径的权限:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chown -R es /home/elasticsearch/data</span><br><span class="line">chown -R es /home/elasticsearch/logs</span><br></pre></td></tr></table></figure><p>增加插件</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https://github.com/medcl/elasticsearch-analysis-ik/releases</span><br><span class="line">https://github.com/medcl/elasticsearch-analysis-pinyin/releases</span><br><span class="line">https://github.com/medcl/elasticsearch-analysis-stconvert/releases</span><br><span class="line">下载es版本一致的包,解压.移动到elasticsearch-7.8.0/plugins里</span><br><span class="line">重命名elasticsearch-analysis-ik为ik</span><br><span class="line">重命名elasticsearch-analysis-pinyin为pinyin</span><br><span class="line">重命名elasticsearch-analysis-stconvert为stconvert</span><br></pre></td></tr></table></figure><p>修改配置sysctl.conf</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi /etc/sysctl.conf</span><br></pre></td></tr></table></figure><p>添加配置</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vm.max_map_count=262144</span><br></pre></td></tr></table></figure><p>执行命令</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sysctl -p</span><br></pre></td></tr></table></figure><p>启动elasticsearch</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#后台启动</span><br><span class="line">./elasticsearch -d</span><br></pre></td></tr></table></figure><p>验证是否启动成功</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http://172.17.53.255:9100</span><br></pre></td></tr></table></figure><p>验证是否为集群</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http://172.17.53.255:9100/_cluster/stats?pretty</span><br></pre></td></tr></table></figure><p>验证是否为主节点</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http://172.17.53.226:9200/_cat/nodes?v</span><br><span class="line"></span><br><span class="line">#带*星号表明该节点是主节点。带-表明该节点是从节点。</span><br><span class="line">#另外还是heap.percent堆内存使用情况，ram.percent运行内存使用情况，cpu使用情况。</span><br><span class="line"></span><br><span class="line">ip            heap.percent ram.percent cpu load_1m load_5m load_15m node.role master name</span><br><span class="line">172.17.53.227           61          78   0    0.04    0.30     0.38 dimr      *      node-3</span><br><span class="line">172.17.53.226           69          90   1    0.21    0.84     1.03 dimr      -      node-2</span><br><span class="line">172.17.53.225           34          92   1    0.20    0.32     0.18 dimr      -      node-1</span><br></pre></td></tr></table></figure><h5 id="开机自启"><a href="#开机自启" class="headerlink" title="开机自启"></a>开机自启</h5><ul><li>在/etc/init.d目录下新建文件elasticsearch</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">一般的服务器在init.d这个目录下面好像都有没有elasticsearch这个文件，所以需要自己创建一个</span><br><span class="line">1</span><br></pre></td></tr></table></figure><ul><li>在文件里面写入shell脚本</li></ul><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/bin/sh</span></span><br><span class="line"><span class="comment">#chkconfig: 2345 80 05</span></span><br><span class="line"><span class="comment">#description: elasticsearch</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Java Env</span></span><br><span class="line">export JAVA_HOME=/usr/java</span><br><span class="line">export CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar</span><br><span class="line">export PATH=<span class="variable">$PATH:</span><span class="variable">$JAVA_HOME</span>/bin</span><br><span class="line"> </span><br><span class="line">case <span class="string">"<span class="variable">$1</span>"</span> <span class="keyword">in</span></span><br><span class="line">start)</span><br><span class="line">    su es&lt;&lt;!</span><br><span class="line">    cd /opt/es</span><br><span class="line">    ./bin/elasticsearch <span class="literal">-d</span></span><br><span class="line">!</span><br><span class="line">    echo <span class="string">"elasticsearch startup"</span></span><br><span class="line">    ;;  </span><br><span class="line">stop)</span><br><span class="line">    es_pid=`ps aux|grep elasticsearch | grep <span class="literal">-v</span> <span class="string">'grep elasticsearch'</span> | awk <span class="string">'&#123;print $2&#125;'</span>`</span><br><span class="line">    kill <span class="literal">-9</span> <span class="variable">$es_pid</span></span><br><span class="line">    echo <span class="string">"elasticsearch stopped"</span></span><br><span class="line">    ;;  </span><br><span class="line">restart)</span><br><span class="line">    es_pid=`ps aux|grep elasticsearch | grep <span class="literal">-v</span> <span class="string">'grep elasticsearch'</span> | awk <span class="string">'&#123;print $2&#125;'</span>`</span><br><span class="line">    kill <span class="literal">-9</span> <span class="variable">$es_pid</span></span><br><span class="line">    echo <span class="string">"elasticsearch stopped"</span></span><br><span class="line">    su es&lt;&lt;!</span><br><span class="line">    cd /opt/es</span><br><span class="line">    ./bin/elasticsearch <span class="literal">-d</span></span><br><span class="line">!</span><br><span class="line">    echo <span class="string">"elasticsearch startup"</span></span><br><span class="line">    ;;  </span><br><span class="line">*)</span><br><span class="line">    echo <span class="string">"start|stop|restart"</span></span><br><span class="line">    ;;  </span><br><span class="line">esac</span><br><span class="line"> </span><br><span class="line"><span class="keyword">exit</span> <span class="variable">$</span>?</span><br></pre></td></tr></table></figure><p>代码中的JAVA_HOME和JAVA_BIN路径需要根据自己的实际情况填写，su es这个要换成自己的服务器用户名，cd /usr/local/elasticsearch-7.7.1需要换成自己es的实际安装地址</p><ul><li>在/etc/init.d/下面给elasticsearch赋予执行权限</li></ul><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">chmod +x elasticsearch</span><br></pre></td></tr></table></figure><ul><li>将elasticsearch添加到开机启动</li></ul><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">chkconfig -<span class="literal">-add</span> elasticsearch</span><br></pre></td></tr></table></figure><ul><li>重启服务器在浏览器中输入<a href="http://X.X.X.X:9200/就可以了" target="_blank" rel="noopener">http://X.X.X.X:9200/就可以了</a></li></ul><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure><p>将脚本加在 /etc/rc.local的后面</p><h5 id="遇到的报错"><a href="#遇到的报错" class="headerlink" title="遇到的报错"></a>遇到的报错</h5><p><strong>错误信息：</strong> [1]: max file descriptors [4096] for elasticsearch process is too low, increase to at least [65535]</p><p>ERROR: [5] bootstrap checks failed</p><p>[1]: max file descriptors [4096] for elasticsearch process is too low, increase to at least [65535]</p><p>[2]: max number of threads [1024] for user [es] is too low, increase to at least [4096]</p><p>[3]: max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]</p><p>修改配置limits.conf</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi /etc/security/limits.conf</span><br></pre></td></tr></table></figure><p>添加配置</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* soft nofile 65536</span><br><span class="line">* hard nofile 65536</span><br><span class="line"></span><br><span class="line">* soft nproc 4096</span><br><span class="line">* hard nproc 4096</span><br><span class="line">#保存后需重新连接服务器</span><br></pre></td></tr></table></figure><h4 id="ElasticHD"><a href="#ElasticHD" class="headerlink" title="ElasticHD"></a>ElasticHD</h4><h5 id="下载-1"><a href="#下载-1" class="headerlink" title="下载"></a>下载</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https://github.com/360EntSecGroup-Skylar/ElasticHD/releases</span><br></pre></td></tr></table></figure><h5 id="解压-1"><a href="#解压-1" class="headerlink" title="解压"></a>解压</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">unzip elasticHD_linux_amd64.zip</span><br></pre></td></tr></table></figure><h5 id="进入目录"><a href="#进入目录" class="headerlink" title="进入目录"></a>进入目录</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mv ElasticHD /opt/</span><br><span class="line">cd /opt/</span><br></pre></td></tr></table></figure><h5 id="后台启动"><a href="#后台启动" class="headerlink" title="后台启动"></a>后台启动</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nohup ./ElasticHD -p 192.168.50.60:9800 &amp;</span><br></pre></td></tr></table></figure><h4 id="Cerebro"><a href="#Cerebro" class="headerlink" title="Cerebro"></a>Cerebro</h4><h5 id="下载-2"><a href="#下载-2" class="headerlink" title="下载"></a>下载</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget https://github.com/lmenezes/cerebro/releases/download/v0.9.2/cerebro-0.9.2.tgz</span><br></pre></td></tr></table></figure><h5 id="解压-2"><a href="#解压-2" class="headerlink" title="解压"></a>解压</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar zxvf cerebro-0.9.2.tgz</span><br></pre></td></tr></table></figure><h5 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim cerebro-0.9.2/conf/application.conf</span><br></pre></td></tr></table></figure><ul><li><strong>basePath</strong>: 定义访问路径 默认为/</li><li><strong>pidfile.path</strong>: pid路径</li><li><strong>data.path</strong>: 数据存放位置</li><li><strong>server.http.port</strong>: 访问端口 默认为9000</li><li><strong>network.host</strong>: 绑定地址</li><li><strong>username</strong>: 登录用户名</li><li><strong>password</strong>: 登录密码</li><li><strong>host</strong>: es集群地址</li><li><strong>name</strong>: 标识 一般用ES的cluster_name</li></ul><p>示例</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Secret will be used to sign session cookies, CSRF tokens and for other encryption utilities.</span><br><span class="line"># It is highly recommended to change this value before running cerebro in production.</span><br><span class="line">secret = &quot;ki:s:[[@=Ag?QI`W2jMwkY:eqvrJ]JqoJyi2axj3ZvOv^/KavOT4ViJSv?6YY4[N&quot;</span><br><span class="line"></span><br><span class="line"># Application base path</span><br><span class="line">basePath = &quot;/cerebro/&quot;</span><br><span class="line"></span><br><span class="line"># Defaults to RUNNING_PID at the root directory of the app.</span><br><span class="line"># To avoid creating a PID file set this value to /dev/null</span><br><span class="line">#pidfile.path = &quot;/var/run/cerebro.pid&quot;</span><br><span class="line">pidfile.path=/dev/null</span><br><span class="line"></span><br><span class="line"># Rest request history max size per user</span><br><span class="line">rest.history.size = 50 // defaults to 50 if not specified</span><br><span class="line"></span><br><span class="line"># Path of local database file</span><br><span class="line">#data.path: &quot;/var/lib/cerebro/cerebro.db&quot;</span><br><span class="line">data.path = &quot;./cerebro.db&quot;</span><br><span class="line"></span><br><span class="line">play &#123;</span><br><span class="line">  # Cerebro port, by default it&apos;s 9000 (play&apos;s default)</span><br><span class="line">  server.http.port = $&#123;?CEREBRO_PORT&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">es = &#123;</span><br><span class="line">  gzip = true</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># Authentication</span><br><span class="line">auth = &#123;</span><br><span class="line">  # either basic or ldap</span><br><span class="line">  type: basic</span><br><span class="line">  settings: &#123;</span><br><span class="line">    # Basic auth</span><br><span class="line">    username = &quot;gzlp&quot;</span><br><span class="line">    password = &quot;gzlplink&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># A list of known hosts</span><br><span class="line">hosts = [</span><br><span class="line">&#123; </span><br><span class="line">host = &quot;http://172.17.53.225:9100&quot;</span><br><span class="line">name = &quot;gzlp-elasticsearch&quot;</span><br><span class="line">&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h5 id="后台启动-1"><a href="#后台启动-1" class="headerlink" title="后台启动"></a>后台启动</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#后台启动</span><br><span class="line">nohup ./bin/cerebro &amp;</span><br></pre></td></tr></table></figure><h4 id="Logstash"><a href="#Logstash" class="headerlink" title="Logstash"></a>Logstash</h4><h5 id="采集日志"><a href="#采集日志" class="headerlink" title="采集日志"></a>采集日志</h5><h6 id="下载-3"><a href="#下载-3" class="headerlink" title="下载"></a>下载</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget https://artifacts.elastic.co/downloads/logstash/logstash-oss-7.8.0.tar.gz</span><br></pre></td></tr></table></figure><h6 id="解压-3"><a href="#解压-3" class="headerlink" title="解压"></a>解压</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar zxvf logstash-oss-7.8.0.tar.gz</span><br></pre></td></tr></table></figure><h6 id="配置logstash-yml"><a href="#配置logstash-yml" class="headerlink" title="配置logstash.yml"></a>配置logstash.yml</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http.host: &quot;192.168.30.129&quot;</span><br><span class="line">http.port: 9600</span><br></pre></td></tr></table></figure><p>在bin目录下创建logstash.conf配置索引</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#================================ input =====================================</span><br><span class="line">input &#123;</span><br><span class="line"> beats &#123;</span><br><span class="line">   port =&gt; 5044</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#================================ output =====================================</span><br><span class="line">output &#123;</span><br><span class="line">  if [fields][docType] == &quot;sys-log&quot; &#123;</span><br><span class="line">    elasticsearch &#123;</span><br><span class="line">      hosts =&gt; [ &quot;172.17.53.226:9101&quot; ]</span><br><span class="line">          ###每天自动创建sys-log-年月日的索引，匹配到的模板是sys-log-*</span><br><span class="line">      index =&gt; &quot;sys-log-%&#123;+YYYY.MM.dd&#125;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  if [fields][docType] == &quot;point-log&quot; &#123;</span><br><span class="line">    elasticsearch &#123;</span><br><span class="line">      hosts =&gt; [ &quot;172.17.53.226:9101&quot; ]</span><br><span class="line">      ###每天自动创建point-log-年月日的索引，匹配到的模板是point-log-*</span><br><span class="line">          index =&gt; &quot;point-log-%&#123;+YYYY.MM.dd&#125;&quot;</span><br><span class="line">      routing =&gt; &quot;%&#123;type&#125;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  if [fields][docType] == &quot;mysqlslowlogs&quot; &#123;</span><br><span class="line">    elasticsearch &#123;</span><br><span class="line">      hosts =&gt; [ &quot;172.17.53.226:9101&quot; ]</span><br><span class="line">          ###每天自动创建mysql-slowlog-年月日的索引，匹配到的模板是mysql-slowlog-*</span><br><span class="line">      index =&gt; &quot;mysql-slowlog-%&#123;+YYYY.MM.dd&#125;&quot;</span><br><span class="line">      manage_template =&gt; false</span><br><span class="line">      document_type =&gt; &quot;%&#123;[@metadata][type]&#125;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  if [fields][docType] == &quot;audit-log&quot; &#123;</span><br><span class="line">    elasticsearch &#123;</span><br><span class="line">      hosts =&gt; [&quot;172.17.53.226:9101&quot;]</span><br><span class="line">      manage_template =&gt; false</span><br><span class="line">      index =&gt; &quot;audit-log-%&#123;+YYYY.MM.dd&#125;&quot;</span><br><span class="line">      document_type =&gt; &quot;%&#123;[@metadata][type]&#125;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#================================ filter =====================================</span><br><span class="line">filter &#123;</span><br><span class="line">  if [type] == &quot;syslog&quot; &#123;</span><br><span class="line">        ##%&#123;语法：语义&#125;</span><br><span class="line">    grok &#123;</span><br><span class="line">      match =&gt; &#123; &quot;message&quot; =&gt; &quot;%&#123;SYSLOGTIMESTAMP:syslog_timestamp&#125; %&#123;SYSLOGHOST:syslog_hostname&#125; %&#123;DATA:syslog_program&#125;(?:\[%&#123;POSINT:syslog_pid&#125;\])?: %&#123;GREEDYDATA:syslog_message&#125;&quot; &#125;</span><br><span class="line">      add_field =&gt; [ &quot;received_at&quot;, &quot;%&#123;@timestamp&#125;&quot; ]</span><br><span class="line">      add_field =&gt; [ &quot;received_from&quot;, &quot;%&#123;host&#125;&quot; ]</span><br><span class="line">    &#125;</span><br><span class="line">    syslog_pri &#123; &#125;</span><br><span class="line">    date &#123;</span><br><span class="line">      match =&gt; [ &quot;syslog_timestamp&quot;, &quot;MMM  d HH:mm:ss&quot;, &quot;MMM dd HH:mm:ss&quot; ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  if [fields][docType] == &quot;sys-log&quot; &#123;</span><br><span class="line">    grok &#123;</span><br><span class="line">      patterns_dir =&gt; [&quot;/home/logstash-7.8.0/config/patterns&quot;]</span><br><span class="line">      match =&gt; &#123; &quot;message&quot; =&gt; &quot;\[%&#123;NOTSPACE:appName&#125;:%&#123;NOTSPACE:serverIp&#125;:%&#123;NOTSPACE:serverPort&#125;\] %&#123;TIMESTAMP_ISO8601:logTime&#125; %&#123;LOGLEVEL:logLevel&#125; %&#123;WORD:pid&#125; \[%&#123;MYAPPNAME:traceId&#125;\] \[%&#123;MYTHREADNAME:threadName&#125;\] %&#123;NOTSPACE:classname&#125; %&#123;GREEDYDATA:message&#125;&quot; &#125;</span><br><span class="line">      overwrite =&gt; [&quot;message&quot;]</span><br><span class="line">    &#125;</span><br><span class="line">    date &#123;</span><br><span class="line">      match =&gt; [&quot;logTime&quot;,&quot;yyyy-MM-dd HH:mm:ss.SSS Z&quot;]</span><br><span class="line">    &#125;</span><br><span class="line">    date &#123;</span><br><span class="line">      match =&gt; [&quot;logTime&quot;,&quot;yyyy-MM-dd HH:mm:ss.SSS&quot;]</span><br><span class="line">      target =&gt; &quot;timestamp&quot;</span><br><span class="line">      locale =&gt; &quot;en&quot;</span><br><span class="line">      timezone =&gt; &quot;+08:00&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    mutate &#123;</span><br><span class="line">      remove_field =&gt; &quot;logTime&quot;</span><br><span class="line">      remove_field =&gt; &quot;@version&quot;</span><br><span class="line">      remove_field =&gt; &quot;host&quot;</span><br><span class="line">      remove_field =&gt; &quot;offset&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  if [fields][docType] == &quot;point-log&quot; &#123;</span><br><span class="line">    grok &#123;</span><br><span class="line">      patterns_dir =&gt; [&quot;/home/logstash-7.8.0/config/patterns&quot;] </span><br><span class="line">        match =&gt; &#123;</span><br><span class="line">        &quot;message&quot; =&gt; &quot;%&#123;TIMESTAMP_ISO8601:logTime&#125;\|%&#123;MYAPPNAME:appName&#125;\|%&#123;WORD:resouceid&#125;\|%&#123;MYAPPNAME:type&#125;\|%&#123;GREEDYDATA:object&#125;&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    kv &#123;</span><br><span class="line">        source =&gt; &quot;object&quot;</span><br><span class="line">        field_split =&gt; &quot;&amp;&quot;</span><br><span class="line">        value_split =&gt; &quot;=&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    date &#123;</span><br><span class="line">      match =&gt; [&quot;logTime&quot;,&quot;yyyy-MM-dd HH:mm:ss.SSS Z&quot;]</span><br><span class="line">    &#125;</span><br><span class="line">    date &#123;</span><br><span class="line">      match =&gt; [&quot;logTime&quot;,&quot;yyyy-MM-dd HH:mm:ss.SSS&quot;]</span><br><span class="line">      target =&gt; &quot;timestamp&quot;</span><br><span class="line">      locale =&gt; &quot;en&quot;</span><br><span class="line">      timezone =&gt; &quot;+08:00&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    mutate &#123;</span><br><span class="line">      remove_field =&gt; &quot;message&quot;</span><br><span class="line">      remove_field =&gt; &quot;logTime&quot;</span><br><span class="line">      remove_field =&gt; &quot;@version&quot;</span><br><span class="line">      remove_field =&gt; &quot;host&quot;</span><br><span class="line">      remove_field =&gt; &quot;offset&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  ##mysqlslowlogs</span><br><span class="line">  if [fields][docType] == &quot;mysqlslowlogs&quot; &#123;</span><br><span class="line">    grok &#123;</span><br><span class="line">        match =&gt; [</span><br><span class="line">          &quot;message&quot;, &quot;^#\s+User@Host:\s+%&#123;USER:user&#125;\[[^\]]+\]\s+@\s+(?:(?&lt;clienthost&gt;\S*) )?\[(?:%&#123;IP:clientip&#125;)?\]\s+Id:\s+%&#123;NUMBER:id&#125;\n# Query_time: %&#123;NUMBER:query_time&#125;\s+Lock_time: %&#123;NUMBER:lock_time&#125;\s+Rows_sent: %&#123;NUMBER:rows_sent&#125;\s+Rows_examined: %&#123;NUMBER:rows_examined&#125;\nuse\s(?&lt;dbname&gt;\w+);\nSET\s+timestamp=%&#123;NUMBER:timestamp_mysql&#125;;\n(?&lt;query_str&gt;[\s\S]*)&quot;,</span><br><span class="line">          &quot;message&quot;, &quot;^#\s+User@Host:\s+%&#123;USER:user&#125;\[[^\]]+\]\s+@\s+(?:(?&lt;clienthost&gt;\S*) )?\[(?:%&#123;IP:clientip&#125;)?\]\s+Id:\s+%&#123;NUMBER:id&#125;\n# Query_time: %&#123;NUMBER:query_time&#125;\s+Lock_time: %&#123;NUMBER:lock_time&#125;\s+Rows_sent: %&#123;NUMBER:rows_sent&#125;\s+Rows_examined: %&#123;NUMBER:rows_examined&#125;\nSET\s+timestamp=%&#123;NUMBER:timestamp_mysql&#125;;\n(?&lt;query_str&gt;[\s\S]*)&quot;,</span><br><span class="line">          &quot;message&quot;, &quot;^#\s+User@Host:\s+%&#123;USER:user&#125;\[[^\]]+\]\s+@\s+(?:(?&lt;clienthost&gt;\S*) )?\[(?:%&#123;IP:clientip&#125;)?\]\n# Query_time: %&#123;NUMBER:query_time&#125;\s+Lock_time: %&#123;NUMBER:lock_time&#125;\s+Rows_sent: %&#123;NUMBER:rows_sent&#125;\s+Rows_examined: %&#123;NUMBER:rows_examined&#125;\nuse\s(?&lt;dbname&gt;\w+);\nSET\s+timestamp=%&#123;NUMBER:timestamp_mysql&#125;;\n(?&lt;query_str&gt;[\s\S]*)&quot;,</span><br><span class="line">          &quot;message&quot;, &quot;^#\s+User@Host:\s+%&#123;USER:user&#125;\[[^\]]+\]\s+@\s+(?:(?&lt;clienthost&gt;\S*) )?\[(?:%&#123;IP:clientip&#125;)?\]\n# Query_time: %&#123;NUMBER:query_time&#125;\s+Lock_time: %&#123;NUMBER:lock_time&#125;\s+Rows_sent: %&#123;NUMBER:rows_sent&#125;\s+Rows_examined: %&#123;NUMBER:rows_examined&#125;\nSET\s+timestamp=%&#123;NUMBER:timestamp_mysql&#125;;\n(?&lt;query_str&gt;[\s\S]*)&quot;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">    date &#123;</span><br><span class="line">      match =&gt; [&quot;timestamp_mysql&quot;,&quot;yyyy-MM-dd HH:mm:ss.SSS&quot;,&quot;UNIX&quot;]</span><br><span class="line">    &#125;</span><br><span class="line">    date &#123;</span><br><span class="line">      match =&gt; [&quot;timestamp_mysql&quot;,&quot;yyyy-MM-dd HH:mm:ss.SSS&quot;,&quot;UNIX&quot;]</span><br><span class="line">      target =&gt; &quot;timestamp&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    mutate &#123;</span><br><span class="line">      convert =&gt; [&quot;query_time&quot;, &quot;float&quot;]</span><br><span class="line">      convert =&gt; [&quot;lock_time&quot;, &quot;float&quot;]</span><br><span class="line">      convert =&gt; [&quot;rows_sent&quot;, &quot;integer&quot;]</span><br><span class="line">      convert =&gt; [&quot;rows_examined&quot;, &quot;integer&quot;]</span><br><span class="line">      remove_field =&gt; &quot;message&quot;</span><br><span class="line">      remove_field =&gt; &quot;timestamp_mysql&quot;</span><br><span class="line">      remove_field =&gt; &quot;@version&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  ####audit-log</span><br><span class="line">  if [fields][docType] == &quot;audit-log&quot; &#123;</span><br><span class="line">    grok &#123;</span><br><span class="line">      patterns_dir =&gt; [&quot;/home/logstash-7.8.0/config/patterns&quot;]</span><br><span class="line">      match =&gt; &#123;</span><br><span class="line">        &quot;message&quot; =&gt; &quot;%&#123;TIMESTAMP_ISO8601:logTime&#125;\|%&#123;MYAPPNAME:appName&#125;\|%&#123;MYTHREADNAME:className&#125;\|%&#123;WORD:methodName&#125;\|%&#123;MYAPPNAME:userId&#125;\|%&#123;MYAPPNAME:userName&#125;\|%&#123;MYAPPNAME:clientId&#125;\|%&#123;GREEDYDATA:operation&#125;&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    date &#123;</span><br><span class="line">      match =&gt; [&quot;logTime&quot;,&quot;yyyy-MM-dd HH:mm:ss.SSS Z&quot;]</span><br><span class="line">    &#125;</span><br><span class="line">    date &#123;</span><br><span class="line">      match =&gt; [&quot;logTime&quot;,&quot;yyyy-MM-dd HH:mm:ss.SSS&quot;]</span><br><span class="line">      target =&gt; &quot;timestamp&quot;</span><br><span class="line">      locale =&gt; &quot;en&quot;</span><br><span class="line">      timezone =&gt; &quot;+08:00&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    mutate &#123;</span><br><span class="line">      remove_field =&gt; &quot;message&quot;</span><br><span class="line">      remove_field =&gt; &quot;logTime&quot;</span><br><span class="line">      remove_field =&gt; &quot;@version&quot;</span><br><span class="line">      remove_field =&gt; &quot;host&quot;</span><br><span class="line">      remove_field =&gt; &quot;offset&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试标准输入输出</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">./bin/logstash -e &apos;input &#123; stdin &#123;&#125; &#125; output &#123; stdout &#123; codec =&gt; rubydebug&#125; &#125;&apos;</span><br><span class="line"></span><br><span class="line">#输入</span><br><span class="line">hellword</span><br><span class="line"></span><br><span class="line">#输出结果</span><br><span class="line">&#123;</span><br><span class="line">      &quot;@version&quot; =&gt; &quot;1&quot;,</span><br><span class="line">          &quot;host&quot; =&gt; &quot;iZ2zehsi01vpevu3usi6etZ&quot;,</span><br><span class="line">    &quot;@timestamp&quot; =&gt; 2020-07-09T02:49:10.957Z,</span><br><span class="line">       &quot;message&quot; =&gt; &quot;helloword&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试输出到文件</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">./bin/logstash -e &apos;input &#123; stdin&#123;&#125; &#125; output &#123; file &#123; path =&gt; &quot;/tmp/log-%&#123;+YYYY.MM.dd&#125;messages.gz&quot;&#125;&#125;&apos;</span><br><span class="line"></span><br><span class="line">#输入</span><br><span class="line">hellword</span><br><span class="line"></span><br><span class="line">#输出结果</span><br><span class="line">tail /tmp/log-2020.07.09messages.gz </span><br><span class="line"></span><br><span class="line">&#123;&quot;host&quot;:&quot;iZ2zehsi01vpevu3usi6etZ&quot;,&quot;message&quot;:&quot;helloword&quot;,&quot;@version&quot;:&quot;1&quot;,&quot;@timestamp&quot;:&quot;2020-07-09T02:50:01.682Z&quot;&#125;</span><br></pre></td></tr></table></figure><p>测试输出到elasticsearch</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">./bin/logstash -e &apos;input &#123;  stdin&#123;&#125; &#125; output &#123; elasticsearch &#123;hosts =&gt; [&quot;172.17.53.225:9100&quot;] index =&gt; &quot;mytest-%&#123;+YYYY.MM.dd&#125;&quot; &#125;&#125;&apos;</span><br><span class="line"></span><br><span class="line">#在es服务目录查看</span><br><span class="line">ll /home/elasticsearch/data/nodes/0/indices/</span><br><span class="line">total 4</span><br><span class="line">drwxr-xr-x 4 es es 4096 Jul  9 10:55 mKYuiHd9Tj-qIH_h1sda9A</span><br></pre></td></tr></table></figure><p>创建模版</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -XPUT http://172.17.53.226:9101/_template/template_sys_log -d &apos;</span><br><span class="line">&#123;</span><br><span class="line">&quot;index_patterns&quot; : [&quot;sys-log-*&quot;],</span><br><span class="line">&quot;order&quot; : 0,</span><br><span class="line">&quot;settings&quot; : &#123;</span><br><span class="line">&quot;number_of_replicas&quot; : 0</span><br><span class="line">&#125;,</span><br><span class="line">&quot;mappings&quot;: &#123;</span><br><span class="line">&quot;properties&quot;: &#123;</span><br><span class="line">&quot;message&quot;: &#123;</span><br><span class="line">&quot;type&quot;: &quot;text&quot;,</span><br><span class="line">&quot;fields&quot;: &#123;</span><br><span class="line">&quot;keyword&quot;: &#123;</span><br><span class="line">&quot;type&quot;: &quot;keyword&quot;,</span><br><span class="line">&quot;ignore_above&quot;: 256</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;analyzer&quot;: &quot;ik_max_word&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;pid&quot;: &#123;</span><br><span class="line">&quot;type&quot;: &quot;text&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;serverPort&quot;: &#123;</span><br><span class="line">&quot;type&quot;: &quot;text&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;logLevel&quot;: &#123;</span><br><span class="line">&quot;type&quot;: &quot;text&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;traceId&quot;: &#123;</span><br><span class="line">&quot;type&quot;: &quot;text&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;&apos; --header &quot;Content-Type: application/json&quot;</span><br><span class="line"></span><br><span class="line">curl -XPUT http://172.17.53.226:9101/_template/template_point_log -d &apos;</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&quot;index_patterns&quot; : [&quot;point-log-*&quot;],</span><br><span class="line"></span><br><span class="line">&quot;order&quot; : 0,</span><br><span class="line"></span><br><span class="line">&quot;settings&quot; : &#123;</span><br><span class="line"></span><br><span class="line">&quot;number_of_replicas&quot; : 0</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;&apos; --header &quot;Content-Type: application/json&quot;</span><br></pre></td></tr></table></figure><p>在config目录下创建patterns目录,在目录下创建mepattern.txt</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># user-center</span><br><span class="line">MYAPPNAME ([0-9a-zA-Z_-]*)</span><br><span class="line"># RMI TCP Connection(2)-127.0.0.1</span><br><span class="line">MYTHREADNAME ([0-9a-zA-Z._-]|\(|\)|\s)*</span><br></pre></td></tr></table></figure><p>在bin目录下启动</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">./logstash -f logstash.conf</span><br></pre></td></tr></table></figure><h5 id="同步mysql"><a href="#同步mysql" class="headerlink" title="同步mysql"></a>同步mysql</h5><p>需要依赖mysql-connector-java-5.1.49.jar</p><p>在bin目录下创建jdbc.conf配置索引</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 输入部分</span><br><span class="line">input &#123;</span><br><span class="line">  stdin &#123;&#125;</span><br><span class="line">  jdbc &#123;</span><br><span class="line">    jdbc_default_timezone =&gt;&quot;Asia/Shanghai&quot; </span><br><span class="line">   </span><br><span class="line">    # mysql数据库驱动</span><br><span class="line">    jdbc_driver_library =&gt; &quot;//root/mysql-connector-java-5.1.49.jar&quot;</span><br><span class="line">    jdbc_driver_class =&gt; &quot;com.mysql.jdbc.Driver&quot;</span><br><span class="line">    # mysql数据库链接，数据库名</span><br><span class="line">    jdbc_connection_string =&gt; &quot;jdbc:mysql://219.128.77.86:7000/nethospital&quot;</span><br><span class="line">    # mysql数据库用户名，密码</span><br><span class="line">    jdbc_user =&gt; &quot;hospitalTest&quot;</span><br><span class="line">    jdbc_password =&gt; &quot;Liangjian123360@8899&quot;</span><br><span class="line"></span><br><span class="line">    # 设置监听间隔  各字段含义（分、时、天、月、年），全部为*默认含义为每分钟更新一次</span><br><span class="line">    schedule =&gt; &quot;* * * * *&quot;</span><br><span class="line"></span><br><span class="line">    # 分页</span><br><span class="line">    jdbc_paging_enabled =&gt; &quot;true&quot;</span><br><span class="line">    # 分页大小</span><br><span class="line">    jdbc_page_size =&gt; &quot;50000&quot;</span><br><span class="line"></span><br><span class="line">    # sql语句执行文件，也可直接使用sql</span><br><span class="line">        statement =&gt; &apos;select id,name,level,hospital_phone,update_time from h_hospital_outer WHERE update_time&gt;=:sql_last_value order by update_time asc&apos;</span><br><span class="line">    # statement_filepath =&gt; &quot;/usr/local/logstash-6.4.2/config/jdbc.sql&quot;</span><br><span class="line"></span><br><span class="line">    # elasticsearch索引类型名</span><br><span class="line">    type =&gt; &quot;hospital_outer_index&quot;</span><br><span class="line"></span><br><span class="line">        # 是否记录上次执行结果，true表示会将上次执行结果的tracking_column字段的值保存到last_run_metadata_path指定的文件中；</span><br><span class="line">        record_last_run =&gt; true</span><br><span class="line">        # 需要记录查询结果某字段的值时，此字段为true。</span><br><span class="line">        use_column_value =&gt; true</span><br><span class="line">        # 需要记录的字段，用于增量同步，需是数据库字段</span><br><span class="line">        tracking_column =&gt; &quot;update_time&quot;</span><br><span class="line">        # 递增字段的类型，numeric 表示数值类型, timestamp 表示时间戳类型</span><br><span class="line">        tracking_column_type =&gt; timestamp</span><br><span class="line">        # 同步点文件，这个文件记录了上次的同步点，重启时会读取这个文件，这个文件可以手动修改</span><br><span class="line">        last_run_metadata_path =&gt; &quot;/opt/logstash-7.8.0/config/hospital_outer_index_id&quot;</span><br><span class="line">        # 是否清除last_run_metadata_path的记录，需要增量同步时此字段必须为false；</span><br><span class="line">        clean_run =&gt; false</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">input &#123;</span><br><span class="line">  stdin &#123;&#125;</span><br><span class="line">  jdbc &#123;</span><br><span class="line">    jdbc_default_timezone =&gt;&quot;Asia/Shanghai&quot; </span><br><span class="line">          </span><br><span class="line">    # mysql数据库驱动</span><br><span class="line">    jdbc_driver_library =&gt; &quot;//root/mysql-connector-java-5.1.49.jar&quot;</span><br><span class="line">    jdbc_driver_class =&gt; &quot;com.mysql.jdbc.Driver&quot;</span><br><span class="line">    # mysql数据库链接，数据库名</span><br><span class="line">    jdbc_connection_string =&gt; &quot;jdbc:mysql://219.128.77.86:7000/nethospital&quot;</span><br><span class="line">    # mysql数据库用户名，密码</span><br><span class="line">    jdbc_user =&gt; &quot;hospitalTest&quot;</span><br><span class="line">    jdbc_password =&gt; &quot;Liangjian123360@8899&quot;</span><br><span class="line">    # 设置监听间隔  各字段含义（分、时、天、月、年），全部为*默认含义为每分钟更新一次</span><br><span class="line">    schedule =&gt; &quot;0 2 * * *&quot;</span><br><span class="line">    # 分页</span><br><span class="line">    jdbc_paging_enabled =&gt; &quot;true&quot;</span><br><span class="line">    # 分页大小</span><br><span class="line">    jdbc_page_size =&gt; &quot;50000&quot;</span><br><span class="line">    # sql语句执行文件，也可直接使用 statement =&gt; &apos;select * from h_hospital_outer&apos;</span><br><span class="line">        statement =&gt; &apos;select id,name,level,hospital_phone from h_hospital_outer&apos;</span><br><span class="line">    # statement_filepath =&gt; &quot;/usr/local/logstash-6.4.2/config/jdbc.sql&quot;</span><br><span class="line">    # elasticsearch索引类型名</span><br><span class="line">    type =&gt; &quot;hospital_outer_index&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 过滤部分(不是必须项）</span><br><span class="line">filter &#123;</span><br><span class="line">    ruby &#123; </span><br><span class="line">                code =&gt; &quot;event.set(&apos;timestamp&apos;, event.get(&apos;@timestamp&apos;).time.localtime + 8*60*60)&quot; </span><br><span class="line">        &#125;</span><br><span class="line">        ruby &#123;</span><br><span class="line">                code =&gt; &quot;event.set(&apos;@timestamp&apos;,event.get(&apos;timestamp&apos;))&quot;</span><br><span class="line">        &#125;</span><br><span class="line">        ruby &#123;</span><br><span class="line">                code =&gt; &quot;event.set(&apos;update_time&apos;,event.get(&apos;timestamp&apos;))&quot;</span><br><span class="line">        &#125;</span><br><span class="line">        ruby &#123;</span><br><span class="line">                code =&gt; &quot;event.set(&apos;create_time&apos;,event.get(&apos;timestamp&apos;))&quot;</span><br><span class="line">        &#125;</span><br><span class="line">        mutate &#123;</span><br><span class="line">                remove_field =&gt; [&quot;timestamp&quot;]</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 输出部分</span><br><span class="line">output &#123;</span><br><span class="line">        if  [type] == &quot;hospital_outer_index&quot; &#123;</span><br><span class="line">                elasticsearch &#123;</span><br><span class="line">                        # elasticsearch索引名</span><br><span class="line">                        index =&gt; &quot;hospital_outer_index&quot;</span><br><span class="line">                        # 使用input中的type作为elasticsearch索引下的类型名</span><br><span class="line">                        document_type =&gt; &quot;%&#123;type&#125;&quot;   # &lt;- use the type from each input</span><br><span class="line">                        # elasticsearch的ip和端口号</span><br><span class="line">                        hosts =&gt; &quot;192.168.50.60:9000&quot;</span><br><span class="line">                        # 同步mysql中数据id作为elasticsearch中文档id</span><br><span class="line">                        document_id =&gt; &quot;%&#123;id&#125;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        stdout &#123;</span><br><span class="line">                codec =&gt; json_lines</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在bin目录下启动</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">./logstash -f jdbc.conf</span><br></pre></td></tr></table></figure><h5 id="遇到的报错-1"><a href="#遇到的报错-1" class="headerlink" title="遇到的报错"></a>遇到的报错</h5><p>Error: Bad file descriptor - Bad file descriptor Exception错误</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">查看data下的是否有.lock文件</span><br><span class="line">[root@es-1 ~]# ls -all /opt/logstash-7.8.0/data/</span><br><span class="line">total 4</span><br><span class="line">drwxr-xr-x.  4  631  503  69 Nov 13 12:58 .</span><br><span class="line">drwxr-xr-x. 12  631  503 253 Nov 12 17:31 ..</span><br><span class="line">drwxr-xr-x.  2 root root   6 Nov 12 17:31 dead_letter_queue</span><br><span class="line">-rw-r--r--.  1 root root   0 Nov 13 12:58 .lock</span><br><span class="line">drwxr-xr-x.  2 root root   6 Nov 12 17:31 queue</span><br><span class="line">-rw-r--r--.  1 root root  36 Nov 12 17:31 uuid</span><br><span class="line"></span><br><span class="line">删除.lock文件重新启动即可</span><br></pre></td></tr></table></figure><p>日志出现报错:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[logstash.outputs.elasticsearch] retrying failed action with response code: 403 (&#123;&quot;type&quot;=&gt;&quot;cluster_block_exception&quot;, &quot;reason&quot;=&gt;&quot;blocked by: [FORBIDDEN/12/index read-only / allow delete (api)];&quot;&#125;)</span><br></pre></td></tr></table></figure><p>ES说明文档:当ES数据所在目录磁盘空间使用率超过90%后，ES将修改为只读状态，所以初步判断是磁盘空间不足导致ES不允许写入。</p><p>解决:</p><p>服务器磁盘空间导致,清理服务器磁盘空间还是出现该报错问题</p><p>怀疑为es索引导致的不能同步数据</p><p><strong>解决办法1 在kibana开发控制台执行下面语句即可</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PUT _settings</span><br><span class="line">    &#123;</span><br><span class="line">    &quot;index&quot;: &#123;</span><br><span class="line">    &quot;blocks&quot;: &#123;</span><br><span class="line">    &quot;read_only_allow_delete&quot;: &quot;false&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>解决方法2</strong></p><p>如果kibana无法执行命令，可以使用下面命令解决</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -XPUT -H &quot;Content-Type: application/json&quot; http://localhost:9200/_all/_settings -d &apos;&#123;&quot;index.blocks.read_only_allow_delete&quot;: null&#125;&apos;</span><br></pre></td></tr></table></figure><p>查看索引</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl http://192.168.50.70:9200/_cat/indices?v</span><br><span class="line">health status index                uuid                   pri rep docs.count docs.deleted store.size pri.store.size</span><br><span class="line">yellow open   h_hospital_outer     N4hbdo5TQnSazNx58_a5Qg   5   1     433934       126728    161.3mb        161.3mb</span><br><span class="line">yellow open   m_medicine_info      swwieAn-TNG3FTTvpOlxwg   5   1      36556         1699     41.3mb         41.3mb</span><br><span class="line">green  open   .kibana_1            OQh5HFwsRDSG0QAPKasZyg   1   0          1            0      3.7kb          3.7kb</span><br><span class="line">yellow open   recommend_doctor_rsp vpIMBifjSySYU6h0j9nM-A   5   1        609            1    983.8kb        983.8kb</span><br></pre></td></tr></table></figure><p>删除索引</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -XDELETE localhost:9200/索引名</span><br><span class="line">例如:</span><br><span class="line">curl -XDELETE http://192.168.50.70:9200/m_medicine_info</span><br><span class="line">curl -XDELETE http://192.168.50.70:9200/h_hospital_outer</span><br><span class="line">curl -XDELETE http://192.168.50.70:9200/recommend_doctor_rsp</span><br><span class="line">curl -XDELETE http://192.168.50.70:9200/.kibana_1</span><br></pre></td></tr></table></figure><p>再次启动logstash,无报错,跟生产索引进行对比发现,有缺少,使用接口进行触发</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">es服务</span><br><span class="line">医生模板生成接口：/api/es/doctor/refreshIndexAndDate</span><br><span class="line">视频/文章模板生成接口：/app/video/article/refreshIndexAndDate</span><br><span class="line">视频模板生成接口(已未使用):/app/video/refreshIndexAndDate</span><br><span class="line"></span><br><span class="line">请求示例:</span><br><span class="line">curl http://127.0.0.1:8908/app/video/article/refreshIndexAndDate</span><br><span class="line"></span><br><span class="line">job服务</span><br><span class="line">医生es全量同步:/job/doctor/synAllDoctorDates</span><br><span class="line">视频/文章全量同步:/job/video/article/synAll</span><br><span class="line">视频全量同步: /job/ljVideo/synAllVideo</span><br><span class="line"></span><br><span class="line">请求示例:</span><br><span class="line">curl http://127.0.0.1:8092/job/doctor/synAllDoctorDates</span><br></pre></td></tr></table></figure><p>在容器的终端进行触发时,出现错误</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Elasticsearch：None of the configured nodes are available:[&#123;#transport#-1&#125;</span><br></pre></td></tr></table></figure><p>排查问题发现,通过nginx外放的端口映射为192.168.50.70:9200.</p><p>9200 是ES节点与外部通讯使用的端口。它是http协议的RESTful接口,各种CRUD操作都是走的该端口</p><p>9300是ES节点之间通讯使用的端口。它是tcp通讯端口，集群间和TCPclient都走的它。java程序中使用ES时，在配置文件中要配置该端口</p><p>更改nginx的端口映射为9300</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">stream &#123;</span><br><span class="line">    upstream es &#123;</span><br><span class="line">       server 192.168.50.70:9300 weight=1 max_fails=2 fail_timeout=120s;</span><br><span class="line">    &#125;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen  3304;</span><br><span class="line">        proxy_connect_timeout 10s;</span><br><span class="line">        proxy_timeout 300s;#设置客户端和代理服务之间的超时时间，如果5分钟内没操作将自动断开。</span><br><span class="line">        proxy_pass es;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后端再次请求接口同步数据正常</p><p>再次查看索引,索引都已经正常创建</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@monitor ~]# curl http://192.168.50.70:9200/_cat/indices?v</span><br><span class="line">health status index                uuid                   pri rep docs.count docs.deleted store.size pri.store.size</span><br><span class="line">yellow open   app_video_article    -tQTMGs4SCKoLtNMJf-Aqw   5   1       2282            0      2.2mb          2.2mb</span><br><span class="line">yellow open   h_hospital_outer     N4hbdo5TQnSazNx58_a5Qg   5   1     433934       126728    161.3mb        161.3mb</span><br><span class="line">yellow open   m_medicine_info      swwieAn-TNG3FTTvpOlxwg   5   1      36556         1699     41.3mb         41.3mb</span><br><span class="line">green  open   .kibana_1            OQh5HFwsRDSG0QAPKasZyg   1   0          1            0      3.7kb          3.7kb</span><br><span class="line">yellow open   recommend_doctor_rsp vpIMBifjSySYU6h0j9nM-A   5   1        609            1    983.8kb        983.8kb</span><br><span class="line">yellow open   mini_doctor_list     q0DGDN1_SZeIXyAeTNu8Dw   5   1          0            0      1.2kb          1.2kb</span><br></pre></td></tr></table></figure><h4 id="filebeat"><a href="#filebeat" class="headerlink" title="filebeat"></a>filebeat</h4><h5 id="下载-4"><a href="#下载-4" class="headerlink" title="下载"></a>下载</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget https://mirrors.huaweicloud.com/filebeat/7.8.0/filebeat-7.8.0-x86_64.rpm</span><br></pre></td></tr></table></figure><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rpm -Uvh filebeat-7.8.0-x86_64.rpm</span><br></pre></td></tr></table></figure><p>配置</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi /etc/filebeat/filebeat.yml</span><br><span class="line"></span><br><span class="line">filebeat.inputs:</span><br><span class="line"></span><br><span class="line">- type: log</span><br><span class="line">  enabled: true</span><br><span class="line">  # 检查文件更新的频率，默认是 10s</span><br><span class="line">  scan_frequency: 10s</span><br><span class="line">  #忽略过去 ignore_older 时间没有修改的文件,0(禁用),2h(2小时),5m(5分钟),168h(1周)</span><br><span class="line">  ignore_older: 0</span><br><span class="line">  # 关闭过去 close_inactive 时间非活动状态的文件的 harvester</span><br><span class="line">  close_inactive: 2m</span><br><span class="line">  #单文件最大收集的字节数,超过将被丢弃，默认10MB=10485760，60MB=62914560,必须大于单文件最大大小</span><br><span class="line">  max_bytes: 62914560</span><br><span class="line">  #每个harvester在获取文件时使用的缓冲区大小字节数，默认值是16384,1MB=1048576‬</span><br><span class="line">  harvester_buffer_size: 1048576‬</span><br><span class="line">  paths:</span><br><span class="line">    - /var/log/java/*/app.*log</span><br><span class="line">  #exclude_lines: [&apos;\s^DEBUG\s\d&apos;]</span><br><span class="line">  #fields_under_root: true</span><br><span class="line">  fields:</span><br><span class="line">    docType: sys-log</span><br><span class="line">    project: microservices-platform</span><br><span class="line">  multiline:</span><br><span class="line">    #pattern: &apos;^\[\S+:\S+:\d&#123;2,&#125;] &apos;</span><br><span class="line">    pattern: &apos;^\[&apos;</span><br><span class="line">    negate: true</span><br><span class="line">    match: after</span><br><span class="line">    </span><br><span class="line">- type: log</span><br><span class="line">  enabled: true</span><br><span class="line">  # 检查文件更新的频率，默认是 10s</span><br><span class="line">  scan_frequency: 15s</span><br><span class="line">  #忽略过去 ignore_older 时间没有修改的文件,0(禁用),2h(2小时),5m(5分钟),168h(1周)</span><br><span class="line">  ignore_older: 0</span><br><span class="line">  # 关闭过去 close_inactive 时间非活动状态的文件的 harvester</span><br><span class="line">  close_inactive: 2m</span><br><span class="line">  #单文件最大收集的字节数,超过将被丢弃，默认10MB=10485760，60MB=62914560,必须大于单文件最大大小</span><br><span class="line">  max_bytes: 62914560</span><br><span class="line">  #每个harvester在获取文件时使用的缓冲区大小字节数，默认值是16384,1MB=1048576‬</span><br><span class="line">  harvester_buffer_size: 1048576‬</span><br><span class="line">  paths:</span><br><span class="line">    - /var/log/java/*/point.*log</span><br><span class="line">  #fields_under_root: true</span><br><span class="line">  fields:</span><br><span class="line">    docType: point-log</span><br><span class="line">    project: microservices-platform</span><br><span class="line">    </span><br><span class="line">- type: log</span><br><span class="line">  enabled: true</span><br><span class="line">  # 检查文件更新的频率，默认是 10s</span><br><span class="line">  scan_frequency: 20s</span><br><span class="line">  #忽略过去 ignore_older 时间没有修改的文件,0(禁用),2h(2小时),5m(5分钟),168h(1周)</span><br><span class="line">  ignore_older: 0</span><br><span class="line">  # 关闭过去 close_inactive 时间非活动状态的文件的 harvester</span><br><span class="line">  close_inactive: 2m</span><br><span class="line">  #单文件最大收集的字节数,超过将被丢弃，默认10MB=10485760，60MB=62914560,必须大于单文件最大大小</span><br><span class="line">  max_bytes: 62914560</span><br><span class="line">  #每个harvester在获取文件时使用的缓冲区大小字节数，默认值是16384,1MB=1048576‬</span><br><span class="line">  harvester_buffer_size: 1048576‬</span><br><span class="line">  paths:</span><br><span class="line">    - /var/log/java/*/audit.*log</span><br><span class="line">  #fields_under_root: true</span><br><span class="line">  fields:</span><br><span class="line">    docType: audit-log</span><br><span class="line">    project: microservices-platform</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">#filebeat全局配置</span><br><span class="line">max_procs: 1</span><br><span class="line">queue.mem:</span><br><span class="line">  #事件容量</span><br><span class="line">  events: 4096</span><br><span class="line">  #一次发送最小event数</span><br><span class="line">  flush.min_events: 512</span><br><span class="line">  #一次发送最大min_events等待时间</span><br><span class="line">  flush.timeout: 5s</span><br><span class="line"></span><br><span class="line">output.logstash:</span><br><span class="line">  enabled: true</span><br><span class="line">  # The Logstash hosts</span><br><span class="line">  hosts: [&quot;172.17.53.226:5044&quot;]</span><br><span class="line">  bulk_max_size: 2048</span><br><span class="line">  </span><br><span class="line">processors:</span><br><span class="line">  - add_host_metadata: ~</span><br><span class="line">  - add_cloud_metadata: ~</span><br><span class="line">  - add_docker_metadata: ~</span><br><span class="line">  - add_kubernetes_metadata:</span><br><span class="line">      default_indexers.enabled: false</span><br><span class="line">      default_matchers.enabled: false</span><br></pre></td></tr></table></figure><h5 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">filebeat -c /etc/filebeat/filebeat.yml -e</span><br><span class="line"></span><br><span class="line">后台启动</span><br><span class="line">nohup filebeat -c /etc/filebeat/filebeat.yml -e &gt;filebeat.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><h4 id="kibana"><a href="#kibana" class="headerlink" title="kibana"></a>kibana</h4><p>下载地址:<a href="https://www.elastic.co/cn/downloads/kibana-oss" target="_blank" rel="noopener">https://www.elastic.co/cn/downloads/kibana-oss</a><br>解压</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar zxvf kibana-oss-7.8.0-linux-x86_64.tar.gz</span><br></pre></td></tr></table></figure><h5 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim kibana-oss-7.8.0-linux-x86_64/config/kibana.ymlserver.port: 5600    #监听端口server.host: &quot;172.17.53.226&quot;    #监听地址elasticsearch.hosts: [&quot;http://172.17.53.225:9200&quot;,&quot;http://172.17.53.226:9200&quot;] #elasticsearch服务器地址</span><br></pre></td></tr></table></figure><h5 id="启动-1"><a href="#启动-1" class="headerlink" title="启动"></a>启动</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">./bin/kibana --allow-root</span><br></pre></td></tr></table></figure><p><strong>Kibana是一个开源的分析和可视化平台，设计用于和Elasticsearch一起工作。</strong></p><ul><li>你用Kibana来搜索，查看，并和存储在Elasticsearch索引中的数据进行交互。</li><li>你可以轻松地执行高级数据分析，并且以各种图标、表格和地图的形式可视化数据。</li><li>Kibana使得理解大量数据变得很容易。它简单的、基于浏览器的界面使你能够快速创建和共享动态仪表板，实时显示Elasticsearch查询的变化。</li></ul><p><strong>Kibana可视化管理页面详细使用说明</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Discover：日志管理视图 主要进行搜索和查询Visualize：统计视图 构建可视化的图表Dashboard：仪表视图 将构建的图表组合形成图表盘Dev Tools： 开发者命令视图 开发工具Management：管理视图 管理工具</span><br></pre></td></tr></table></figure><p><strong>简单查询</strong><br>点击discover，则会显示默认索引的空间，显示的数据默认是15分钟，你可以自己调整时间段后refresh刷新查询到你想要的数据。<br><img src="\image\5f16b919cf571.png"><br>默认情况下,列表会显示所有字段,在左侧的Available fields下方的字段选中add添加,则只显示你所选中的字段到列表中。<br><img src="\image\5f16b9c6b79d3.png"><br>save保存搜索条件<br><img src="\image\5f17b28256ac4.png"><br>open打开保存的搜索条件<br><img src="\image\5f17b26c3780b.png"><br><strong>自定义索引</strong><br>创建索引<br><img src="\image\5f16bd2e3b622.png"><br>输入日志名称(可通过正则匹配)<br><img src="\image\5f16bd669d4ac.png"><br><img src="\image\5f16bd9a241ec.png"><br>可查看所有字段<br><img src="\image\5f16bdc9b995c.png"><br>点击Discover可查看到新添加的索引<br><img src="\image\5f16bdf66aab1.png"><br>Visualize 创建可视化图表<br><img src="\image\5f16bfd8e2c2f.png"><br>Kibana自带有上10种图表,这里选择直方图📊<br><img src="\image\5f16c0138f4c3.png"><br>选择数据来源<br><img src="\image\5f16c7d5b235b.png"><br>默认已经有一个Y轴了，统计的是数量，我们添加一个X轴，点击Buckets下的Add<br><img src="\image\5f16c8377e70b.png"><br>我选择了<a href="https://github.com/timestamp" target="_blank" rel="noopener">@timestamp</a>字段作为x轴 然后Update<br><img src="\image\5f16c8c18cf67.png"><br>保存<br><img src="\image\5f16c8fe1622e.png"><br><strong>仪表盘</strong> 展示保存的可视化结果集合<br>创建一个Dashboard,展示上面定义好的图表<br><img src="\image\5f17af8cbf6d4.png"><br>添加已经存在的图表<br><img src="\image\5f17afa79b0a6.png"><br>添加完后保存即可<br><img src="\image\5f17aff2b7ccd.png"><br><strong>Dev Tools</strong> 可以看到Console命令行直接可以执行ES的REST风格API，右侧是查询的返回结果<br><img src="\image\5f16bad4c39a6.png"><br><strong>Management</strong><br>可对视图或搜索等删除和导入导出<br><img src="\image\5f17b36c51b37.png"><br>kibana可视化操作: <a href="https://www.cnblogs.com/ygunoil/p/13279514.html" target="_blank" rel="noopener">https://www.cnblogs.com/ygunoil/p/13279514.html</a><br>查询语法: <a href="https://www.cnblogs.com/chenqionghe/p/12501218.html" target="_blank" rel="noopener">https://www.cnblogs.com/chenqionghe/p/12501218.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;elasticsearch集群搭建&quot;&gt;&lt;a href=&quot;#elasticsearch集群搭建&quot; class=&quot;headerlink&quot; title=&quot;elasticsearch集群搭建&quot;&gt;&lt;/a&gt;elasticsearch集群搭建&lt;/h3&gt;&lt;h4 id=&quot;elast</summary>
      
    
    
    
    
    <category term="elasticsearch" scheme="https://nmk0718.github.io/tag/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>nginx</title>
    <link href="https://nmk0718.github.io/2020/07/16/nginx/"/>
    <id>https://nmk0718.github.io/2020/07/16/nginx/</id>
    <published>2020-07-16T08:47:00.000Z</published>
    <updated>2024-12-09T03:02:15.154Z</updated>
    
    <content type="html"><![CDATA[<h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>Nginx 是开源、高性能、高可靠的HTTP服务器,也可作为反向代理服务器,邮件服务器，支持热部署，占用内存少、并发能力强、能支持高达 5w 个并发连接数，最重要的是Nginx 是免费的并可以商业化，配置使用也比较简单。支持FastCGI、SSL、Virtual Host、URL Rewrite、Gzip等功能。并且支持很多第三方的模块扩展。</p><h4 id="Nginx常用功能"><a href="#Nginx常用功能" class="headerlink" title="Nginx常用功能"></a>Nginx常用功能</h4><p>Nginx在做反向代理时,提供性能稳定,并且能够提供配置灵活的转发功能。Nginx可以根据不同的正则匹配,采取不同的转发策略,比如图片文件结尾的走文件服务器,动态页面走web服务器。并且Nginx对返回结果进行错误页跳转,异常判断等。如果被分发的服务器存在异常,他可以将请求重新转发给另外一台服务器,然后自动去除异常服务器。</p><h4 id="正向代理和反向代理"><a href="#正向代理和反向代理" class="headerlink" title="正向代理和反向代理"></a>正向代理和反向代理</h4><p>反向代理（Reverse Proxy）对应的是正向代理（Forward Proxy）,他们的区别：<br>正向代理： 内网服务器主动要去请求外网的地址或服务，所进行的一种行为。内网服务&gt;代理服务器&gt;外网<br>反向代理：外网要访问内网服务而进行的一种行为。 外网&gt;代理服务器&gt;内网服务<br><img src="/image/proxy.png" alt="proxy"></p><h4 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h4><p>请求爆发式增长的情况下,单个机器性能再强劲也无法满足要求了,这个时候集群的概念产生了,单个服务器解决不了的问题,可以使用多个服务器,然后将请求分发到各个服务器上,将负载分发到不同的服务器,这就是负载均衡,核心是「分摊压力」。Nginx 实现负载均衡,一般来说指的是将请求转发给服务器集群。<br><img src="/image/balancer.png" alt="balancer"></p><h4 id="动静分离"><a href="#动静分离" class="headerlink" title="动静分离"></a>动静分离</h4><p>为了加快网站的解析速度,可以把动态页面和静态页面由不同的服务器来解析,加快解析速度,降低原来单个服务器的压力。<br>一般来说,都需要将动态资源和静态资源分开,由于 Nginx 的高并发和静态资源缓存等特性,经常将静态资源部署在 Nginx 上。如果请求的是静态资源,直接到静态资源目录获取资源,如果是动态资源的请求,则利用反向代理的原理,把请求转发给对应后台应用去处理,从而实现动静分离。<br>使用前后端分离后,可以很大程度提升静态资源的访问速度,即使动态服务不可用,静态资源的访问也不会受到影响。<br><img src="/image/DynamicAndStaticSeparation.png" alt="DynamicAndStaticSeparation"></p><h4 id="Master-Worker模式"><a href="#Master-Worker模式" class="headerlink" title="Master-Worker模式"></a>Master-Worker模式</h4><p>启动Nginx后，其实就是在80端口启动了Socket服务进行监听</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@service nginx]# ps -ef|grep nginx</span><br><span class="line">root     146987      1  0 11:18 ?        00:00:00 nginx: master process ./sbin/nginx</span><br><span class="line">nobody   152247 146987  0 14:55 ?        00:00:00 nginx: worker process</span><br></pre></td></tr></table></figure><p><strong>Master进程</strong>:<br>读取并验证配置文件nginx.conf,管理worker进程。1024以下的端口只有root用户可以使用</p><p><strong>Worker进程</strong>:<br>真正处理请求的进程,是以普通用户的身份进行运行的,这样就可以极大增加程序的安全性。就算是万一有一个进程被劫持，那也不会有管理员权限.注意Worker进程的个数由配置文件决定，一般和CPU个数相关（有利于进程切换），配置几个就有几个Worker进程。</p><p><strong>热部署原理</strong>:<br>修改配置文件nginx.conf后，重新加载，master进程会进行语法错误的判断。如果存在语法错误的话，返回错误，不进行装载，如果配置文件没有语法错误，那么ngnix也不会将新的配置调整到所有worker中。而是，先不改变已经建立连接的worker，等待worker将所有请求结束之后，将原先在旧的配置下启动的worker杀死，然后使用新的配置创建新的worker。</p><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>nginx 配置文件主要分成四部分：</p><p><code>main</code>(全局设置): 设置的指令影响其他所有部分的设置<br><code>server</code>(主机设置):主要用于制定虚拟主机域名 IP 和端口号<br><code>upstream</code>(上游服务器设置):设置一系列的后端服务器,设置反向代理及后端服务器的负载均衡<br><code>location</code>(URL匹配特定位置后的设置):用于匹配网页位置（比如,根目录“/”,“/images”,等等）。</p><p>他们之间的关系：server 继承 main,location 继承 server；upstream 既不会继承指令也不会被继承。</p><p>配置文件的语法规则：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.配置文件由指令与指令块构成；</span><br><span class="line">2.每条指令以 ; 分号结尾,指令与参数间以空格符号分隔；</span><br><span class="line">3.指令块以 &#123;&#125; 大括号将多条指令组织在一起；</span><br><span class="line">4.include 语句允许组合多个配置文件以提升可维护性；</span><br><span class="line">5.使用 # 符号添加注释,提高可读性；</span><br><span class="line">6.使用 $ 符号使用变量；</span><br><span class="line">7.部分指令的参数支持正则表达式；</span><br></pre></td></tr></table></figure><p>Nginx 的配置：</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment">#定义Nginx运行的用户和用户组</span></span><br><span class="line"><span class="attribute">user</span>  nginx; </span><br><span class="line"></span><br><span class="line"><span class="comment">#nginx进程数,通常设置成和cpu的数量相等,也可以设置为auto</span></span><br><span class="line"><span class="attribute">worker_processes</span>  <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#全局错误日志定义类型,[debug | info | notice | warn | error | crit]</span></span><br><span class="line"><span class="attribute">error_log</span>  /var/log/nginx/error.log;  </span><br><span class="line"><span class="comment">#error_log  /var/log/nginx/error.log  notice;</span></span><br><span class="line"><span class="comment">#error_log  /var/log/nginx/error.log  info;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#进程pid文件</span></span><br><span class="line"><span class="attribute">pid</span>        /run/nginx.pid;</span><br><span class="line"></span><br><span class="line"><span class="comment">#指定进程可以打开的最大描述符：数目</span></span><br><span class="line"><span class="comment">#工作模式与连接数上限</span></span><br><span class="line"><span class="comment">##这个指令是指当一个nginx进程打开的最多文件描述符数目,理论值应该是最多打开文件数（ulimit -n）与nginx进程数相除,但是nginx分配请求并不是那么均匀,所以最好与ulimit -n 的值保持一致。</span></span><br><span class="line"><span class="comment">#这是因为nginx调度时分配请求到进程并不是那么的均衡,所以假如填写10240,总并发量达到3-4万时就有进程可能超过10240了,这时会返回502错误。</span></span><br><span class="line"><span class="attribute">worker_rlimit_nofile</span> <span class="number">65535</span>;</span><br><span class="line"></span><br><span class="line"><span class="attribute">include</span> /etc/nginx/conf.modules.d/<span class="regexp">*.conf</span>;</span><br><span class="line"></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line"><span class="comment">#单个进程最大连接数（最大连接数=连接数+进程数） 默认为1024</span></span><br><span class="line"><span class="comment">#根据硬件调整,和前面工作进程配合起来用,尽量大,但是别把cup跑到100%就行。</span></span><br><span class="line">    <span class="attribute">worker_connections</span>  <span class="number">1024</span>;</span><br><span class="line"><span class="comment">#当连接数过大时可设置为worker_connections  51200;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#设定http服务器</span></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line"></span><br><span class="line"> <span class="comment"># 文件扩展名与类型映射表</span></span><br><span class="line">    <span class="attribute">include</span>       /etc/nginx/mime.types;</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 默认文件类型</span></span><br><span class="line">    <span class="attribute">default_type</span>  application/octet-stream;</span><br><span class="line">    </span><br><span class="line"><span class="comment">#nginx的日志格式</span></span><br><span class="line">    <span class="attribute">log_format</span>  main  <span class="string">'<span class="variable">$remote_addr</span> - <span class="variable">$remote_user</span> [<span class="variable">$time_local</span>] "<span class="variable">$request</span>" '</span></span><br><span class="line">                      <span class="string">'<span class="variable">$status</span> <span class="variable">$body_bytes_sent</span> "<span class="variable">$http_referer</span>" '</span></span><br><span class="line">                      <span class="string">'"<span class="variable">$http_user_agent</span>" "<span class="variable">$http_x_forwarded_for</span>"'</span>;</span><br><span class="line"><span class="comment"># Nginx访问日志存放位置</span></span><br><span class="line">    <span class="attribute">access_log</span>  /var/log/nginx/access.log  main;</span><br><span class="line"></span><br><span class="line"><span class="comment">#允许客户端请求的最大单文件字节数。如果有上传较大文件，请设置它的限制值</span></span><br><span class="line"><span class="attribute">client_max_body_size</span>             <span class="number">100m</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#缓冲区代理缓冲用户端请求的最大字节数</span></span><br><span class="line">    <span class="attribute">client_body_buffer_size</span>        <span class="number">10m</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#客户端向服务端发送一个完整的 request header 的超时时间</span></span><br><span class="line"><span class="attribute">client_header_timeout</span>     <span class="number">3m</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#客户端与服务端建立连接后发送 request body 的超时时间</span></span><br><span class="line"><span class="attribute">client_body_timeout</span> <span class="number">3m</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#服务端向客户端传输数据的超时时间</span></span><br><span class="line">    <span class="attribute">send_timeout</span>             <span class="number">3m</span>;</span><br><span class="line">    </span><br><span class="line"><span class="comment">#开启高效文件传输模式,sendfile指令指定nginx是否调用sendfile函数来输出文件,对于普通应用设为 on,如果用来进行下载等应用磁盘IO重负载应用,可设置为off,以平衡磁盘与网络I/O处理速度,降低系统的负载。注意：如果图片显示不正常把这个改 成off。</span></span><br><span class="line">    <span class="attribute">sendfile</span>        <span class="literal">on</span>;</span><br><span class="line">    </span><br><span class="line"><span class="comment">#防止网络阻塞</span></span><br><span class="line">    <span class="comment">#tcp_nopush     on;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#长连接超时时间,单位是秒</span></span><br><span class="line">    <span class="attribute">keepalive_timeout</span>  <span class="number">65</span>;</span><br><span class="line">    </span><br><span class="line"><span class="comment">#开启gzip压缩</span></span><br><span class="line">    <span class="comment">#gzip  on;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载子配置项</span></span><br><span class="line">    <span class="attribute">include</span> /etc/nginx/conf.d/<span class="regexp">*.conf</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">index</span>   index.html index.htm;</span><br><span class="line"></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;       <span class="comment">#监听端口，默认80，小于1024的要以root启动</span></span><br><span class="line">    <span class="attribute">server_name</span>  localhost;  <span class="comment">#服务器名，如localhost、http://www.example.com，可以通过正则匹配。</span></span><br><span class="line">    </span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">    <span class="attribute">root</span>   /usr/share/nginx/html;  <span class="comment"># 网站根目录</span></span><br><span class="line">    <span class="attribute">index</span>  index.html index.htm;   <span class="comment"># 默认首页文件</span></span><br><span class="line">    <span class="attribute">deny</span> <span class="number">172.168.22.11</span>;   <span class="comment"># 禁止访问的ip地址,可以为all</span></span><br><span class="line">    <span class="attribute">allow</span> <span class="number">172.168.33.44</span>； <span class="comment"># 允许访问的ip地址,可以为all</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    error_page <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span> /50x.html;  <span class="comment"># 默认50x对应的访问页面</span></span><br><span class="line">    <span class="attribute">error_page</span> <span class="number">400</span> <span class="number">404</span> <span class="literal">error</span>.html;   <span class="comment"># 同上</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>server 块可以包含多个 location 块,location 指令用于匹配 uri,语法：</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">location</span> [ = | <span class="regexp">~ |</span> <span class="regexp">~* |</span><span class="regexp"> ^~]</span> uri &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>指令后面：</p><p>1.<code>=</code>精确匹配路径,用于不含正则表达式的 uri 前,如果匹配成功,不再进行后续的查找；<br>2.<code>^<del></del></code>用于不含正则表达式的 uri； 前,表示如果该符号后面的字符是最佳匹配,采用该规则,不再进行后续的查找；<br>3.<code></code> 表示用该符号后面的正则去匹配路径,区分大小写；<br>4.<code>~*</code>表示用该符号后面的正则去匹配路径,不区分大小写。跟 ~ 优先级都比较低,如有多个location的正则能匹配的话,则使用正则表达式最长的那个；</p><p>如果 uri 包含正则表达式,则必须要有 ~ 或 ~* 标志。</p><h4 id="常用的全局变量"><a href="#常用的全局变量" class="headerlink" title="常用的全局变量"></a>常用的全局变量</h4><table><thead><tr><th>全局变量名</th><th>功能</th></tr></thead><tbody><tr><td>$host</td><td>请求信息中的 Host,如果请求中没有 Host 行,则等于设置的服务器名,不包含端口</td></tr><tr><td>$request_method</td><td>客户端请求类型,如 GET、POST</td></tr><tr><td>$remote_addr</td><td>客户端的 IP 地址</td></tr><tr><td>$args</td><td>请求中的参数</td></tr><tr><td>$arg_PARAMETER</td><td>GET 请求中变量名 PARAMETER 参数的值,例如：$http_user_agent(Uaer-Agent 值), $http_referer…</td></tr><tr><td>$content_length</td><td>请求头中的 Content-length 字段</td></tr><tr><td>$http_user_agent</td><td>客户端agent信息</td></tr><tr><td>$http_cookie</td><td>客户端cookie信息</td></tr><tr><td>$remote_addr</td><td>客户端的IP地址</td></tr><tr><td>$remote_port</td><td>客户端的端口</td></tr><tr><td>$http_user_agent</td><td>客户端agent信息</td></tr><tr><td>$server_protocol</td><td>请求使用的协议,如 HTTP/1.0、HTTP/1.1</td></tr><tr><td>$server_addr</td><td>服务器地址</td></tr><tr><td>$server_name</td><td>服务器名称</td></tr><tr><td>$server_port</td><td>服务器的端口号</td></tr><tr><td>$scheme</td><td>HTTP 方法（如http,https）</td></tr></tbody></table><h4 id="配置正向代理"><a href="#配置正向代理" class="headerlink" title="配置正向代理"></a>配置正向代理</h4><p>代理服务器:</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">resolver</span> <span class="number">8.8.8.8</span>;    <span class="comment"># 必需</span></span><br><span class="line">    <span class="attribute">resolver_timeout</span> <span class="number">5s</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 监听端口</span></span><br><span class="line">    <span class="attribute">listen</span> <span class="number">8088</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="comment"># 配置正向代理参数</span></span><br><span class="line">        <span class="attribute">proxy_pass</span> <span class="variable">$scheme</span>://<span class="variable">$host</span><span class="variable">$request_uri</span>;</span><br><span class="line">        <span class="comment"># 解决如果URL中带"."后Nginx 503错误</span></span><br><span class="line">        <span class="attribute">proxy_set_header</span> Host <span class="variable">$http_host</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>linux客户端</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">一次代理，直接在shell执行：</span><br><span class="line">export http_proxy=http://192.168.10.117:8088</span><br><span class="line"></span><br><span class="line">永久使用：</span><br><span class="line">vim .bashrc</span><br><span class="line">export http_proxy=http://192.168.10.117:8088</span><br><span class="line">source  .bashrc</span><br></pre></td></tr></table></figure><p>配置代理后,查看出口是否变为白名单ip</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export http_proxy=http://192.168.10.117:8088</span><br><span class="line">curl http://myip.ipip.net/</span><br><span class="line">当前 IP：119.130.113.243  来自于：中国 广东 广州  电信</span><br></pre></td></tr></table></figure><h4 id="配置反向代理"><a href="#配置反向代理" class="headerlink" title="配置反向代理"></a>配置反向代理</h4><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line">  <span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">linsten</span> <span class="number">80</span>;</span><br><span class="line">  <span class="attribute">server_name</span> localhost;</span><br><span class="line">    </span><br><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://myserver;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以将请求转发到另一个服务器上,也可以根据访问的路径跳转到不同端口的服务中。<br>比如我们监听 9001 端口,然后把访问不同路径的请求进行反向代理：</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment">#把访问 http://127.0.0.1:9001/a 的请求转发到 http://127.0.0.1:8080</span></span><br><span class="line"><span class="comment">#把访问 http://127.0.0.1:9001/b 的请求转发到 http://127.0.0.1:8081</span></span><br><span class="line"></span><br><span class="line">在 http 模块下增加一个 server 块：</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">listen</span> <span class="number">9001</span>;</span><br><span class="line">  <span class="attribute">server_name</span> localhost;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">location</span> /a/ &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://127.0.0.1:8080;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">location</span> /b/ &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://127.0.0.1:8081;</span><br><span class="line"><span class="comment">#proxy_set_header 客户端请求发送给后端服务器之前,更改来自客户端的请求头信息</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#把原请求的Header中的Host字段也放到转发里,如果不加后端获取的请求为nginx的IP</span></span><br><span class="line">    <span class="attribute">proxy_set_header</span>   Host    <span class="variable">$host</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#获得用户的真实ip</span></span><br><span class="line">    <span class="attribute">proxy_set_header</span>   X-Real-IP   <span class="variable">$remote_addr</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span>   X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#识别协议HTTP或HTTPS</span></span><br><span class="line">    <span class="attribute">proxy_set_header</span>   X-Forwarded-Proto <span class="variable">$scheme</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#配置Nginx与后端代理服务器尝试建立连接的超时时间</span></span><br><span class="line">    <span class="attribute">proxy_connect_timeout</span> <span class="number">300</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#连接成功后_等候后端服务器响应时间</span></span><br><span class="line"><span class="attribute">proxy_send_timeout</span> <span class="number">300</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#后端服务器数据回传时间</span></span><br><span class="line"><span class="attribute">proxy_read_timeout</span> <span class="number">300</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改后端服务器返回的响应头中的Location和Refresh</span></span><br><span class="line"><span class="attribute">proxy_redirect</span> <span class="literal">off</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="配置负载均衡"><a href="#配置负载均衡" class="headerlink" title="配置负载均衡"></a>配置负载均衡</h4><p>Nginx 提供了好几种分配方式,默认为轮询,就是轮流来。有以下几种分配方式：</p><p>1.轮询,默认方式,每个请求按时间顺序逐一分配到不同的后端服务器,如果后端服务挂了,能自动剔除；</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">  <span class="attribute">upstream</span> myserver &#123;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">127.0.0.1:8081</span>;  <span class="comment"># 负载均衡目的服务地址</span></span><br><span class="line">    <span class="attribute">server</span> <span class="number">127.0.0.1:8080</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">127.0.0.1</span>:8082p;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.weight,权重分配,指定轮询几率,权重越高,在被访问的概率越大,用于后端服务器性能不均的情况；</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">  <span class="attribute">upstream</span> myserver &#123;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">127.0.0.1:8081</span> weight=<span class="number">1</span>;  <span class="comment"># 负载均衡目的服务地址</span></span><br><span class="line">    <span class="attribute">server</span> <span class="number">127.0.0.1:8080</span> weight=<span class="number">1</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">127.0.0.1:8082</span> weight=<span class="number">10</span>;  <span class="comment"># weight 方式,不写默认为 1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.ip_hash,对客户端请求的ip进行hash操作,然后根据hash结果将同一个客户端ip的请求分发给同一台服务器进行处理,可以解决session不共享的问题。</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">  <span class="attribute">upstream</span> myserver &#123;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">127.0.0.1:8081</span>;  <span class="comment"># 负载均衡目的服务地址</span></span><br><span class="line">    <span class="attribute">server</span> <span class="number">127.0.0.1:8080</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">127.0.0.1:8082</span>;</span><br><span class="line">    ip_hash;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/image/iphash.png" alt="iphash"></p><p>4.fair（第三方）,按后端服务器的响应时间分配,响应时间短的优先分配,依赖第三方插件 nginx-upstream-fair,需要先安装；</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">  <span class="attribute">upstream</span> myserver &#123;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">127.0.0.1:8081</span>;  <span class="comment"># 负载均衡目的服务地址</span></span><br><span class="line">    <span class="attribute">server</span> <span class="number">127.0.0.1:8080</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">127.0.0.1:8082</span>;</span><br><span class="line">    fair;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.backup,携带backup代表此server为备用,nginx只有在转发到主server出现问题,才会切换到backup的server</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">  <span class="attribute">upstream</span> myserver &#123;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">127.0.0.1:8081</span>;  <span class="comment"># 负载均衡目的服务地址</span></span><br><span class="line">    <span class="attribute">server</span> <span class="number">127.0.0.1:8080</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">127.0.0.1:8082</span> backup;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>开启gzip</strong></p><p>gzip 是一种常用的网页压缩技术,传输的网页经过 gzip 压缩之后大小通常可以变为原来的一半甚至更小（官网原话）,更小的网页体积也就意味着带宽的节约和传输速度的提升,特别是对于访问量巨大大型网站来说,每一个静态资源体积的减小,都会带来可观的流量与带宽的节省。</p><p>使用 gzip 不仅需要 Nginx 配置,浏览器端也需要配合,需要在请求消息头中包含 Accept-Encoding: gzip（IE5 之后所有的浏览器都支持了,是现代浏览器的默认设置）。一般在请求 html 和 css 等静态资源的时候,支持的浏览器在 request 请求静态资源的时候,会加上 Accept-Encoding: gzip 这个 header,表示自己支持 gzip 的压缩方式,Nginx 在拿到这个请求的时候,如果有相应配置,就会返回经过 gzip 压缩过的文件给浏览器,并在 response 相应的时候加上 content-encoding: gzip 来告诉浏览器自己采用的压缩方式（因为浏览器在传给服务器的时候一般还告诉服务器自己支持好几种压缩方式）,浏览器拿到压缩的文件后,根据自己的解压方式进行解析。</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">gzip</span> <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#进行压缩的文件类型。javascript有多种形式。其中的值可以在 mime.types 文件中找到。</span></span><br><span class="line"><span class="attribute">gzip_types</span> text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;</span><br><span class="line"></span><br><span class="line"><span class="comment">#默认 off,该模块启用后,Nginx 首先检查是否存在请求静态文件的 gz 结尾的文件,如果有则直接返回该 .gz 文件内容;</span></span><br><span class="line"><span class="attribute">gzip_static</span> <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#默认 off,nginx做为反向代理时启用,用于设置启用或禁用从代理服务器上收到相应内容 gzip 压缩；</span></span><br><span class="line"><span class="attribute">gzip_proxied</span> any;</span><br><span class="line"></span><br><span class="line"><span class="comment">#用于在响应消息头中添加 Vary：Accept-Encoding,使代理服务器根据请求头中的 Accept-Encoding 识别是否启用 gzip 压缩</span></span><br><span class="line"><span class="attribute">gzip_vary</span> <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#gzip 压缩比,压缩级别是 1-9,1 压缩级别最低,9 最高,数字越大压缩的越好,也越占用CPU时间。一般设置1和2；</span></span><br><span class="line"><span class="attribute">gzip_comp_level</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取多少内存用于缓存压缩结果,4 8k 表示以 8k*4 为单位获得；</span></span><br><span class="line"><span class="attribute">gzip_buffers</span> <span class="number">4</span> <span class="number">8k</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#启用gzip压缩的最小文件,小于设置值的文件将不会压缩</span></span><br><span class="line"><span class="attribute">gzip_min_length</span> <span class="number">1k</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#默认 1.1,启用 gzip 所需的 HTTP 最低版本;这个配置可以插入到 http 模块整个服务器的配置里,也可以插入到需要使用的虚拟主机的 server 或者下面的 location 模块中</span></span><br><span class="line"><span class="attribute">gzip_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br></pre></td></tr></table></figure><h4 id="配置-HTTPS"><a href="#配置-HTTPS" class="headerlink" title="配置 HTTPS"></a>配置 HTTPS</h4><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">listen</span> <span class="number">443</span> ssl http2 default_server;   <span class="comment"># SSL 访问端口号为 443</span></span><br><span class="line">  <span class="attribute">server_name</span> www.nmk0718.com;         <span class="comment"># 填写绑定证书的域名</span></span><br><span class="line">  <span class="attribute">add_header</span> backendIP <span class="variable">$upstream_addr</span>;   <span class="comment">#把后端具体的 upstream 返回给前端 header</span></span><br><span class="line">  <span class="attribute">add_header</span> backendCode <span class="variable">$upstream_status</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">ssl_certificate</span> /etc/nginx/https/nm0718.crt;   <span class="comment"># 证书文件地址</span></span><br><span class="line">  <span class="attribute">ssl_certificate_key</span> /etc/nginx/https/nm0718.key;      <span class="comment"># 私钥文件地址</span></span><br><span class="line">  <span class="attribute">ssl_session_timeout</span> <span class="number">10m</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">ssl_protocols</span> TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span>;      <span class="comment">#请按照以下协议配置</span></span><br><span class="line">  <span class="attribute">ssl_ciphers</span> ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE; </span><br><span class="line">  <span class="attribute">ssl_prefer_server_ciphers</span> <span class="literal">on</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="attribute">location</span> / &#123;</span><br><span class="line">    <span class="attribute">root</span>         /usr/share/nginx/html;</span><br><span class="line">    <span class="attribute">index</span>        index.html index.htm;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="跨域-CORS-配置"><a href="#跨域-CORS-配置" class="headerlink" title="跨域 CORS 配置"></a>跨域 CORS 配置</h4><p><strong>使用反向代理解决跨域</strong></p><p>在前端服务地址为 <code>prod.nmk0718.com</code> 的页面请求 <code>api.nmk0718.com</code> 的后端服务导致的跨域，可以这样配置：</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line"></span><br><span class="line"><span class="attribute">server_name</span> prod.nmk0718.com;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line"></span><br><span class="line"><span class="attribute">proxy_pass</span> api.nmk0718.com;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样前端调用prod.nmk0718.com的接口会被转发后api.nmk0718.com,前后端都是prod.nmk0718.com的情况下就不存在跨域了</p><p><strong>配置 header 解决跨域</strong></p><p>在请求的接口location中加入以下配置进行解决跨域</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line"></span><br><span class="line"><span class="attribute">server_name</span> api.nmk0718.com;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line"></span><br><span class="line"><span class="attribute">proxy_pass</span> http://localhost:8081;</span><br><span class="line"></span><br><span class="line"><span class="comment">#接受所有跨域的请求</span></span><br><span class="line"><span class="attribute">add_header</span> Access-Control-Allow-Origin *;</span><br><span class="line"></span><br><span class="line"><span class="comment">#允许的请求方法</span></span><br><span class="line">    <span class="attribute">add_header</span> Access-Control-Allow-Methods <span class="string">'GET, POST, OPTIONS'</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#允许请求的header</span></span><br><span class="line">    <span class="attribute">add_header</span> Access-Control-Allow-Headers <span class="string">'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">if</span> (<span class="variable">$request_method</span> = <span class="string">'OPTIONS'</span>) &#123;</span><br><span class="line">        <span class="attribute">return</span> <span class="number">204</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="http请求转发到https"><a href="#http请求转发到https" class="headerlink" title="http请求转发到https"></a>http请求转发到https</h4><p>配置完 HTTPS 后，浏览器还是可以访问 HTTP 的地址的，可以做一个 301 跳转，把对应域名的 HTTP 请求重定向到 HTTPS 上</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"><span class="attribute">listen</span>   <span class="number">80</span>;</span><br><span class="line"><span class="attribute">servername</span> www.nmk0718.com;</span><br><span class="line"></span><br><span class="line"><span class="comment">#单域名重定向</span></span><br><span class="line">if ($host = 'www.nmk0718.com';)&#123;</span><br><span class="line"><span class="attribute">return</span> <span class="number">301</span> https://www.nmk0718.com<span class="variable">$request_uri</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#全局非 https 协议时重定向</span></span><br><span class="line">if ($scheme != 'https';)&#123;</span><br><span class="line"><span class="attribute">return</span> <span class="number">301</span> https://<span class="variable">$server_name</span><span class="variable">$request_uri</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#或者全部重定向</span></span><br><span class="line"><span class="attribute">return</span> <span class="number">301</span> https://<span class="variable">$server_name</span><span class="variable">$request_uri</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#以上配置选择自己需要的即可,不用全部加</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="转发websocket"><a href="#转发websocket" class="headerlink" title="转发websocket"></a>转发websocket</h4><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">map $http_upgrade $connection_upgrade &#123; default upgrade; '' close;&#125; </span><br><span class="line"><span class="section">server</span> &#123; </span><br><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line">    <span class="comment">#… </span></span><br><span class="line">    <span class="attribute">proxy_set_header</span> Upgrade <span class="variable">$http_upgrade</span>; </span><br><span class="line">    <span class="attribute">proxy_set_header</span> Connection <span class="variable">$connection_upgrade</span>; </span><br><span class="line">    &#125; </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="静态文件转发"><a href="#静态文件转发" class="headerlink" title="静态文件转发"></a>静态文件转发</h4><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment">#请求/web时访问的文件为/home/test/index.html</span></span><br><span class="line"><span class="attribute">location</span> /web &#123;</span><br><span class="line"><span class="attribute">alias</span> /home/test/;</span><br><span class="line"><span class="attribute">index</span> index.html;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#请求/web/时访问的文件为/home/web/index.html</span></span><br><span class="line"><span class="attribute">location</span> /web/ &#123;</span><br><span class="line"><span class="attribute">root</span> /home/;</span><br><span class="line"><span class="attribute">index</span> index.html;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">##Vue路由模式需要加入try_files</span></span><br><span class="line"><span class="attribute">location</span> /app &#123;</span><br><span class="line"><span class="attribute">alias</span> /home/test/app/;</span><br><span class="line"><span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html <span class="literal">last</span>;</span><br><span class="line"><span class="attribute">index</span> index.html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>静态文件缓存</strong><br>由于图片、字体、音频、视频等静态文件在打包的时候通常会增加了 hash，所以缓存可以设置的长一点，先设置强制缓存，再设置协商缓存；如果存在没有 hash 值的静态文件，建议不设置强制缓存，仅通过协商缓存判断是否需要使用缓存</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">location</span> <span class="regexp">~ .*\.(css|js|jpg|png|gif|swf|woff|woff2|eot|svg|ttf|otf|mp3|m4a|aac|txt)$</span> &#123;</span><br><span class="line"><span class="attribute">expires</span> <span class="number">10d</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 如果不希望缓存</span></span><br><span class="line"><span class="attribute">expires</span> -<span class="number">1</span>;</span><br></pre></td></tr></table></figure><h4 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h4><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment">#转发 域名/api/后的任意字符 到 https://www.nmk0718.com/api/后面</span></span><br><span class="line"><span class="attribute">rewrite</span><span class="regexp"> ^/api/(.*)</span>    https://www.nmk0718.com/api/<span class="variable">$1</span> <span class="literal">permanent</span>;</span><br><span class="line">例如访问 test.nmk0718/api/abc 转发到 https://www.nmk0718.com/api/abc</span><br><span class="line"></span><br><span class="line"><span class="comment">#转发 域名/nmk0718/index后的任意字符 到error.jpg</span></span><br><span class="line"><span class="attribute">rewrite</span><span class="regexp"> ^/nmk0718/index(.*)</span> http://nmk0718.com/error.jpg;</span><br><span class="line"></span><br><span class="line"><span class="comment">#转发 域名/nmk0718/index后字符跟systemId和&amp;shops匹配的链接 到error.jpg(因nginx不支持and故使用set参数的方式进行转发)</span></span><br><span class="line"><span class="attribute">location</span><span class="regexp"> ^~/nmk0718/index</span> &#123;</span><br><span class="line">        </span><br><span class="line"><span class="attribute">set</span> <span class="variable">$foo</span> <span class="string">""</span>;</span><br><span class="line"><span class="attribute">if</span> (<span class="variable">$args</span> <span class="regexp">~* "systemId=202006117621654047")</span> &#123;</span><br><span class="line"><span class="attribute">set</span> <span class="variable">$foo</span> <span class="string">"<span class="variable">$&#123;foo&#125;</span>1"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="attribute">if</span> (<span class="variable">$args</span> <span class="regexp">~* "&amp;shops=102")</span> &#123;</span><br><span class="line"><span class="attribute">set</span> <span class="variable">$foo</span> <span class="string">"<span class="variable">$&#123;foo&#125;</span>1"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="attribute">if</span> (<span class="variable">$foo</span> <span class="regexp">~* "11")</span> &#123;</span><br><span class="line"><span class="attribute">rewrite</span>  /nmk0718/index    http://nmk0718.com/error.jpg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="attribute">root</span>   html;</span><br><span class="line"><span class="comment">#定义首页索引文件的名称</span></span><br><span class="line"><span class="attribute">index</span>  index.html index.htm index.jsp;</span><br><span class="line"><span class="comment">#定义后端负载服务器组</span></span><br><span class="line"><span class="attribute">proxy_pass</span> http://nmk/nmk0718/index;</span><br><span class="line"><span class="attribute">proxy_set_header</span>   Host    <span class="variable">$host</span>;  </span><br><span class="line"><span class="attribute">proxy_set_header</span>   X-Real-IP   <span class="variable">$remote_addr</span>;  </span><br><span class="line"><span class="attribute">proxy_set_header</span>   X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="操作命令"><a href="#操作命令" class="headerlink" title="操作命令"></a>操作命令</h4><p>使用nginx -h 查看完整的nginx命令</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@deployment nginx]# ./sbin/nginx -h</span><br><span class="line">nginx version: nginx/1.16.0</span><br><span class="line">Usage: nginx [-?hvVtTq] [-s signal] [-c filename] [-p prefix] [-g directives]</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -?,-h         : this help</span><br><span class="line">  -v            : show version and exit</span><br><span class="line">  -V            : show version and configure options then exit</span><br><span class="line">  -t            : test configuration and exit</span><br><span class="line">  -T            : test configuration, dump it and exit</span><br><span class="line">  -q            : suppress non-error messages during configuration testing</span><br><span class="line">  -s signal     : send signal to a master process: stop, quit, reopen, reload</span><br><span class="line">  -p prefix     : set prefix path (default: /usr/local/nginx/)</span><br><span class="line">  -c filename   : set configuration file (default: conf/nginx.conf)</span><br><span class="line">  -g directives : set global directives out of configuration file</span><br><span class="line">  </span><br><span class="line"><span class="meta">#</span><span class="bash">nginx命令参数</span></span><br><span class="line">-c &lt;/path/to/config&gt; 为 Nginx 指定一个配置文件,来代替缺省的。</span><br><span class="line">-t 如需检查配置文件的语法的正确性</span><br><span class="line">-v 显示 nginx 的版本</span><br><span class="line">-V 显示 nginx 的版本,编译器版本和配置参数(可查看nginx使用的模块)。</span><br><span class="line">-s reload  # 向主进程发送信号,重新加载配置文件</span><br><span class="line">-s reopen # 重启 Nginx</span><br><span class="line">-s stop    # 快速关闭</span><br><span class="line">-s quit    # 等待工作进程处理完成后关闭</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">---windows下nginx命令---</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">查看nginx进程</span></span><br><span class="line">tasklist /fi "imagename eq nginx.exe"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">强制结束所有nginx进程</span></span><br><span class="line">taskkill /F /IM nginx.exe</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">---linux下nginx命令---</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">使用yum安装的目录</span></span><br><span class="line">/etc/nginx</span><br><span class="line"><span class="meta">#</span><span class="bash">自己编译或包安装的目录</span></span><br><span class="line">/usr/local/nginx</span><br><span class="line"><span class="meta">#</span><span class="bash">如果两种都没找到nginx使用以下命令可查看到目录</span></span><br><span class="line"><span class="meta">#</span><span class="bash">centos7之前</span></span><br><span class="line">service nginx status</span><br><span class="line"><span class="meta">#</span><span class="bash">centos7之后</span></span><br><span class="line">systemctl status nginx</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">查看nginx进程</span></span><br><span class="line">ps -ef|grep nginx</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">强制结束所有nginx进程</span></span><br><span class="line">killalll nginx</span><br></pre></td></tr></table></figure><h4 id="proxy-pass中url末尾带-与不带-的区别"><a href="#proxy-pass中url末尾带-与不带-的区别" class="headerlink" title="proxy_pass中url末尾带/与不带/的区别"></a>proxy_pass中url末尾带/与不带/的区别</h4><p><strong>proxy_pass配置中url末尾带/时，nginx转发时，会将原uri去除location匹配表达式后的内容拼接在proxy_pass中url之后。</strong></p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">测试地址:http://192.168.171.129/test/tes.jsp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">场景一:</span><br><span class="line"></span><br><span class="line"><span class="attribute">location</span><span class="regexp"> ^~</span> /test/ &#123;</span><br><span class="line"></span><br><span class="line"><span class="attribute">proxy_pass</span> http://192.168.171.129:8080/server/;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">代理后实际访问地址: http://192.168.171.129:8080/server/tes.jsp</span><br><span class="line"></span><br><span class="line">场景二:</span><br><span class="line"></span><br><span class="line"><span class="attribute">location</span><span class="regexp"> ^~</span> /test &#123;</span><br><span class="line"></span><br><span class="line"><span class="attribute">proxy_pass</span> http://192.168.171.129:8080/server/;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">代理后实际访问地址: http://192.168.171.129:8080/server//tes.jsp</span><br><span class="line"></span><br><span class="line">场景三:</span><br><span class="line"></span><br><span class="line"><span class="attribute">location</span><span class="regexp"> ^~</span> /test/ &#123;</span><br><span class="line"></span><br><span class="line"><span class="attribute">proxy_pass</span> http://192.168.171.129:8080/;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">代理后实际访问地址: http://192.168.171.129:8080/tes.jsp</span><br><span class="line"></span><br><span class="line">场景四:</span><br><span class="line"></span><br><span class="line"><span class="attribute">location</span><span class="regexp"> ^~</span> /test &#123;</span><br><span class="line"></span><br><span class="line"><span class="attribute">proxy_pass</span> http://192.168.171.129:8080/;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">代理后实际访问地址: http://192.168.171.129:8080//tes.jsp</span><br></pre></td></tr></table></figure><p><strong>proxy_pass配置中url末尾不带/时，如url中不包含path，则直接将原uri拼接在proxy_pass中url之后；如url中包含path，则将原uri去除location匹配表达式后的内容拼接在proxy_pass中的url之后。</strong></p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">测试地址:http://192.168.171.129/test/tes.jsp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">场景一:</span><br><span class="line"></span><br><span class="line"><span class="attribute">location</span><span class="regexp"> ^~</span> /test/ &#123;</span><br><span class="line"></span><br><span class="line"><span class="attribute">proxy_pass</span> http://192.168.171.129:8080/server;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">代理后实际访问地址: http://192.168.171.129:8080/servertes.jsp</span><br><span class="line"></span><br><span class="line">场景二:</span><br><span class="line"></span><br><span class="line"><span class="attribute">location</span><span class="regexp"> ^~</span> /test &#123;</span><br><span class="line"></span><br><span class="line"><span class="attribute">proxy_pass</span> http://192.168.171.129:8080/server;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">代理后实际访问地址: http://192.168.171.129:8080/server/tes.jsp</span><br><span class="line"></span><br><span class="line">场景三:</span><br><span class="line"></span><br><span class="line"><span class="attribute">location</span><span class="regexp"> ^~</span> /test/ &#123;</span><br><span class="line"></span><br><span class="line"><span class="attribute">proxy_pass</span> http://192.168.171.129:8080;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">代理后实际访问地址: http://192.168.171.129:8080/test/tes.jsp</span><br><span class="line"></span><br><span class="line">场景四:</span><br><span class="line"></span><br><span class="line"><span class="attribute">location</span><span class="regexp"> ^~</span> /test &#123;</span><br><span class="line"></span><br><span class="line"><span class="attribute">proxy_pass</span> http://192.168.171.129:8080;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">代理后实际访问地址: http://192.168.171.129:8080/test/tes.jsp</span><br></pre></td></tr></table></figure><h4 id="适配-PC-或移动设备"><a href="#适配-PC-或移动设备" class="headerlink" title="适配 PC 或移动设备"></a>适配 PC 或移动设备</h4><p>根据用户设备不同返回不同样式的站点，以前经常使用的是纯前端的自适应布局，但无论是复杂性和易用性上面还是不如分开编写的好，比如我们常见的淘宝、京东……这些大型网站就都没有采用自适应，而是用分开制作的方式，根据用户请求的 user-agent 来判断是返回 PC 还是 H5 站点。<br>使用<code>$http_user_agent</code> 全局变量来判断用户请求的 <code>user-agent</code>，指向不同的 root 路径，返回对应站点。</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line"></span><br><span class="line"><span class="attribute">server_name</span> www.nmk0718.com;</span><br><span class="line"></span><br><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line"></span><br><span class="line"><span class="attribute">root</span> /usr/share/nginx/html/pc;</span><br><span class="line"></span><br><span class="line"><span class="attribute">if</span> (<span class="variable">$http_user_agent</span> <span class="regexp">~* '(Android|webOS|iPhone|iPod|BlackBerry)')</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="attribute">root</span> /usr/share/nginx/html/mobile;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="attribute">index</span> index.html;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="泛域名转发"><a href="#泛域名转发" class="headerlink" title="泛域名转发"></a>泛域名转发</h4><h5 id="正则匹配"><a href="#正则匹配" class="headerlink" title="正则匹配"></a>正则匹配</h5><p>实现效果：把二级或者三级域名链接重写到我们希望的路径,让后端就可以根据路由解析不同的规则：</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line">test1.nmk0718.com/api?name=a 自动转发到 127.0.0.1:8080/test1/api?name=a；</span><br><span class="line">test2.nmk0718.com/api?name=a 自动转发到 127.0.0.1:8080/test2/api?name=a ；</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> ~^([\w-]+)\.nmk0718\.com$;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_set_header</span>        X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span>        X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span>        Host <span class="variable">$http_host</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span>        X-NginX-Proxy <span class="literal">true</span>;</span><br><span class="line">        <span class="attribute">proxy_pass</span>              http://127.0.0.1:8080/<span class="variable">$1</span><span class="variable">$request_uri</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="通配符匹配"><a href="#通配符匹配" class="headerlink" title="通配符匹配"></a>通配符匹配</h5><p>实现效果：国内机器想访问谷歌接口，在能访问到外网的机器内部署nginx转发该访问</p><p>在http层增加配置dns解析</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">http</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment"># 定义DNS解析器</span></span><br><span class="line">    <span class="attribute">resolver</span> <span class="number">8.8.8.8</span> <span class="number">8.8.4.4</span> valid=<span class="number">300s</span>; <span class="comment"># 使用Google的公共DNS服务器</span></span><br><span class="line">    <span class="attribute">resolver_timeout</span> <span class="number">10s</span>; <span class="comment"># 设置DNS解析超时时间为10秒</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在conf文件中配置google的泛域名转发</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> <span class="regexp">*.google.com</span>;</span><br><span class="line">    <span class="attribute">index</span> index.html;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> https://<span class="variable">$host</span>;</span><br><span class="line">        <span class="attribute">proxy_read_timeout</span> <span class="number">300</span>;</span><br><span class="line">        <span class="attribute">proxy_connect_timeout</span> <span class="number">300</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span>   X-Forwarded-Proto <span class="variable">$scheme</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span>   Host              <span class="variable">$host</span>:<span class="variable">$server_port</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span>   X-Forwarded-For   <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span>   X-Requested-With  XMLHttpRequest;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置后,本地需要访问什么域名，就需要绑定一个host</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#nginx机器ip google域名</span></span><br><span class="line">1.1.1.1 www.google.com</span><br><span class="line">2.2.2.2 mail.google.com</span><br></pre></td></tr></table></figure><p>访问<a href="http://www.google.com" target="_blank" rel="noopener">http://www.google.com</a> 和 <a href="http://mail.google.com" target="_blank" rel="noopener">http://mail.google.com</a> 的接口都可转发<br>如需集群内使用，可配置k8s的coredns配合使用</p><h5 id="server-name与host匹配优先级："><a href="#server-name与host匹配优先级：" class="headerlink" title="server_name与host匹配优先级："></a>server_name与host匹配优先级：</h5><ol><li><p>完全匹配</p></li><li><p>通配符在前的，如*.test.com</p></li><li><p>在后的，如<a href="http://www.test" target="_blank" rel="noopener">www.test</a>.*</p></li><li><p>正则匹配，如~^.www.test.com$</p></li></ol><p>如果都不匹配</p><ol><li><p>优先选择listen配置项后有default或default_server的</p></li><li><p>找到匹配listen端口的第一个server块</p></li></ol><h4 id="泛域名路径分离"><a href="#泛域名路径分离" class="headerlink" title="泛域名路径分离"></a>泛域名路径分离</h4><p>这是一个非常实用的技能,经常有时候我们可能需要配置一些二级或者三级域名,希望通过 Nginx 自动指向对应目录,比如：</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line">test1.nmk0718.com 自动指向 /usr/share/nginx/html/test1 服务器地址；</span><br><span class="line">test2.nmk0718.com 自动指向 /usr/share/nginx/html/test2 服务器地址；</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  ~^([\w-]+)\.nmk0718\.com$;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">root</span> /usr/share/nginx/html/<span class="variable">$1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1.为了使 Nginx 配置更易于维护,建议为每个服务创建一个单独的配置文件,存储在 /etc/nginx/conf/website 目录,根据需求可以创建任意多个独立的配置文件。<br>2.独立的配置文件,建议遵循以下命名约定 &lt;服务&gt;.conf,比如域名是www. nmk0718.com”,那么你的配置文件的应该是这样的./etc/nginx/conf/website/www. nmk0718.com.conf,如果部署多个服务,也可以在文件名中加上 Nginx 转发的端口号。<br>3.Nginx 日志相关目录,内以 域名.type.log 命名（比如www. nmk0718.com.access.log 和 www. nmk0718.com.error.log ）位于 /var/log/nginx/ 目录中,为每个独立的服务配置不同的访问权限和错误日志文件,这样查找错误时,会更加方便快捷。<br>日志相关目录,内以 域名.type.log 命名（比如 www. nmk0718.com.access.log 和 www. nmk0718.com.error.log ）位于 /var/log/nginx/ 目录中,为每个独立的服务配置不同的访问权限和错误日志文件,这样查找错误时,会更加方便快捷。</p><h4 id="转发物理机-容器流量10-1"><a href="#转发物理机-容器流量10-1" class="headerlink" title="转发物理机:容器流量10:1"></a>转发物理机:容器流量10:1</h4><p>转发思路:user&gt;master-nginx&gt;upstream&gt;slave-nginx或ingress</p><p>最后效果:用户访问域名,域名进入nginx的upstream 10次有1次进入ingress转发给容器,另外就此转发给slave-nginx,再转给物理机</p><p>master-nginx</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment">#物理机双节点</span></span><br><span class="line"><span class="attribute">upstream</span> nmk&#123;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">172.17.53.153:19151</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">172.17.53.154:19151</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> 改为</span><br><span class="line"><span class="comment">#148为slave-nginx的ip,172为ingress的ip</span></span><br><span class="line"><span class="attribute">upstream</span> nmkhttp &#123;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">172.17.53.148:80</span> weight=<span class="number">10</span> fail_timeout=<span class="number">10</span>;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">172.17.53.172:80</span> weight=<span class="number">1</span> fail_timeout=<span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="attribute">upstream</span> nmkhttps &#123;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">172.17.53.148:443</span> weight=<span class="number">10</span> fail_timeout=<span class="number">10</span>;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">172.17.53.172:443</span> weight=<span class="number">1</span> fail_timeout=<span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">80</span> default;</span><br><span class="line"><span class="attribute">server_name</span>  www.nmk0718.com</span><br><span class="line"></span><br><span class="line">location /nmk &#123;</span><br><span class="line"><span class="attribute">root</span>   html;</span><br><span class="line"><span class="comment">#定义首页索引文件的名称</span></span><br><span class="line"><span class="attribute">index</span>  index.html index.htm index.jsp;</span><br><span class="line"><span class="comment">#定义后端负载服务器组</span></span><br><span class="line"><span class="attribute">proxy_pass</span> http://nmkhttp;</span><br><span class="line"><span class="attribute">proxy_set_header</span>   Host   <span class="variable">$host</span>:<span class="variable">$server_port</span>;  </span><br><span class="line"><span class="attribute">proxy_set_header</span>   X-Real-IP   <span class="variable">$remote_addr</span>;  </span><br><span class="line"><span class="attribute">proxy_set_header</span>   X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">            <span class="attribute">listen</span> <span class="number">443</span> ssl;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">8443</span> ssl;</span><br><span class="line">            <span class="attribute">server_name</span> www.nmk0718.com</span><br><span class="line"></span><br><span class="line">location /nmk &#123;</span><br><span class="line"><span class="attribute">root</span>   html;</span><br><span class="line"><span class="comment">#定义首页索引文件的名称</span></span><br><span class="line"><span class="attribute">index</span>  index.html index.htm index.jsp;</span><br><span class="line"><span class="comment">#定义后端负载服务器组</span></span><br><span class="line"><span class="attribute">proxy_pass</span> https://nmkhttps;</span><br><span class="line"><span class="attribute">proxy_set_header</span>   Host   <span class="variable">$host</span>:<span class="variable">$server_port</span>;  </span><br><span class="line"><span class="attribute">proxy_set_header</span>   X-Real-IP   <span class="variable">$remote_addr</span>;  </span><br><span class="line"><span class="attribute">proxy_set_header</span>   X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>slave-nginx</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">upstream</span> nmk&#123;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">172.17.53.153:19151</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">172.17.53.154:19151</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">80</span> default;</span><br><span class="line"><span class="attribute">server_name</span>  www.nmk0718.com</span><br><span class="line"></span><br><span class="line">location /nmk &#123;</span><br><span class="line"><span class="attribute">root</span>   html;</span><br><span class="line"><span class="comment">#定义首页索引文件的名称</span></span><br><span class="line"><span class="attribute">index</span>  index.html index.htm index.jsp;</span><br><span class="line"><span class="comment">#定义后端负载服务器组</span></span><br><span class="line"><span class="attribute">proxy_pass</span> http://nmk;</span><br><span class="line"><span class="attribute">proxy_set_header</span>   Host   <span class="variable">$host</span>:<span class="variable">$server_port</span>;  </span><br><span class="line"><span class="attribute">proxy_set_header</span>   X-Real-IP   <span class="variable">$remote_addr</span>;  </span><br><span class="line"><span class="attribute">proxy_set_header</span>   X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="后端健康检查"><a href="#后端健康检查" class="headerlink" title="后端健康检查"></a>后端健康检查</h4><p>nginx自带健康检查的缺陷：</p><ol><li>Nginx只有当有访问时后，才发起对后端节点探测。</li><li>如果本次请求中，节点正好出现故障，Nginx依然将请求转交给故障的节点,然后再转交给健康的节点处理。所以不会影响到这次请求的正常进行。但是会影响效率,因为多了一次转发</li><li>自带模块无法做到预警</li><li>被动健康检查</li></ol><p>使用第三访模块nginx_upstream_check_module：</p><ol><li>区别于nginx自带的非主动式的心跳检测，淘宝开发的tengine自带了一个提供主动式后端服务器心跳检测模块</li><li>若健康检查包类型为http，在开启健康检查功能后，nginx会根据设置的间隔向指定的后端服务器端口发送健康检查包，并根据期望的HTTP回复状态码来判断服务是否健康。</li><li>后端真实节点不可用，则请求不会转发到故障节点</li><li>故障节点恢复后，请求正常转发</li></ol><p>主动地健康检查，nignx定时主动地去ping后端的服务列表，当发现某服务出现异常时，把该服务从健康列表中移除，当发现某服务恢复时，又能够将该服务加回健康列表中。淘宝有一个开源的实现nginx_upstream_check_module模块</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">github地址：https://github.com/yaoweibin/nginx_upstream_check_module</span><br><span class="line">taobao官网：http://tengine.taobao.org/document_cn/http_upstream_check_cn.html</span><br></pre></td></tr></table></figure><p>安装nginx_upstream_check_module </p><p>安装扩展模块，需要编译安装的nginx，版本自己选择</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">获取安装包</span></span><br><span class="line">wget https://codeload.github.com/yaoweibin/nginx_upstream_check_module/zip/master</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">给nginx打补丁</span></span><br><span class="line">unzip master</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">进入nginx-1.16.1，进行打该模块的补丁</span></span><br><span class="line">yum install patch-2.7.1-12.el7_7.x86_64 -y</span><br><span class="line">patch -p1 &lt; ../nginx_upstream_check_module-master/check_1.16.1+.patch</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">编译安装</span></span><br><span class="line">./configure --prefix=/usr/local/nginx --add-module=/usr/local/nginx_upstream_check_module-master/</span><br><span class="line"></span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"></span><br><span class="line">make upgrade</span><br><span class="line"></span><br><span class="line">[root@service nginx]# ./sbin/nginx -V</span><br><span class="line">nginx version: nginx/1.16.1</span><br><span class="line">built by gcc 4.8.5 20150623 (Red Hat 4.8.5-44) (GCC) </span><br><span class="line">configure arguments: --prefix=/usr/local/nginx --add-module=/usr/local/nginx_upstream_check_module-master/</span><br></pre></td></tr></table></figure><p>服务治理的一个重要任务是感知服务节点变更，完成服务自动注册及异常节点的自动摘除。这就需要服务治理平台能够：<code>及时</code>、<code>准确</code>的感知service节点的健康状况。</p><p>Nginx 提供了三种HTTP服务健康检查方案供用户选择：</p><ol><li>TCP层默认检查方案：<br>定时与后端服务建立一条<code>tcp连接</code>，链接建立成功则认为服务节点是健康的。</li><li>HTTP层默认检查方案：<br>TCP层检查有一定的局限性：<ol><li>很多HTTP服务是带状态的，端口处于listen状态并不能代表服务已经完成预热；</li><li>不能真实反映服务内部处理逻辑是否产生拥堵。</li><li>这时可以选择<code>http层</code>健康检查，会向服务发送一个http请求<code>GET / HTTP/1.0\r\n\r\n</code>，返回状态是2xx或3xx时认为后端服务正常。</li></ol></li><li>自定义方案：（nginx_upstream_check_module模块）<br>可根据下文描述自定义检查方案。</li></ol><h5 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h5><blockquote><p>Syntax: <strong>check</strong> <code>interval=milliseconds [fall=count] [rise=count] [timeout=milliseconds] [default_down=true|false] [type=tcp|http|ssl_hello|mysql|ajp] [port=check_port]</code><br>Default: 如果没有配置参数，默认值是：<code>interval=30000 fall=5 rise=2 timeout=1000 default_down=true type=tcp</code><br>Context: <code>upstream</code></p></blockquote><p>指令后面的参数意义是：</p><ul><li><code>interval</code>：向后端发送的健康检查包的间隔。</li><li><code>fall</code>(fall_count): 如果连续失败次数达到fall_count，服务器就被认为是down。</li><li><code>rise</code>(rise_count): 如果连续成功次数达到rise_count，服务器就被认为是up。</li><li><code>timeout</code>: 后端健康请求的超时时间。</li><li><code>default_down</code>: 设定初始时服务器的状态，如果是true，就说明默认是down的，如果是false，就是up的。默认值是true，也就是一开始服务器认为是不可用，要等健康检查包达到一定成功次数以后才会被认为是健康的。</li><li><code>type</code>：健康检查包的类型，现在支持以下多种类型<ul><li><code>tcp</code>：简单的tcp连接，如果连接成功，就说明后端正常。</li><li><code>ssl_hello</code>：发送一个初始的SSL hello包并接受服务器的SSL hello包。</li><li><code>http</code>：发送HTTP请求，通过后端的回复包的状态来判断后端是否存活。</li><li><code>mysql</code>: 向mysql服务器连接，通过接收服务器的greeting包来判断后端是否存活。</li><li><code>ajp</code>：向后端发送AJP协议的Cping包，通过接收Cpong包来判断后端是否存活。</li></ul></li><li><code>port</code>: 指定后端服务器的检查端口。你可以指定不同于真实服务的后端服务器的端口，比如后端提供的是443端口的应用，你可以去检查80端口的状态来判断后端健康状况。默认是0，表示跟后端server提供真实服务的端口一样。该选项出现于Tengine-1.4.0。</li></ul><blockquote><p>Syntax: <strong>check_http_expect_alive</strong> <code>[ http_2xx | http_3xx | http_4xx | http_5xx ]</code><br>Default: <code>http_2xx | http_3xx</code><br>Context: <code>upstream</code></p></blockquote><p>该指令指定HTTP回复的成功状态，默认认为2XX和3XX的状态是健康的。</p><blockquote><p>Syntax: <strong>check_http_send</strong> <code>http_packet</code><br>Default: <code>&quot;GET / HTTP/1.0\r\n\r\n&quot;</code><br>Context: <code>upstream</code></p></blockquote><p>该指令可以配置http健康检查包发送的请求内容。为了减少传输数据量，推荐采用<code>&quot;HEAD&quot;</code>方法。</p><p>当采用长连接进行健康检查时，需在该指令中添加keep-alive请求头，如：<code>&quot;HEAD / HTTP/1.1\r\nConnection: keep-alive\r\n\r\n&quot;</code>。<br>同时，在采用<code>&quot;GET&quot;</code>方法的情况下，请求uri的size不宜过大，确保可以在1个<code>interval</code>内传输完成，否则会被健康检查模块视为后端服务器或网络异常。</p><p>完整参数配置:<br><a href="http://tengine.taobao.org/document_cn/http_upstream_check_cn.html" target="_blank" rel="noopener">http://tengine.taobao.org/document_cn/http_upstream_check_cn.html</a></p><p>官方示例：</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">upstream</span> cluster1 &#123;</span><br><span class="line">        <span class="comment"># simple round-robin</span></span><br><span class="line">        <span class="attribute">server</span> <span class="number">192.168.0.1:80</span>;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">192.168.0.2:80</span>;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">check</span> interval=<span class="number">3000</span> rise=<span class="number">2</span> fall=<span class="number">5</span> timeout=<span class="number">1000</span> type=http;</span><br><span class="line">        <span class="attribute">check_http_send</span> <span class="string">"HEAD / HTTP/1.0\r\n\r\n"</span>;</span><br><span class="line">        <span class="attribute">check_http_expect_alive</span> http_2xx http_3xx;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">upstream</span> cluster2 &#123;</span><br><span class="line">        <span class="comment"># simple round-robin</span></span><br><span class="line">        <span class="attribute">server</span> <span class="number">192.168.0.3:80</span>;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">192.168.0.4:80</span>;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">check</span> interval=<span class="number">3000</span> rise=<span class="number">2</span> fall=<span class="number">5</span> timeout=<span class="number">1000</span> type=http;</span><br><span class="line">        <span class="attribute">check_keepalive_requests</span> <span class="number">100</span>;</span><br><span class="line">        <span class="attribute">check_http_send</span> <span class="string">"HEAD / HTTP/1.1\r\nConnection: keep-alive\r\n\r\n"</span>;</span><br><span class="line">        <span class="attribute">check_http_expect_alive</span> http_2xx http_3xx;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> /<span class="number">1</span> &#123;</span><br><span class="line">            <span class="attribute">proxy_pass</span> http://cluster1;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> /<span class="number">2</span> &#123;</span><br><span class="line">            <span class="attribute">proxy_pass</span> http://cluster2;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> /status &#123;</span><br><span class="line">            check_status;</span><br><span class="line"></span><br><span class="line">            <span class="attribute">access_log</span>   <span class="literal">off</span>;</span><br><span class="line">            <span class="attribute">allow</span> SOME.IP.ADD.RESS;</span><br><span class="line">            <span class="attribute">deny</span> all;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用demo:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">upstream apiservice&#123;</span><br><span class="line">    server 192.168.50.55:8087;</span><br><span class="line"></span><br><span class="line">    #对http主动检测，2XX,3XX为up,4XX,5xx为down</span><br><span class="line">    check interval=3000 rise=2 fall=5 timeout=1000 type=http;</span><br><span class="line">    check_http_send &quot;HEAD /health/check HTTP/1.0\r\n\r\n&quot;;</span><br><span class="line">    check_http_expect_alive http_2xx http_3xx;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    #charset koi8-r;</span><br><span class="line"></span><br><span class="line">    #access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line">    location /check-status &#123;</span><br><span class="line">    check_status;</span><br><span class="line">    &#125;</span><br><span class="line">    location /doctor-api/ &#123;</span><br><span class="line">            proxy_pass http://apiservice;</span><br><span class="line">            proxy_set_header   Host    $host;</span><br><span class="line">            proxy_set_header   X-Real-IP   $remote_addr;</span><br><span class="line">            proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">            proxy_set_header   X-Forwarded-Proto $scheme;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>访问健康检测的页面<br><img src="/image/check_up.png" alt="check_up"><br>可看到服务为up,把服务下线后再次查看<br><img src="/image/check_down.png" alt="check_down"><br>服务为down,此时后端服务已下线</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server number是后端服务器的数量</span><br><span class="line">Index是服务器的索引 </span><br><span class="line">Upstream是在配置中upstream的名称 </span><br><span class="line">Name是服务器IP </span><br><span class="line">Status是服务器的状态 </span><br><span class="line">Rise counts是服务器连续检查成功的次数 </span><br><span class="line">Fall counts是连续检查失败的次数 </span><br><span class="line">Check type是检查的方式 </span><br><span class="line">Check port是后端专门为健康检查设置的端口</span><br></pre></td></tr></table></figure><h4 id="四层负载均衡"><a href="#四层负载均衡" class="headerlink" title="四层负载均衡"></a>四层负载均衡</h4><p>七层负载均衡：只识别域名，是http层。</p><p>四层负载均衡：不识别域名，是tcp层，类似于端口转发。</p><p>可用于ftp,sftp,database等端口的转发</p><p>查看当前模块</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@service nginx]# ./sbin/nginx -V</span><br><span class="line">nginx version: nginx/1.16.1</span><br><span class="line">built by gcc 4.8.5 20150623 (Red Hat 4.8.5-44) (GCC) </span><br><span class="line">configure arguments: --prefix=/usr/local/nginx --add-module=/usr/local/nginx_upstream_check_module-master/</span><br></pre></td></tr></table></figure><p>进入源码目录,重新编译</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/nginx-1.16.1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">在当前模块命令后添加--with-stream</span></span><br><span class="line">./configure --prefix=/usr/local/nginx --add-module=/usr/local/nginx_upstream_check_module-master/ --with-stream</span><br><span class="line"></span><br><span class="line">make &amp; make install</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">再次查看添加模块是否成功</span></span><br><span class="line">[root@service nginx]# ./sbin/nginx -V</span><br><span class="line">nginx version: nginx/1.16.1</span><br><span class="line">built by gcc 4.8.5 20150623 (Red Hat 4.8.5-44) (GCC) </span><br><span class="line">configure arguments: --prefix=/usr/local/nginx --add-module=/usr/local/nginx_upstream_check_module-master/ --with-stream</span><br></pre></td></tr></table></figure><p>示例配置:<br>stream段的配置要与http段在同级</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">···</span><br><span class="line">&#125;</span><br><span class="line"><span class="section">stream</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">upstream</span> mysql &#123;</span><br><span class="line">       <span class="attribute">server</span> <span class="number">192.168.50.51:3306</span> max_fails=<span class="number">2</span> fail_timeout=<span class="number">120s</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">3307</span>;</span><br><span class="line">        <span class="attribute">proxy_connect_timeout</span> <span class="number">10s</span>;</span><br><span class="line">        <span class="attribute">proxy_timeout</span> <span class="number">300s</span>;<span class="comment">#设置客户端和代理服务之间的超时时间，如果5分钟内没操作将自动断开。</span></span><br><span class="line">        <span class="attribute">proxy_pass</span> mysql;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试连接是否正常<br><img src="/image/teststream.png" alt="teststream"></p><h4 id="nginx增加kafka模块"><a href="#nginx增加kafka模块" class="headerlink" title="nginx增加kafka模块"></a>nginx增加kafka模块</h4><p>模块地址</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https://github.com/brg-liuwei/ngx_kafka_module/tree/master</span><br></pre></td></tr></table></figure><p>下载源码</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget http://nginx.org/download/nginx-1.20.1.tar.gz</span><br><span class="line">tar -zxvf  nginx-1.20.1.tar.gz</span><br><span class="line">cd nginx-1.20.1/</span><br></pre></td></tr></table></figure><p>配置编译使用的模块</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">./configure  --prefix=/usr/share/nginx --sbin-path=/usr/sbin/nginx --modules-path=/usr/lib64/nginx/modules --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --http-client-body-temp-path=/var/lib/nginx/tmp/client_body --http-proxy-temp-path=/var/lib/nginx/tmp/proxy --http-fastcgi-temp-path=/var/lib/nginx/tmp/fastcgi --http-uwsgi-temp-path=/var/lib/nginx/tmp/uwsgi --http-scgi-temp-path=/var/lib/nginx/tmp/scgi --pid-path=/run/nginx.pid --lock-path=/run/lock/subsys/nginx --user=nginx --group=nginx --with-file-aio --with-ipv6 --with-http_auth_request_module --with-http_ssl_module --with-http_v2_module --with-http_realip_module --with-http_addition_module --with-http_xslt_module=dynamic --with-http_image_filter_module=dynamic --with-http_geoip_module=dynamic --with-http_sub_module --with-http_dav_module --with-http_flv_module --with-http_mp4_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_random_index_module --with-http_secure_link_module --with-http_degradation_module --with-http_slice_module --with-http_stub_status_module --with-http_perl_module=dynamic --with-mail=dynamic --with-mail_ssl_module --with-pcre --with-pcre-jit --with-stream=dynamic --with-stream_ssl_module --with-google_perftools_module --with-debug --with-cc-opt=&apos;-O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches -specs=/usr/lib/rpm/redhat/redhat-hardened-cc1 -m64 -mtune=generic&apos; --with-ld-opt=&apos;-Wl,-z,relro -specs=/usr/lib/rpm/redhat/redhat-hardened-ld -Wl,-E&apos; --with-compat --with-stream_ssl_preread_module --with-threads --add-dynamic-module=/root/ngx_kafka_module</span><br></pre></td></tr></table></figure><p>编译</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure><p>此处不进行install安装</p><p>进入编译的目录</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd objs</span><br><span class="line">[root@idt01 objs]# ./nginx -c /etc/nginx/nginx.conf -t</span><br><span class="line">nginx: [emerg] module &quot;/usr/lib64/nginx/modules/ngx_http_image_filter_module.so&quot; is not binary compatible in /usr/share/nginx/modules/mod-http-image-filter.conf:1</span><br><span class="line">nginx: configuration file /etc/nginx/nginx.conf test failed</span><br></pre></td></tr></table></figure><p>拷贝so文件到原目录进行加载</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cp *.so /usr/lib64/nginx/modules/</span><br></pre></td></tr></table></figure><p>再次测试</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">the &quot;ssl&quot; directive is deprecated, use the &quot;listen ... ssl&quot; directive instead</span><br></pre></td></tr></table></figure><p>注释配置文件中的ssl on；同时在listen 443; 后面加上 ssl</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">listen 443  ssl;</span><br><span class="line">#ssl on;</span><br></pre></td></tr></table></figure><p>再次测试</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">version 1.20.1 of nginx.pm is required, but 1.12.2 was found</span><br></pre></td></tr></table></figure><p>find nginx.pm发现，这个perl文件，在make install的时候，也会安装，如果不指定安装目录，这个文件会默认安装到/usr/local/lib64/perl5/nginx.pm。<br>而nginx.pm里面记录了nginx的版本号。所以，如果启动nginx的时候，运行的nginx与nginx.pm版本号不一致就有问题</p><p>在测试的机器进行上述操作并进行install安装,把perl5下载到本服务器,把本地的目录进行备份,使用下载的perl5文件夹</p><p>再次测试</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@idt01 objs]# nginx -t</span><br><span class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /etc/nginx/nginx.conf test is successful</span><br></pre></td></tr></table></figure><p>./configure: error: C compiler cc is not found</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum -y install gcc gcc-c++ autoconf automake make</span><br></pre></td></tr></table></figure><p>./configure: error: the invalid value in –with-ld-opt=”-Wl,-z,relro -specs=/usr/lib/rpm/redhat/redhat-hardened-ld -Wl,-E”</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum -y install redhat-rpm-config.noarch</span><br></pre></td></tr></table></figure><p>./configure: error: the HTTP rewrite module requires the PCRE library.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum -y install pcre-devel</span><br></pre></td></tr></table></figure><p>./configure: error: SSL modules require the OpenSSL library.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum -y install openssl openssl-devel</span><br></pre></td></tr></table></figure><p>./configure: error: the HTTP XSLT module requires the libxml2/libxslt</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum -y install libxml2 libxml2-dev libxslt-devel</span><br></pre></td></tr></table></figure><p>./configure: error: the HTTP image filter module requires the GD library.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum -y install gd-devel</span><br></pre></td></tr></table></figure><p>./configure: error: perl module ExtUtils::Embed is required</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum -y install perl-devel perl-ExtUtils-Embed</span><br></pre></td></tr></table></figure><p>./configure: error: the GeoIP module requires the GeoIP library.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum -y install GeoIP GeoIP-devel GeoIP-data</span><br></pre></td></tr></table></figure><p>./configure: error: the Google perftools module requires the Google perftools</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum -y install gperftools</span><br></pre></td></tr></table></figure><p>[root@rancher modules]# nginx -t<br>nginx: [emerg] dlopen() “/usr/lib64/nginx/modules/ngx_http_kafka_module.so” failed (librdkafka.so.1: cannot open shared object file: No such file or directory) in /usr/share/nginx/modules/mod-kafka.conf:1</p><p><a href="https://www.jianshu.com/p/635e8cde4cbc" target="_blank" rel="noopener">https://www.jianshu.com/p/635e8cde4cbc</a></p><p>参考文档:<br><a href="https://blog.csdn.net/stormwolf/article/details/123371698" target="_blank" rel="noopener">https://blog.csdn.net/stormwolf/article/details/123371698</a></p><p><a href="http://t.zoukankan.com/damon-blogs-p-14158831.html" target="_blank" rel="noopener">http://t.zoukankan.com/damon-blogs-p-14158831.html</a></p><p><a href="https://blog.csdn.net/sayyy/article/details/121179039?utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~aggregatepage~first_rank_ecpm_v1~rank_v31_ecpm-6-121179039-null-null.pc_agg_new_rank&amp;utm_term=nginx%E6%B7%BB%E5%8A%A0%E6%A8%A1%E5%9D%97stream&amp;spm=1000.2123.3001.4430" target="_blank" rel="noopener">https://blog.csdn.net/sayyy/article/details/121179039?utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~aggregatepage~first_rank_ecpm_v1~rank_v31_ecpm-6-121179039-null-null.pc_agg_new_rank&amp;utm_term=nginx%E6%B7%BB%E5%8A%A0%E6%A8%A1%E5%9D%97stream&amp;spm=1000.2123.3001.4430</a></p><p>为了使 Nginx 配置更易于维护，建议为每个服务创建一个单独的配置文件，存储在 /usr/local/nginx/website 目录，根据需求可以创建任意多个独立的配置文件。</p><p>独立的配置文件，建议遵循以下命名约定 &lt;域名&gt;.conf，比如域名是 nmk0718.com，那么你的配置文件的应该是这样的 /usr/local/nginx/website/<a href="http://www.nmk0718.com.conf,把location单独抽出放在/usr/local/nginx/include/www.nmk0718.com.conf中进行存储.再通过include进行引用" target="_blank" rel="noopener">www.nmk0718.com.conf,把location单独抽出放在/usr/local/nginx/include/www.nmk0718.com.conf中进行存储.再通过include进行引用</a><br>新增服务时,只需更改include中的配置文件机即可</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@deployment nginx]# ll conf/website/</span><br><span class="line">-rw-r--r--. 1 root root   416 Jun 10  2021 dev.nmk0718.com.conf</span><br><span class="line">-rw-r--r--. 1 root root  7189 Mar 10 15:19 test.nmk0718.com.conf</span><br><span class="line">[root@deployment nginx]# ll conf/include/</span><br><span class="line">-rw-r--r--. 1 root root 13398 Mar 14 17:38 dev.nmk0718.com.conf</span><br><span class="line">-rw-r--r--. 1 root root 14987 Feb 22 15:01 test.nmk0718.com.conf</span><br></pre></td></tr></table></figure><p>Nginx 日志相关目录，内以 域名.type.log 命名（比如<a href="http://www.nmk0718.com.access.log" target="_blank" rel="noopener">www.nmk0718.com.access.log</a> 和<a href="http://www.nmk0718.com.error.log" target="_blank" rel="noopener">www.nmk0718.com.error.log</a> ）位于 /usr/local/nginx/log/ 目录中，为每个独立的服务配置不同的访问权限和错误日志文件，这样查找错误时，会更加方便快捷。</p><p>参考文档:<br><a href="https://blog.csdn.net/Janson_Lin/article/details/105954705" target="_blank" rel="noopener">https://blog.csdn.net/Janson_Lin/article/details/105954705</a><br><a href="https://www.cnblogs.com/cheyunhua/p/14011800.html" target="_blank" rel="noopener">https://www.cnblogs.com/cheyunhua/p/14011800.html</a><br><a href="https://www.cnblogs.com/cuishuai/p/8073748.html" target="_blank" rel="noopener">https://www.cnblogs.com/cuishuai/p/8073748.html</a><br><a href="https://blog.csdn.net/zhanghui200920061988/article/details/105132167" target="_blank" rel="noopener">https://blog.csdn.net/zhanghui200920061988/article/details/105132167</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h4&gt;&lt;p&gt;Nginx 是开源、高性能、高可靠的HTTP服务器,也可作为反向代理服务器,邮件服务器，支持热部署，占用内存少、并发能力强、能支持高达 5w</summary>
      
    
    
    
    
    <category term="nginx" scheme="https://nmk0718.github.io/tag/nginx/"/>
    
  </entry>
  
  <entry>
    <title>Rocketchat</title>
    <link href="https://nmk0718.github.io/2020/07/01/Rocketchat/"/>
    <id>https://nmk0718.github.io/2020/07/01/Rocketchat/</id>
    <published>2020-07-01T14:17:00.000Z</published>
    <updated>2024-11-29T06:43:47.806Z</updated>
    
    <content type="html"><![CDATA[<p>请根据操作系统选择官网安装文档</p><p>本文使用centos进行安装</p><p><a href="https://docs.rocket.chat/installation/manual-installation/centos/" target="_blank" rel="noopener">https://docs.rocket.chat/installation/manual-installation/centos/</a></p><p>RocketChat为开源的聊天软件,支持Web,Windows,Android,ios,macOS</p><h3 id="安装必要的依赖包"><a href="#安装必要的依赖包" class="headerlink" title="安装必要的依赖包"></a>安装必要的依赖包</h3><p>更新软件包列表并配置yum以使用以下yum存储库文件安装正式的MongoDB软件包：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo yum -y check-update</span><br><span class="line"></span><br><span class="line">cat &lt;&lt; EOF | sudo tee -a /etc/yum.repos.d/mongodb-org-4.0.repo</span><br><span class="line">[mongodb-org-4.0]</span><br><span class="line">name=MongoDB Repository</span><br><span class="line">baseurl=https://repo.mongodb.org/yum/redhat/7/mongodb-org/4.0/x86_64/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=1</span><br><span class="line">gpgkey=https://www.mongodb.org/static/pgp/server-4.0.asc</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>配置要通过软件包管理器安装的Node.js：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo yum install -y curl &amp;&amp; curl -sL https://rpm.nodesource.com/setup_12.x | sudo bash -</span><br></pre></td></tr></table></figure><p>安装构建工具，MongoDB，nodejs和graphicsmagick</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo yum install -y gcc-c++ make mongodb-org nodejs</span><br><span class="line">sudo yum install -y epel-release &amp;&amp; sudo yum install -y GraphicsMagick</span><br></pre></td></tr></table></figure><p>使用npm 安装 inherits 和 n 以及Rocket.Chat所需的节点版本：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo npm install -g inherits n &amp;&amp; sudo n 12.14.0</span><br></pre></td></tr></table></figure><h3 id="安装Rocket-Chat"><a href="#安装Rocket-Chat" class="headerlink" title="安装Rocket.Chat"></a>安装Rocket.Chat</h3><p>下载最新的Rocket.Chat版本：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -L https://releases.rocket.chat/latest/download -o /tmp/rocket.chat.tgz</span><br><span class="line">tar -xzf /tmp/rocket.chat.tgz -C /tmp</span><br></pre></td></tr></table></figure><p>安装（本指南使用/ opt，但可以选择其他目录）：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd /tmp/bundle/programs/server &amp;&amp; npm install</span><br><span class="line">sudo mv /tmp/bundle /opt/Rocket.Chat</span><br></pre></td></tr></table></figure><h3 id="配置Rocket-Chat服务"><a href="#配置Rocket-Chat服务" class="headerlink" title="配置Rocket.Chat服务"></a>配置Rocket.Chat服务</h3><p>添加rocketchat用户，在Rocket.Chat文件夹上设置正确的权限，并创建Rocket.Chat服务文件:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo useradd -M rocketchat &amp;&amp; sudo usermod -L rocketchat</span><br><span class="line">sudo chown -R rocketchat:rocketchat /opt/Rocket.Chat</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt; EOF |sudo tee -a /lib/systemd/system/rocketchat.service</span><br><span class="line">[Unit]</span><br><span class="line">Description=The Rocket.Chat server</span><br><span class="line">After=network.target remote-fs.target nss-lookup.target nginx.target mongod.target</span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/usr/local/bin/node /opt/Rocket.Chat/main.js</span><br><span class="line">StandardOutput=syslog</span><br><span class="line">StandardError=syslog</span><br><span class="line">SyslogIdentifier=rocketchat</span><br><span class="line">User=rocketchat</span><br><span class="line">Environment=MONGO_URL=mongodb://localhost:27017/rocketchat?replicaSet=rs01 MONGO_OPLOG_URL=mongodb://localhost:27017/local?replicaSet=rs01 ROOT_URL=http://localhost:3000/ PORT=3000</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>打开刚刚创建的Rocket.Chat服务文件(/usr/lib/systemd/system/rocketchat.service) </p><p>改ROOT_URL环境变量以反映您要用于访问服务器的URL（可以选择更改MONGO_URL，MONGO_OPLOG_URL和PORT）</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MONGO_URL=mongodb://localhost:27017/rocketchat?replicaSet=rs01</span><br><span class="line">MONGO_OPLOG_URL=mongodb://localhost:27017/local?replicaSet=rs01</span><br><span class="line">ROOT_URL=http://your-host-name.com-as-accessed-from-internet:3000</span><br><span class="line">PORT=3000</span><br></pre></td></tr></table></figure><p>为MongoDB设置存储引擎和复制（对于版本&gt; 1为必需），并启用并启动MongoDB和Rocket.Chat</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo sed -i &quot;s/^#  engine:/  engine: mmapv1/&quot;  /etc/mongod.conf</span><br><span class="line"></span><br><span class="line">sudo sed -i &quot;s/^#replication:/replication:\n  replSetName: rs01/&quot; /etc/mongod.conf</span><br><span class="line"></span><br><span class="line">sudo systemctl enable mongod &amp;&amp; sudo systemctl start mongod</span><br><span class="line"></span><br><span class="line">mongo --eval &quot;printjson(rs.initiate())&quot;</span><br><span class="line"></span><br><span class="line">sudo systemctl enable rocketchat &amp;&amp; sudo systemctl start rocketchat</span><br></pre></td></tr></table></figure><p><a href="http://your-host-name.com:3000" target="_blank" rel="noopener">http://your-host-name.com:3000</a> 即可访问</p><p>如果mongodb启动报错可完全卸载mongodb</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、删除安装的包</span><br><span class="line"></span><br><span class="line">yum erase $(rpm -qa | grep mongodb-org)</span><br><span class="line"></span><br><span class="line">2、删除数据及日志</span><br><span class="line"></span><br><span class="line">rm -r /var/log/mongodb</span><br><span class="line"></span><br><span class="line">rm -r /var/lib/mongo</span><br><span class="line">　　</span><br><span class="line">3、删除数据配置文件</span><br><span class="line"></span><br><span class="line">rm -r /etc/mongo.conf</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;请根据操作系统选择官网安装文档&lt;/p&gt;
&lt;p&gt;本文使用centos进行安装&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.rocket.chat/installation/manual-installation/centos/&quot; target=&quot;_blank&quot; </summary>
      
    
    
    
    
    <category term="IM" scheme="https://nmk0718.github.io/tag/IM/"/>
    
  </entry>
  
  <entry>
    <title>Mac</title>
    <link href="https://nmk0718.github.io/2020/05/21/Mac/"/>
    <id>https://nmk0718.github.io/2020/05/21/Mac/</id>
    <published>2020-05-21T14:20:00.000Z</published>
    <updated>2025-01-05T15:41:46.122Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Mac写入Windows-NTFS"><a href="#Mac写入Windows-NTFS" class="headerlink" title="Mac写入Windows(NTFS)"></a>Mac写入Windows(NTFS)</h3><h4 id="第一步：查看磁盘设备文件名"><a href="#第一步：查看磁盘设备文件名" class="headerlink" title="第一步：查看磁盘设备文件名"></a>第一步：查看磁盘设备文件名</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">diskutil list</span><br></pre></td></tr></table></figure><p>可以看到移动硬盘被挂载了disk2的位置上，其中Windows磁盘<strong>设备文件名</strong>为<strong>disk2s1</strong></p><h4 id="第二步：新建挂载点"><a href="#第二步：新建挂载点" class="headerlink" title="第二步：新建挂载点"></a>第二步：新建挂载点</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir ~/Desktop/Windows</span><br></pre></td></tr></table></figure><h4 id="第三步：推出磁盘（重新挂载）"><a href="#第三步：推出磁盘（重新挂载）" class="headerlink" title="第三步：推出磁盘（重新挂载）"></a>第三步：推出磁盘（重新挂载）</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo umount /dev/disk2s1</span><br></pre></td></tr></table></figure><h4 id="第四步：重新挂载"><a href="#第四步：重新挂载" class="headerlink" title="第四步：重新挂载"></a>第四步：重新挂载</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mount_ntfs -o rw,nobrowse /dev/disk2s1 ~/Desktop/Windows</span><br></pre></td></tr></table></figure><p>磁盘可以正常读写了！！！</p><p>或者</p><p>更新fstab文件，此步骤需要输入密码</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo nano /etc/fstab</span><br></pre></td></tr></table></figure><p>在fstab文件中写入一下内容(movie替换为你自己的Volume Name，建议用英文命名)</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LABEL=K none ntfs rw,auto,nobrowse</span><br></pre></td></tr></table></figure><p>CTRL + X保存，选择 Y，然后按回车键。</p><hr><h3 id="Mac使用pptp"><a href="#Mac使用pptp" class="headerlink" title="Mac使用pptp"></a>Mac使用pptp</h3><p>macos 10.15+ 版本以后系统就删除了对PPTP的支持。</p><p>在macos 10.15中被删除的文件是 <code>/usr/local/bin/pptp</code> 和 <code>/System/Library/Extensions/PPTP.ppp</code>。</p><p>[下载pptp和PPTP.ppp]</p><p>链接: <a href="https://pan.baidu.com/s/1lANcpclyTMJPZZLcgOpXFQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1lANcpclyTMJPZZLcgOpXFQ</a> 提取码: vbr9</p><p>Mac OS X系统默认情况是开启了完整性保护（System Intregrity Protection，SIP）的，所以即使是root帐户也无法修改系统目录中的文件。为了能够修改受保护的文件，需要禁用保护功能。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.重启电脑，按Command+R(直到出现苹果标志)进入Recovery Mode(恢复模式)</span><br><span class="line">2.选择用户&gt;下一步&gt;输入密码&gt;左上角&quot;实用工具&quot;&gt;终端</span><br><span class="line">3.在终端中输入csrutil disable命令回车。</span><br><span class="line">4.sudo cp -R PPTP.ppp /System/Library/Extensions</span><br><span class="line">sudo cp -R pptp /usr/local/bin/pptp</span><br><span class="line">拷贝文件到相应目录</span><br><span class="line">5.csrutil enable（启用完整性保护）</span><br></pre></td></tr></table></figure><p>进入 /etc/ppp/peers/ 目录，创建 nmk.vpn，此文件名自己取；</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd /etc/ppp/peers</span><br><span class="line">sudo vim nmk.vpn</span><br><span class="line">内容为以下代码:</span><br><span class="line"></span><br><span class="line">plugin PPTP.ppp</span><br><span class="line">noauth</span><br><span class="line">remoteaddress &quot;------VPN server name or IP address------&quot;</span><br><span class="line">user &quot;------VPN username------&quot;</span><br><span class="line">password &quot;------VPN password------&quot;</span><br><span class="line">redialcount 1</span><br><span class="line">redialtimer 5</span><br><span class="line">idle 1800</span><br><span class="line"># mru 1368</span><br><span class="line"># mtu 1368</span><br><span class="line">receive-all</span><br><span class="line">novj 0:0</span><br><span class="line">ipcp-accept-local</span><br><span class="line">ipcp-accept-remote</span><br><span class="line">refuse-eap</span><br><span class="line">refuse-pap</span><br><span class="line">refuse-chap-md5</span><br><span class="line">hide-password</span><br><span class="line">mppe-stateless</span><br><span class="line">mppe-128</span><br><span class="line"># require-mppe-128</span><br><span class="line">looplocal</span><br><span class="line">nodetach</span><br><span class="line">ms-dns 8.8.8.8</span><br><span class="line">usepeerdns</span><br><span class="line"># ipparam gwvpn</span><br><span class="line">defaultroute</span><br><span class="line">debug</span><br></pre></td></tr></table></figure><p>连接vpn</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo pppd call nmk.vpn</span><br></pre></td></tr></table></figure><p>断开vpn</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo pkill pppd</span><br><span class="line">#此处注意使用pkill,实测kill-9 杀掉进程后,网络断开,使用pkill网络正常</span><br><span class="line"> 百度得知pkill为ps和kill的结合,但具体差异未知请使用pkill结束进程</span><br></pre></td></tr></table></figure><p>报错</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MPPE required but peer negotiation failed</span><br><span class="line">解决方案:注释掉nmk.vpn中的</span><br><span class="line">mppe-stateless</span><br><span class="line">mppe-128</span><br><span class="line">LCP terminated by peer (MPPE required but peer refused)</span><br><span class="line">解决方案:取消注释或添加 nmk.vpn中的require-mppe-128</span><br></pre></td></tr></table></figure><h3 id="Mac卸载程序清除残留文件"><a href="#Mac卸载程序清除残留文件" class="headerlink" title="Mac卸载程序清除残留文件"></a>Mac卸载程序清除残留文件</h3><p>卸载某些应用程序后会留下一些预置文件和缓存等，一般这些文件没有潜在坏处，但是你可以删除它们来彻底跟该应用程序说拜拜。这些文件通常位于以下路径：</p><p>~/Library/Application Support/(应用程序名称)<br>~/Library/Preferences/(应用程序名称)<br>~/Library/Caches/(应用程序名称)</p><p>注：有时你会需要寻找开发商名称，而不是应用程序的名称，因为并不是所有的应用程序文件都是由它们的名称标识出来的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Mac写入Windows-NTFS&quot;&gt;&lt;a href=&quot;#Mac写入Windows-NTFS&quot; class=&quot;headerlink&quot; title=&quot;Mac写入Windows(NTFS)&quot;&gt;&lt;/a&gt;Mac写入Windows(NTFS)&lt;/h3&gt;&lt;h4 id=&quot;第一步</summary>
      
    
    
    
    
    <category term="macOS" scheme="https://nmk0718.github.io/tag/macOS/"/>
    
  </entry>
  
  <entry>
    <title>expect</title>
    <link href="https://nmk0718.github.io/2020/05/21/expect/"/>
    <id>https://nmk0718.github.io/2020/05/21/expect/</id>
    <published>2020-05-21T14:20:00.000Z</published>
    <updated>2024-11-29T06:43:11.184Z</updated>
    
    <content type="html"><![CDATA[<h3 id="expect-安装"><a href="#expect-安装" class="headerlink" title="expect 安装"></a>expect 安装</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install -y expect</span><br></pre></td></tr></table></figure><h3 id="expect工作原理"><a href="#expect工作原理" class="headerlink" title="expect工作原理"></a>expect工作原理</h3><p>​    从最简单的层次来说，Expect的工作方式象一个通用化的Chat脚本工具。Chat脚本最早用于UUCP网络内，以用来实现计算机之间需要建立连接时进行特定的登录会话的自动化。</p><p>​    Chat脚本由一系列expect-send对组成：expect等待输出中输出特定的字符，通常是一个提示符，然后发送特定的响应。例如下面的 Chat脚本实现等待标准输出出现Login:字符串，然后发送somebody作为用户名；然后等待Password:提示符，并发出响应 sillyme。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Login: somebody Password: sillyme</span><br></pre></td></tr></table></figure><p>Expect最简单的脚本操作模式本质上和Chat脚本工作模式是一样的。</p><h3 id="expect简单例子"><a href="#expect简单例子" class="headerlink" title="expect简单例子"></a>expect简单例子</h3><p>为了更好理解except脚本几个简单参数，我们再举一个简单的例子： </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!/usr/bin/expect   </span><br><span class="line">set timeout 30   </span><br><span class="line">spawn ssh -l username 192.168.1.1   </span><br><span class="line">expect &quot;password:&quot;   </span><br><span class="line">send &quot;ispass\r&quot;   </span><br><span class="line">interact</span><br></pre></td></tr></table></figure><p>说明:</p><p>1.[#!/usr/bin/expect]</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">这一行告诉操作系统脚本里的代码使用那一个shell来执行。这里的expect其实和linux下的bash、windows下的cmd是一类东西。注意：这一行需要在脚本的第一行。</span><br></pre></td></tr></table></figure><p>2.[set timeout 30]</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">设置超时时间，计时单位是：秒</span><br></pre></td></tr></table></figure><p>3.[spawn ssh -l username 192.168.1.1]</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">spawn是进入expect环境后才可以执行的expect内部命令，如果没有装expect或者直接在默认的SHELL下执行是找不到spawn命令的。所以不要用 “which spawn“之类的命令去找spawn命令。好比windows里的dir就是一个内部命令，这个命令由shell自带，你无法找到一个dir.com 或 dir.exe 的可执行文件。它主要的功能是给ssh运行进程加个壳，用来传递交互指令。</span><br></pre></td></tr></table></figure><p>4.[expect “password:”]</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">这里的expect也是expect的一个内部命令，有点晕吧，expect的shell命令和内部命令是一样的，但不是一个功能，习惯就好了。这个命令的意思是判断上次输出结果里是否包含“password:”的字符串，如果有则立即返回，否则就等待一段时间后返回，这里等待时长就是前面设置的30秒</span><br></pre></td></tr></table></figure><p>5.[send “ispass\r”]</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">这里就是执行交互动作，与手工输入密码的动作等效。  </span><br><span class="line">温馨提示： 命令字符串结尾别忘记加上 “\r”，如果出现异常等待的状态可以核查一下。</span><br></pre></td></tr></table></figure><p>6.[interact］  </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">执行完成后保持交互状态，把控制权交给控制台，这个时候就可以手工操作了。如果没有这一句登录完成后会退出，而不是留在远程终端上。如果你只是登录过去执行一段命令就退出，可改为［expect eof］</span><br></pre></td></tr></table></figure><h3 id="expect实用案例"><a href="#expect实用案例" class="headerlink" title="expect实用案例"></a>expect实用案例</h3><h4 id="远程登录到linux-并且执行命令-执行完后并退出"><a href="#远程登录到linux-并且执行命令-执行完后并退出" class="headerlink" title="远程登录到linux,并且执行命令,执行完后并退出"></a>远程登录到linux,并且执行命令,执行完后并退出</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!/usr/bin/expect -f </span><br><span class="line">set ip 192.168.1.130 </span><br><span class="line">set password admin </span><br><span class="line">set timeout 10 </span><br><span class="line">spawn ssh root@$ip </span><br><span class="line">expect &#123; </span><br><span class="line">&quot;*yes/no&quot; &#123; send &quot;yes\r&quot;; exp_continue&#125; </span><br><span class="line">&quot;*password:&quot; &#123; send &quot;$password\r&quot; &#125; </span><br><span class="line">&#125; </span><br><span class="line">expect &quot;#*&quot; </span><br><span class="line">send &quot;pwd\r&quot; </span><br><span class="line">send &quot;exit\r&quot; </span><br><span class="line">expect eof</span><br></pre></td></tr></table></figure><p>运行结果如下:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. root@nmk# ./test.exp </span><br><span class="line">2. spawn ssh root@192.168.1.130 </span><br><span class="line">3. root@192.168.1.130&apos;s password: </span><br><span class="line">4. Last login: Fri Sep 7 14:05:07 2012 from 116.246.27.90 </span><br><span class="line">5. [root@localhost ~]# pwd </span><br><span class="line">6. /root </span><br><span class="line">7. [root@localhost ~]# exit </span><br><span class="line">8. logout </span><br><span class="line">9. Connection to 192.168.1.130 closed.</span><br></pre></td></tr></table></figure><p>linux下匹配 #,windows下匹配 &gt;</p><h4 id="远程登录到ftp-并且下载文件"><a href="#远程登录到ftp-并且下载文件" class="headerlink" title="远程登录到ftp,并且下载文件"></a>远程登录到ftp,并且下载文件</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. \#!/usr/bin/expect -f </span><br><span class="line">2.  set ip [lindex $argv 0 ] </span><br><span class="line">3.  set dir [lindex $argv 1 ] </span><br><span class="line">4.  set file [lindex $argv 2 ] </span><br><span class="line">5.  set timeout 10 </span><br><span class="line">6.  spawn ftp $ip </span><br><span class="line">7.  expect &quot;Name*&quot; </span><br><span class="line">8.  send &quot;zwh\r&quot; </span><br><span class="line">9.  expect &quot;Password:*&quot; </span><br><span class="line">10.  send &quot;zwh\r&quot; </span><br><span class="line">11.  expect &quot;ftp&gt;*&quot; </span><br><span class="line">12.  send &quot;lcd $dir\r&quot; </span><br><span class="line">13.  expect &#123; </span><br><span class="line">14.  &quot;*file&quot; &#123; send_user &quot;local $_dir No such file or directory&quot;;send &quot;quit\r&quot; &#125; </span><br><span class="line">15.  &quot;*now*&quot; &#123; send &quot;get $dir/$file $dir/$file\r&quot;&#125; </span><br><span class="line">16.  &#125; </span><br><span class="line">17.  expect &#123; </span><br><span class="line">18.  &quot;*Failed&quot; &#123; send_user &quot;remote $file No such file&quot;;send &quot;quit\r&quot; &#125; </span><br><span class="line">19.  &quot;*OK&quot;   &#123; send_user &quot;$file has been download\r&quot;;send &quot;quit\r&quot;&#125; </span><br><span class="line">20.  &#125; </span><br><span class="line">21.  expect eof</span><br></pre></td></tr></table></figure><p>运行结果如下: </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. root@nmk# ./test2.exp 192.168.1.130 /var/www/www aaa.html </span><br><span class="line">2. spawn ftp 192.168.1.130 </span><br><span class="line">3. Connected to 192.168.1.130. </span><br><span class="line">4. 220 (vsFTPd 2.0.5) </span><br><span class="line">5. Name (192.168.1.130:root): zwh </span><br><span class="line">6. 331 Please specify the password. </span><br><span class="line">7. Password: </span><br><span class="line">8. 230 Login successful. </span><br><span class="line">9. Remote system type is UNIX. </span><br><span class="line">10. Using binary mode to transfer files. </span><br><span class="line">11. ftp&gt; lcd /var/www/www </span><br><span class="line">12. Local directory now /var/www/www </span><br><span class="line">13. ftp&gt; get /var/www/www/aaa.html /var/www/www/aaa.html </span><br><span class="line">14. local: /var/www/www/aaa.html remote: /var/www/www/aaa.html </span><br><span class="line">15. 200 PORT command successful. Consider using PASV. </span><br><span class="line">16. 150 Opening BINARY mode data connection for /var/www/www/aaa.html (66 bytes). </span><br><span class="line">17. 226 File send OK. </span><br><span class="line">18. 66 bytes received in 0.00 secs (515.6 kB/s) </span><br><span class="line">19. quit aaa.html has been download </span><br><span class="line">20. 221 Goodbye.</span><br></pre></td></tr></table></figure><h4 id="单台服务器scp"><a href="#单台服务器scp" class="headerlink" title="单台服务器scp"></a>单台服务器scp</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!/usr/bin/expect </span><br><span class="line">if &#123;$argc &lt; 2&#125; &#123;</span><br><span class="line">    send_user &quot;usage: $argv0 src_file username ip dest_file password\n&quot;</span><br><span class="line">exit</span><br><span class="line">set timeout 10 </span><br><span class="line">set host [lindex $argv 0] </span><br><span class="line">set username [lindex $argv 1] </span><br><span class="line">set password [lindex $argv 2] </span><br><span class="line">set src_file [lindex $argv 3] </span><br><span class="line">set dest_file [lindex $argv 4] </span><br><span class="line">spawn scp $src_file $username@$host:$dest_file </span><br><span class="line">expect &#123; </span><br><span class="line">&quot;(yes/no)?&quot; </span><br><span class="line">&#123; </span><br><span class="line">send &quot;yes\n&quot; </span><br><span class="line">expect &quot;*assword:&quot; &#123; send &quot;$password\n&quot;&#125; </span><br><span class="line">&#125; </span><br><span class="line">&quot;*assword:&quot; </span><br><span class="line">&#123; </span><br><span class="line">send &quot;$password\n&quot; </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line">expect &quot;100%&quot; </span><br><span class="line">expect eof</span><br></pre></td></tr></table></figure><p>说明：</p><p>（1）注意代码刚开始的第一行，指定了expect的路径，与shell脚本相同，这一句指定了程序在执行时到哪里去寻找相应的启动程序。代码刚开始还设定了timeout的时间为10秒，如果在执行scp任务时遇到了代码中没有指定的异常，则在等待10秒后该脚本的执行会自动终止。</p><p>（2）这个脚本设置了5个需要手动输入的参数，分别为：目标主机的IP、用户名、密码、本地文件路径、目标主机中的文件路径。如果将以上脚本保存为expect_scp文件，则在shell下执行时需要按以下的规范来输入命令：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">./expect_scp 192.168.75.130 root 123456 /root/src_file /root/dest_file</span><br></pre></td></tr></table></figure><p>以上的命令执行后，将把本地/root目录下的src_file文件拷贝到用户名为root，密码为123456的主机192.168.75.130中的/root下，同时还将这个源文件重命名为dest_file。</p><p>（3）spawn代表在本地终端执行的语句，在该语句开始执行后，expect开始捕获终端的输出信息，然后做出对应的操作。expect代码中的捕获的(yes/no)内容用于完成第一次访问目标主机时保存密钥的操作。有了这一句，scp的任务减少了中断的情况。代码结尾的expect eof与spawn对应，表示捕获终端输出信息的终止。</p><h4 id="多台传输脚本"><a href="#多台传输脚本" class="headerlink" title="多台传输脚本"></a><strong>多台传输脚本</strong></h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat mainscp.sh</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">host_list=&quot;server_list.conf&quot;</span><br><span class="line">cat $host_list | while read line</span><br><span class="line">do</span><br><span class="line"> host_ip=`echo $line|awk &apos;&#123;print $1&#125;&apos;`</span><br><span class="line"> username=`echo $line|awk &apos;&#123;print $2&#125;&apos;`</span><br><span class="line"> password=`echo $line|awk &apos;&#123;print $3&#125;&apos;`</span><br><span class="line"> src_file=`echo $line|awk &apos;&#123;print $4&#125;&apos;`</span><br><span class="line"> dest_file=`echo $line|awk &apos;&#123;print $5&#125;&apos;`</span><br><span class="line"> ##key=`echo $line|awk &apos;&#123;print $6&#125;&apos;`</span><br><span class="line"> ##./allscp.sh $key $src_file $username $host_ip $dest_file $password</span><br><span class="line"> ./allscp.sh $src_file $username $host_ip $dest_file $password</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p><strong>3.服务器信息文件</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat server_list.conf</span><br></pre></td></tr></table></figure><p>格式为:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ip 用户名 密码 源文件 目标文件地址</span><br></pre></td></tr></table></figure><p>通过jenkins加expect部署新项目或增加节点</p><p>update.sh</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!/usr/bin/expect</span><br><span class="line"></span><br><span class="line">if &#123;$argc &lt; 3&#125; &#123;</span><br><span class="line">        send_user &quot;请按照格式输入: $argv0 host_ip username password local_file remote_file project port\n&quot;</span><br><span class="line">exit</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#接收输入的参数定义为变量</span><br><span class="line">set host_ip [lindex $argv 0]</span><br><span class="line">set username [lindex $argv 1]</span><br><span class="line">set password [lindex $argv 2]</span><br><span class="line">set local_file [lindex $argv 3]</span><br><span class="line">set remote_file [lindex $argv 4]</span><br><span class="line">set project [lindex $argv 5]</span><br><span class="line">set port [lindex $argv 6]</span><br><span class="line"></span><br><span class="line">spawn scp package/$project.war $username@$host_ip:$remote_file</span><br><span class="line"></span><br><span class="line">expect &#123;</span><br><span class="line">&quot;*password:&quot;</span><br><span class="line">        &#123;send &quot;$password\r&quot;&#125;</span><br><span class="line">&#125;</span><br><span class="line">expect &quot;100%&quot;</span><br><span class="line">expect eof</span><br><span class="line">spawn ssh $username@$host_ip</span><br><span class="line"></span><br><span class="line">expect &#123; </span><br><span class="line">&quot;(yes/no)?&quot;</span><br><span class="line">&#123;send &quot;yes\r&quot;&#125;</span><br><span class="line">&quot;*password:&quot;</span><br><span class="line">&#123;send &quot;$password\r&quot;&#125;</span><br><span class="line">&#125;</span><br><span class="line">expect &quot;$&quot;</span><br><span class="line">send &quot;cd $remote_file\r&quot;</span><br><span class="line">expect &quot;$&quot;</span><br><span class="line">send &quot;./killport.sh $port\r&quot;</span><br><span class="line">expect &quot;$&quot;</span><br><span class="line">send &quot;cd /home/tomcat/tomcat_$port/webapps\r&quot;</span><br><span class="line">expect &quot;$&quot;</span><br><span class="line">send &quot;tar czvf $project`date +%Y%m%d%H%M%S`.bak.tar $project\r&quot;</span><br><span class="line">expect &quot;$&quot;</span><br><span class="line">send &quot;rm -r $project.war\r&quot;</span><br><span class="line">expect &quot;(yes/no)?&quot;</span><br><span class="line">send &quot;yes\r&quot;</span><br><span class="line">send &quot;rm -rf $project\r&quot;</span><br><span class="line">expect &quot;$&quot;</span><br><span class="line">send &quot;mv *.bak.tar backup\r&quot;</span><br><span class="line">expect &quot;$&quot;</span><br><span class="line">send &quot;mv $remote_file/$project.war /home/tomcat/tomcat_$port/webapps\r&quot;</span><br><span class="line">expect &quot;$&quot;</span><br><span class="line">send &quot;cd /home/tomcat/tomcat_$port/bin\r&quot;</span><br><span class="line">expect &quot;$&quot;</span><br><span class="line">send &quot;./startup.sh\r&quot;</span><br><span class="line">expect eof</span><br></pre></td></tr></table></figure><p>Release.sh</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">project=$2</span><br><span class="line">host_ip=$4</span><br><span class="line">port=$6</span><br><span class="line"></span><br><span class="line">line1=`ls package|grep $project`</span><br><span class="line">if [ &quot;$project.war&quot; != &quot;$line1&quot; ] ; then</span><br><span class="line">    echo -e &quot;请先去jenkins打包,不存在$project的war包.\n请检查拼写格式:\n</span><br><span class="line">        -P(project name)\n</span><br><span class="line">        -H(host ip)\n</span><br><span class="line">        -Port(tomcat port)\n</span><br><span class="line">        例如:./release.sh -P mfapi -H 192.168.1.1 -Port 8080&quot;</span><br><span class="line">exit</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">line2=`cat files/server_list.conf|grep $host_ip|awk &apos;&#123;print $1&#125;&apos;`</span><br><span class="line">if [ &quot;$host_ip&quot; != &quot;$line2&quot; ] ; then</span><br><span class="line">    echo -e &quot;服务器列表不存在$host_ip.\n请检查拼写格式:\n</span><br><span class="line">        -P(project name)\n</span><br><span class="line">        -H(host ip)\n</span><br><span class="line">        -Port(tomcat port)\n</span><br><span class="line">        例如:./release.sh -P mfapi -H 192.168.1.1 -Port 8080&quot;</span><br><span class="line">exit</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">#line3=`ls tomcat/conf|grep $port`</span><br><span class="line">if [ ! -n &quot;$port&quot; ] ; then</span><br><span class="line">    echo -e &quot;tomcat中不存在端口为$port的配置,如有需要请添加.\n请检查拼写格式:\n</span><br><span class="line">        -P(project name)\n</span><br><span class="line">        -H(host ip)\n</span><br><span class="line">        -Port(tomcat port)\n</span><br><span class="line">        例如:./release.sh -P mfapi -H 192.168.1.1 -Port 8080&quot;</span><br><span class="line">exit</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if  [ &quot;$1&quot;a == &quot;-P&quot;a ] &amp;&amp; [ &quot;$3&quot;c == &quot;-H&quot;c ] &amp;&amp; [ &quot;$5&quot;e == &quot;-Port&quot;e ] ; then</span><br><span class="line">line=`cat files/server_list.conf |grep $host_ip`</span><br><span class="line">        ip=`echo $line|awk &apos;&#123;print $1&#125;&apos;`</span><br><span class="line">username=`echo $line|awk &apos;&#123;print $2&#125;&apos;`</span><br><span class="line">password=`echo $line|awk &apos;&#123;print $3&#125;&apos;`</span><br><span class="line">local_file=`echo $line|awk &apos;&#123;print $4&#125;&apos;`</span><br><span class="line">remote_file=`echo $line|awk &apos;&#123;print $5&#125;&apos;`</span><br><span class="line">  ./deploy.sh $host_ip $username $password $local_file $remote_file $project $port</span><br><span class="line">else</span><br><span class="line">    echo -e &quot;请检查拼写格式:\n</span><br><span class="line">        -P(project name)\n</span><br><span class="line">        -H(host ip)\n</span><br><span class="line">        -Port(tomcat port)\n</span><br><span class="line">例如:./release.sh -P mfapi -H 192.168.1.1 -Port 8080&quot;</span><br><span class="line">exit</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>Deploy.sh</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!/usr/bin/expect</span><br><span class="line"></span><br><span class="line">if &#123;$argc &lt; 3&#125; &#123;</span><br><span class="line">        send_user &quot;请按照格式输入: $argv0 host_ip username password local_file remote_file project port\n&quot;</span><br><span class="line">exit</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#接收输入的参数定义为变量</span><br><span class="line">set host_ip [lindex $argv 0]</span><br><span class="line">set username [lindex $argv 1]</span><br><span class="line">set password [lindex $argv 2]</span><br><span class="line">set local_file [lindex $argv 3]</span><br><span class="line">set remote_file [lindex $argv 4]</span><br><span class="line">set project [lindex $argv 5]</span><br><span class="line">set port [lindex $argv 6]</span><br><span class="line"></span><br><span class="line">spawn cp files/tomcat.tar.gz .</span><br><span class="line">expect eof</span><br><span class="line">spawn tar zvxf tomcat.tar.gz</span><br><span class="line">expect eof</span><br><span class="line"></span><br><span class="line">#判断项目---------------------------</span><br><span class="line">if &#123; &quot;$project&quot; != &quot;&quot; &#125; &#123;</span><br><span class="line">spawn cp /home/jenkins/nmk/package/$project.war /home/jenkins/nmk/tomcat/webapps/</span><br><span class="line">expect eof</span><br><span class="line">&#125; else &#123;</span><br><span class="line">spawn echo &quot;请输入项目名&quot;</span><br><span class="line">exit</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#-----------------------------------</span><br><span class="line"></span><br><span class="line">#判断端口---------------------------</span><br><span class="line"></span><br><span class="line">if &#123; &quot;$port&quot; != &quot;&quot; &#125; &#123;</span><br><span class="line">spawn rm -r /home/jenkins/nmk/tomcat/conf/server.xml</span><br><span class="line">spawn cp /home/jenkins/nmk/tomcat/conf/server_$port.xml /home/jenkins/nmk/tomcat/conf/server.xml</span><br><span class="line">expect eof</span><br><span class="line">&#125; else &#123;</span><br><span class="line">spawn echo &quot;请输入端口&quot;</span><br><span class="line">exit</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#-----------------------------------</span><br><span class="line">spawn rm -r tomcat.tar.gz</span><br><span class="line">expect eof</span><br><span class="line">spawn mv tomcat tomcat_$port</span><br><span class="line">expect eof</span><br><span class="line">spawn tar zcvf tomcat_$port.tar.gz tomcat_$port</span><br><span class="line">expect eof</span><br><span class="line">spawn scp $local_file/tomcat_$port.tar.gz $username@$host_ip:$remote_file</span><br><span class="line"></span><br><span class="line">expect &#123; </span><br><span class="line">&quot;(yes/no)?&quot;</span><br><span class="line">        &#123;send &quot;yes\r&quot;&#125;</span><br><span class="line">&quot;*password:&quot;</span><br><span class="line">        &#123;send &quot;$password\r&quot;&#125;</span><br><span class="line">&#125;</span><br><span class="line">expect &quot;100%&quot;</span><br><span class="line">expect eof</span><br><span class="line">spawn rm -r tomcat_$port.tar.gz</span><br><span class="line">expect eof</span><br><span class="line">spawn rm -r tomcat_$port</span><br><span class="line">expect eof</span><br><span class="line">spawn ssh $username@$host_ip</span><br><span class="line"></span><br><span class="line">expect &#123; </span><br><span class="line">&quot;(yes/no)?&quot;</span><br><span class="line">&#123;send &quot;yes\r&quot;&#125;</span><br><span class="line">&quot;*password:&quot;</span><br><span class="line">&#123;send &quot;$password\r&quot;&#125;</span><br><span class="line">&#125;</span><br><span class="line">expect &quot;$&quot;</span><br><span class="line">send &quot;cd $remote_file\r&quot;</span><br><span class="line">expect &quot;$&quot;</span><br><span class="line">send &quot;tar zvxf tomcat_$port.tar.gz\r&quot;</span><br><span class="line">expect &quot;$&quot;</span><br><span class="line">send &quot;rm -r tomcat_$port.tar.gz\r&quot;</span><br><span class="line">expect &quot;(yes/no)?&quot;</span><br><span class="line">send &quot;yes\r&quot;</span><br><span class="line">expect &quot;$&quot;</span><br><span class="line">send &quot;cd tomcat_$port\r&quot;</span><br><span class="line">expect &quot;$&quot;</span><br><span class="line">send &quot;./bin/startup.sh\r&quot;</span><br><span class="line">expect eof</span><br></pre></td></tr></table></figure><p>Files/server_list.conf</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Hostile username password srcfile distfile</span><br></pre></td></tr></table></figure><p>更多expect的详细命令</p><p><a href="https://www.cnblogs.com/lixigang/articles/4849527.html" target="_blank" rel="noopener">https://www.cnblogs.com/lixigang/articles/4849527.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;expect-安装&quot;&gt;&lt;a href=&quot;#expect-安装&quot; class=&quot;headerlink&quot; title=&quot;expect 安装&quot;&gt;&lt;/a&gt;expect 安装&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;t</summary>
      
    
    
    
    
    <category term="expect" scheme="https://nmk0718.github.io/tag/expect/"/>
    
  </entry>
  
  <entry>
    <title>https转发时丢失</title>
    <link href="https://nmk0718.github.io/2020/05/21/https%E4%B8%A2%E5%A4%B1/"/>
    <id>https://nmk0718.github.io/2020/05/21/https%E4%B8%A2%E5%A4%B1/</id>
    <published>2020-05-21T14:20:00.000Z</published>
    <updated>2022-03-08T06:16:31.584Z</updated>
    
    <content type="html"><![CDATA[<p>问题:访问https但界面的js或css会加载http,获取不到https</p><p>解决方案<br>1、nginx配置</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">proxy_set_header Host $host;</span><br><span class="line">proxy_pass http://127.0.0.1:8080;</span><br><span class="line">proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">proxy_set_header X-Forwarded-Proto  $scheme;</span><br></pre></td></tr></table></figure><p>2、Spring Boot 配置（在启动类里面配置,此方法为Spring Boot 2.X以上）</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Bean</span><br><span class="line">    public TomcatServletWebServerFactory servletContainer() &#123;</span><br><span class="line">        TomcatServletWebServerFactory factory = new TomcatServletWebServerFactory();</span><br><span class="line">        factory.setUriEncoding(Charset.forName(&quot;UTF-8&quot;));</span><br><span class="line">        RemoteIpValve value = new RemoteIpValve();</span><br><span class="line">        value.setRemoteIpHeader(&quot;X-Forwarded-For&quot;);</span><br><span class="line">        value.setProtocolHeader(&quot;X-Forwarded-Proto&quot;);</span><br><span class="line">        value.setProtocolHeaderHttpsValue(&quot;https&quot;);</span><br><span class="line">        factory.addEngineValves(value);</span><br><span class="line">        return factory;</span><br></pre></td></tr></table></figure><p>3、若是war包，在tomcat的在server.xml的Engine模块下面配置多一个以下的Valve</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;Valve  className=&quot;org.apache.catalina.valves.RemoteIpValve&quot; </span><br><span class="line">        remoteIpHeader=&quot;X-Forwarded-For&quot; </span><br><span class="line">        protocolHeader=&quot;X-Forwarded-Proto&quot; </span><br><span class="line">        protocolHeaderHttpsValue=&quot;https&quot;/&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;问题:访问https但界面的js或css会加载http,获取不到https&lt;/p&gt;
&lt;p&gt;解决方案&lt;br&gt;1、nginx配置&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span</summary>
      
    
    
    
    
    <category term="https" scheme="https://nmk0718.github.io/tag/https/"/>
    
  </entry>
  
  <entry>
    <title>kafka</title>
    <link href="https://nmk0718.github.io/2020/05/21/kafka/"/>
    <id>https://nmk0718.github.io/2020/05/21/kafka/</id>
    <published>2020-05-21T14:20:00.000Z</published>
    <updated>2024-11-29T06:44:43.779Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装kafka"><a href="#安装kafka" class="headerlink" title="安装kafka"></a>安装kafka</h3><h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir -p /opt/kafka &amp;&amp; cd /opt/kafka</span><br><span class="line">wget https://mirrors.tuna.tsinghua.edu.cn/apache/kafka/2.5.0/kafka_2.12-2.5.0.tgz</span><br></pre></td></tr></table></figure><h4 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar -zxvf kafka_2.12-2.5.0.tgz</span><br></pre></td></tr></table></figure><h4 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi /etc/profile</span><br><span class="line"></span><br><span class="line">#将下面的代码放到末尾</span><br><span class="line">#set kafka environment</span><br><span class="line">export KAFKA_HOME=/opt/kafka/kafka_2.12-2.5.0</span><br><span class="line">export PATH=$PATH:$KAFKA_HOME/bin</span><br></pre></td></tr></table></figure><p>重新加载环境变量</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi /opt/kafka/kafka_2.12-2.5.0/config/server.properties</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># (1).配置 broker 的ID</span><br><span class="line">broker.id=1  # 第一个kafka配置为 1，第二个配置为2，以此类推</span><br><span class="line"># (2).打开监听端口</span><br><span class="line"># 尽量写ip地址，以免造成错误</span><br><span class="line">listeners=PLAINTEXT://10.211.55.3:9092</span><br><span class="line"># (3).修改 log 的目录、在指定的位置创建好文件夹logs</span><br><span class="line">log.dirs=/opt/kafka/kafka_2.12-2.5.0/logs</span><br><span class="line"># (4).修改 zookeeper.connect,尽量写ip地址，以免造成错误</span><br><span class="line">zookeeper.connect=10.211.55.3:2181</span><br><span class="line"># (5).网络线程数量</span><br><span class="line">num.network.threads=3</span><br><span class="line"># (6).Zookeeper每6秒监视kafka是否还活着(默认)</span><br><span class="line">zookeeper.connection.timeout.ms=6000</span><br></pre></td></tr></table></figure><h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><p>启动kafka之前需要先启动zookeeper，然后再启动kafka</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#启动zookeeper</span><br><span class="line">zkServer.sh start</span><br><span class="line"></span><br><span class="line">#启动kafka</span><br><span class="line">kafka-server-start.sh $KAFKA_HOME/config/server.properties &amp;  打印日志启动</span><br><span class="line">kafka-server-start.sh -daemon $KAFKA_HOME/config/server.properties &amp; 不打印日志启动</span><br><span class="line"></span><br><span class="line">#通过jps查看是否启动</span><br><span class="line">[root@nmk kafka]# jps</span><br><span class="line">2049 QuorumPeerMain</span><br><span class="line">3496 Jps</span><br><span class="line">3101 Kafka</span><br></pre></td></tr></table></figure><h4 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#创建topic</span><br><span class="line">kafka-topics.sh --create --zookeeper 10.211.55.3:2181 --replication-factor 1 --partitions 1 --topic test</span><br><span class="line"></span><br><span class="line">#列出kafka</span><br><span class="line">[root@nmk kafka]# kafka-topics.sh --list --zookeeper 10.211.55.3:2181</span><br><span class="line">test</span><br><span class="line">#有刚刚的测试topic名，表示创建成功</span><br><span class="line"></span><br><span class="line">#如果需要查看topic的详细信息，需要使用describe命令</span><br><span class="line">kafka-topics.sh --describe --zookeeper 10.211.55.3:2181--topic test-topic</span><br><span class="line"></span><br><span class="line">#若不指定topic，则查看所有topic的信息</span><br><span class="line">kafka-topics.sh --describe --zookeeper 10.211.55.3:2181</span><br><span class="line"></span><br><span class="line">#删除topic</span><br><span class="line">kafka-topics.sh --delete --zookeeper 10.211.55.3:2181 --topic nmk</span><br><span class="line"></span><br><span class="line">#查看消费者组</span><br><span class="line">kafka-consumer-groups.sh --bootstrap-server 10.211.55.3:9092 --list</span><br><span class="line"></span><br><span class="line">#创建消费者组的两种方式</span><br><span class="line">1.kafka-console-consumer.sh --bootstrap-server 10.211.55.3:9092 --topic nmk --consumer.config config/consumer.properties</span><br><span class="line"></span><br><span class="line">2.kafka-console-consumer.sh --bootstrap-server 10.211.55.3:9092 --topic nmk --group nmkgroup</span><br><span class="line"></span><br><span class="line">#生产者操作</span><br><span class="line">kafka-console-producer.sh --broker-list 10.211.55.3:9092 --topic nmk</span><br><span class="line"></span><br><span class="line">#消费者操作</span><br><span class="line"></span><br><span class="line"># 通过以上命令，可以看到消费者可以接收生产者发送的消息</span><br><span class="line">kafka-console-consumer.sh --bootstrap-server 10.211.55.3:9092 --topic nmk</span><br><span class="line"> </span><br><span class="line"># 如果需要从头开始接收数据，需要添加--from-beginning参数</span><br><span class="line">kafka-console-consumer.sh --bootstrap-server 10.211.55.3:9092 --from-beginning --topic nmk</span><br><span class="line"></span><br><span class="line">#不同版本的kafka操作版本不同.高版本可使用--bootstrap-server 低版本仅支持--zookeeper</span><br></pre></td></tr></table></figure><h4 id="Kafka管理工具"><a href="#Kafka管理工具" class="headerlink" title="Kafka管理工具"></a>Kafka管理工具</h4><p> kafka-manager是目前最受欢迎的kafka集群管理工具，最早由雅虎开源，用户可以在Web界面执行一些简单的集群管理操作。具体支持以下内容：</p><ul><li>管理多个集群</li><li>轻松检查群集状态（主题，消费者，偏移，代理，副本分发，分区分发）</li><li>运行首选副本选举</li><li>使用选项生成分区分配以选择要使用的代理</li><li>运行分区重新分配（基于生成的分配）</li><li>使用可选主题配置创建主题（0.8.1.1具有与0.8.2+不同的配置）</li><li>删除主题（仅支持0.8.2+并记住在代理配置中设置delete.topic.enable = true）</li><li>主题列表现在指示标记为删除的主题（仅支持0.8.2+）</li><li>批量生成多个主题的分区分配，并可选择要使用的代理</li><li>批量运行重新分配多个主题的分区</li><li>将分区添加到现有主题</li><li>更新现有主题的配置</li></ul><p>kafka-manager 项目地址：<a href="https://github.com/yahoo/CMAK" target="_blank" rel="noopener">https://github.com/yahoo/CMAK</a></p><p>下载</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd /opt/kafka/</span><br><span class="line">wget https://github.com/yahoo/CMAK/releases/download/3.0.0.4/cmak-3.0.0.4.zip</span><br><span class="line">mv cmak-3.0.0.4.zip kafka-manager-3.0.0.4.zip</span><br><span class="line">unzip kafka-manager-3.0.0.4.zip</span><br></pre></td></tr></table></figure><p>配置</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi conf/application.conf </span><br><span class="line">#修改kafka-manager.zkhosts列表为自己的zk节点</span><br><span class="line">kafka-manager.zkhosts=&quot;10.211.55.3&quot;</span><br></pre></td></tr></table></figure><p>启动</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bin/kafka-manager 默认的端口是9000，可通过 -Dhttp.port，指定端口; </span><br><span class="line">-Dconfig.file=conf/application.conf指定配置文件:</span><br><span class="line"></span><br><span class="line">nohup bin/kafka-manager -Dconfig.file=conf/application.conf -Dhttp.port=9001 &amp;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;安装kafka&quot;&gt;&lt;a href=&quot;#安装kafka&quot; class=&quot;headerlink&quot; title=&quot;安装kafka&quot;&gt;&lt;/a&gt;安装kafka&lt;/h3&gt;&lt;h4 id=&quot;下载&quot;&gt;&lt;a href=&quot;#下载&quot; class=&quot;headerlink&quot; title=&quot;下</summary>
      
    
    
    
    
    <category term="kafka" scheme="https://nmk0718.github.io/tag/kafka/"/>
    
  </entry>
  
  <entry>
    <title>zookeeper</title>
    <link href="https://nmk0718.github.io/2020/05/21/zookeeper/"/>
    <id>https://nmk0718.github.io/2020/05/21/zookeeper/</id>
    <published>2020-05-21T14:20:00.000Z</published>
    <updated>2024-11-29T06:41:35.817Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装zookeeper"><a href="#安装zookeeper" class="headerlink" title="安装zookeeper"></a>安装zookeeper</h3><p>环境要求:JDK1.8</p><p>下载</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir -p /opt/zookeeper &amp;&amp; <span class="built_in">cd</span> /opt/zookeeper</span><br><span class="line">wget https://mirrors.cnnic.cn/apache/zookeeper/zookeeper-3.6.1/apache-zookeeper-3.6.1-bin.tar.gz</span><br></pre></td></tr></table></figure><p>解压</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zxvf apache-zookeeper-3.6.1-bin.tar.gz</span><br></pre></td></tr></table></figure><p>关闭防火墙</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 停止firewall</span></span><br><span class="line">systemctl stop firewalld.service</span><br><span class="line"><span class="comment">## 禁止firewall开机启动</span></span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld.service</span><br></pre></td></tr></table></figure><p>配置环境变量</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="comment">#将下面的代码放到末尾</span></span><br><span class="line"><span class="comment">#set zookeeper environment</span></span><br><span class="line"><span class="built_in">export</span> ZK_HOME=/opt/zookeeper/apache-zookeeper-3.6.1-bin</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$ZK_HOME</span>/bin</span><br></pre></td></tr></table></figure><p>重新加载环境变量</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/zookeeper/apache-zookeeper-3.6.1-bin/conf</span><br><span class="line">cp zoo_sample.cfg zoo.cfg</span><br><span class="line">vi zoo.cfg</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> The number of milliseconds of each tick</span></span><br><span class="line">tickTime=2000</span><br><span class="line"><span class="meta">#</span><span class="bash"> The number of ticks that the initial</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> synchronization phase can take</span></span><br><span class="line">initLimit=10</span><br><span class="line"><span class="meta">#</span><span class="bash"> The number of ticks that can pass between</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> sending a request and getting an acknowledgement</span></span><br><span class="line">syncLimit=5</span><br><span class="line"><span class="meta">#</span><span class="bash"> the directory <span class="built_in">where</span> the snapshot is stored.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="keyword">do</span> not use /tmp <span class="keyword">for</span> storage, /tmp here is just</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> example sakes.</span></span><br><span class="line">dataDir=/tmp/zookeeper</span><br><span class="line"><span class="meta">#</span><span class="bash"> the port at <span class="built_in">which</span> the clients will connect</span></span><br><span class="line">clientPort=2181</span><br><span class="line"><span class="meta">#</span><span class="bash"> the maximum number of client connections.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> increase this <span class="keyword">if</span> you need to handle more clients</span></span><br><span class="line"><span class="meta">#</span><span class="bash">maxClientCnxns=60</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Be sure to <span class="built_in">read</span> the maintenance section of the</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> administrator guide before turning on autopurge.</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> http://zookeeper.apache.org/doc/current/zookeeperAdmin.html<span class="comment">#sc_maintenance</span></span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">数据文件夹</span></span><br><span class="line">dataDir=/opt/zookeeper/apache-zookeeper-3.6.1-bin/data</span><br><span class="line"><span class="meta">#</span><span class="bash">监听端口</span></span><br><span class="line">clientPort=2181</span><br></pre></td></tr></table></figure><p>命令</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zkServer.sh start</span><br><span class="line">zkServer.sh stop</span><br><span class="line">zkServer.sh status</span><br><span class="line">zkServer.sh stop</span><br></pre></td></tr></table></figure><p>如不加环境变量需要进入目录使用命令</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd /opt/zookeeper/apache-zookeeper-3.6.1-bin/bin</span><br><span class="line">./zkServer.sh start</span><br><span class="line"></span><br><span class="line">## 如果无法启动，查看启动日志</span><br><span class="line">./zkServer.sh start-foreground</span><br></pre></td></tr></table></figure><p>查看进程</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ps -ef|grep zookeeper</span><br></pre></td></tr></table></figure><h3 id="zookeeper命令"><a href="#zookeeper命令" class="headerlink" title="zookeeper命令"></a>zookeeper命令</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#查看broker的id</span><br><span class="line">[zk: localhost:2181(CONNECTED) 0] ls /brokers/ids</span><br><span class="line">[1]</span><br><span class="line">#查看消息</span><br><span class="line">[zk: localhost:2181(CONNECTED) 1] ls /brokers/topics</span><br><span class="line">[__consumer_offsets, fund-deploy-dev, nmk, test, tmallgift-dev, tmallgift-tdev]</span><br><span class="line">#查看删除的消息</span><br><span class="line">ls /admin/delete_topics</span><br><span class="line">[account]</span><br><span class="line">#查看broker的信息</span><br><span class="line">get /brokers/ids/0</span><br><span class="line">[zk: localhost:2181(CONNECTED) 1] get /brokers/ids/1</span><br><span class="line">&#123;&quot;listener_security_protocol_map&quot;:&#123;&quot;PLAINTEXT&quot;:&quot;PLAINTEXT&quot;&#125;,&quot;endpoints&quot;:[&quot;PLAINTEXT://172.17.65.46:9092&quot;],&quot;jmx_port&quot;:-1,&quot;host&quot;:&quot;172.17.65.46&quot;,&quot;timestamp&quot;:&quot;1589882903946&quot;,&quot;port&quot;:9092,&quot;version&quot;:4&#125;</span><br><span class="line">#删除消息</span><br><span class="line">rmr /brokers/topics/test</span><br><span class="line">rmr /admin/delete_topics/test</span><br></pre></td></tr></table></figure><h3 id="单机搭建zookeeper集群"><a href="#单机搭建zookeeper集群" class="headerlink" title="单机搭建zookeeper集群"></a>单机搭建zookeeper集群</h3><p>所谓单机搭建zookeeper集群其实就是在一台机器上启动多个zookeeper，在启动每个zookeeper时分别使用不同的配置文件zoo.cfg来启动,每个配置文件使用不同的配置参数(clientPort端口号、dataDir数据目录、dataLogDir数据日志目录)在同一台机器上启动多次。</p><h5 id="配置多个zoo-cfg配置文件"><a href="#配置多个zoo-cfg配置文件" class="headerlink" title="配置多个zoo.cfg配置文件"></a>配置多个zoo.cfg配置文件</h5><p>zookeeper-1</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@server conf]# cat zoo.cfg </span><br><span class="line"># The number of milliseconds of each tick</span><br><span class="line">tickTime=2000</span><br><span class="line"># The number of ticks that the initial</span><br><span class="line"># synchronization phase can take</span><br><span class="line">initLimit=10</span><br><span class="line"># The number of ticks that can pass between</span><br><span class="line"># sending a request and getting an acknowledgement</span><br><span class="line">syncLimit=5</span><br><span class="line"># the directory where the snapshot is stored.</span><br><span class="line"># do not use /tmp for storage, /tmp here is just</span><br><span class="line"># example sakes.</span><br><span class="line">dataDir=/opt/zookeeper-1/zookeeper</span><br><span class="line"># the port at which the clients will connect</span><br><span class="line">clientPort=2181</span><br><span class="line"># the maximum number of client connections.</span><br><span class="line"># increase this if you need to handle more clients</span><br><span class="line">#maxClientCnxns=60</span><br><span class="line">#</span><br><span class="line"># Be sure to read the maintenance section of the</span><br><span class="line"># administrator guide before turning on autopurge.</span><br><span class="line">#</span><br><span class="line"># http://zookeeper.apache.org/doc/current/zookeeperAdmin.html#sc_maintenance</span><br><span class="line">#</span><br><span class="line"># The number of snapshots to retain in dataDir</span><br><span class="line">#autopurge.snapRetainCount=3</span><br><span class="line"># Purge task interval in hours</span><br><span class="line"># Set to &quot;0&quot; to disable auto purge feature</span><br><span class="line">#autopurge.purgeInterval=1</span><br><span class="line">server.0=localhost:2287:3387</span><br><span class="line">server.1=localhost:2288:3388</span><br><span class="line">server.2=localhost:2289:3389</span><br><span class="line">admin.serverPort=8881</span><br></pre></td></tr></table></figure><p>zookeeper-2</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@server conf]# cat zoo.cfg </span><br><span class="line"># The number of milliseconds of each tick</span><br><span class="line">tickTime=2000</span><br><span class="line"># The number of ticks that the initial</span><br><span class="line"># synchronization phase can take</span><br><span class="line">initLimit=10</span><br><span class="line"># The number of ticks that can pass between</span><br><span class="line"># sending a request and getting an acknowledgement</span><br><span class="line">syncLimit=5</span><br><span class="line"># the directory where the snapshot is stored.</span><br><span class="line"># do not use /tmp for storage, /tmp here is just</span><br><span class="line"># example sakes.</span><br><span class="line">dataDir=/opt/zookeeper-2/zookeeper</span><br><span class="line"># the port at which the clients will connect</span><br><span class="line">clientPort=2182</span><br><span class="line"># the maximum number of client connections.</span><br><span class="line"># increase this if you need to handle more clients</span><br><span class="line">#maxClientCnxns=60</span><br><span class="line">#</span><br><span class="line"># Be sure to read the maintenance section of the</span><br><span class="line"># administrator guide before turning on autopurge.</span><br><span class="line">#</span><br><span class="line"># http://zookeeper.apache.org/doc/current/zookeeperAdmin.html#sc_maintenance</span><br><span class="line">#</span><br><span class="line"># The number of snapshots to retain in dataDir</span><br><span class="line">#autopurge.snapRetainCount=3</span><br><span class="line"># Purge task interval in hours</span><br><span class="line"># Set to &quot;0&quot; to disable auto purge feature</span><br><span class="line">#autopurge.purgeInterval=1</span><br><span class="line">server.0=localhost:2287:3387</span><br><span class="line">server.1=localhost:2288:3388</span><br><span class="line">server.2=localhost:2289:3389</span><br><span class="line">admin.serverPort=8882</span><br></pre></td></tr></table></figure><p>zookeeper-3</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@server conf]# cat zoo.cfg </span><br><span class="line"># The number of milliseconds of each tick</span><br><span class="line">tickTime=2000</span><br><span class="line"># The number of ticks that the initial</span><br><span class="line"># synchronization phase can take</span><br><span class="line">initLimit=10</span><br><span class="line"># The number of ticks that can pass between</span><br><span class="line"># sending a request and getting an acknowledgement</span><br><span class="line">syncLimit=5</span><br><span class="line"># the directory where the snapshot is stored.</span><br><span class="line"># do not use /tmp for storage, /tmp here is just</span><br><span class="line"># example sakes.</span><br><span class="line">dataDir=/opt/zookeeper-3/zookeeper</span><br><span class="line"># the port at which the clients will connect</span><br><span class="line">clientPort=2183</span><br><span class="line"># the maximum number of client connections.</span><br><span class="line"># increase this if you need to handle more clients</span><br><span class="line">#maxClientCnxns=60</span><br><span class="line">#</span><br><span class="line"># Be sure to read the maintenance section of the</span><br><span class="line"># administrator guide before turning on autopurge.</span><br><span class="line">#</span><br><span class="line"># http://zookeeper.apache.org/doc/current/zookeeperAdmin.html#sc_maintenance</span><br><span class="line">#</span><br><span class="line"># The number of snapshots to retain in dataDir</span><br><span class="line">#autopurge.snapRetainCount=3</span><br><span class="line"># Purge task interval in hours</span><br><span class="line"># Set to &quot;0&quot; to disable auto purge feature</span><br><span class="line">#autopurge.purgeInterval=1</span><br><span class="line">server.0=localhost:2287:3387</span><br><span class="line">server.1=localhost:2288:3388</span><br><span class="line">server.2=localhost:2289:3389</span><br><span class="line">admin.serverPort=8883</span><br></pre></td></tr></table></figure><ul><li>tickTime: 基本事件单元，以毫秒为单位。这个时间是作为zookeeper服务器之间或客户端与服务器间维持心跳的时间。也就是每隔tickTime时间就会发送一个心跳</li><li>dataDir: 存储内存中数据库快照的位置，就是zookeeper保存数据的目录，默认情况下，zookeeper将数据的日志问也保存在这个目录里</li><li>clientPort: 客户端连接zookeeper服务器的端口，默认是2181，zookeeper会监听这个端口，接收客户端的访问请求</li><li>initLimit: 这个配置项是用来配置zookeeper接收客户端初始化连接能忍受多少个心跳时间间隔数。当已经超过10个心跳的时间(tickTime)长度后，zookeeper服务器还没有接收到客户端的返回信息，那么表明这个客户端连接失败。总的时间长度就是 10*2000 = 20 秒</li><li>syncLimit: 这个配置项标识Leader和Follower之间发送消息，请求和应答的长度，最长不能超过多少个tickTime的时间长度，总的时间长度就是 5 * 2000 = 10秒</li><li>server.myid=IP:Port1:Port2, myid是服务器的编号，一个正整数，一般是0、1、2、3等待，port1表示的是服务器与集群中的Leader服务器交换信息的端口，一般用2288，Port2表示的是万一集群中的Leader服务器宕机了，需要一个端口来重新进行宣讲，选出一个新的Leader，一般用3388</li></ul><p>创建myid文件并配置</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@public-service zookeeper]# cat /opt/zookeeper-1/zookeeper/myid</span><br><span class="line">0</span><br><span class="line">[root@public-service zookeeper]# cat /opt/zookeeper-2/zookeeper/myid </span><br><span class="line">1</span><br><span class="line">[root@public-service zookeeper]# cat /opt/zookeeper-3/zookeeper/myid</span><br><span class="line">2</span><br></pre></td></tr></table></figure><h5 id="启动3个zookeeper服务"><a href="#启动3个zookeeper服务" class="headerlink" title="启动3个zookeeper服务"></a>启动3个zookeeper服务</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">./zkServer.sh start /opt/zookeeper-1/conf/zoo.cfg </span><br><span class="line">./zkServer.sh start /opt/zookeeper-2/conf/zoo.cfg </span><br><span class="line">./zkServer.sh start /opt/zookeeper-3/conf/zoo.cfg</span><br></pre></td></tr></table></figure><h5 id="查看每个zookeeper对应的角色"><a href="#查看每个zookeeper对应的角色" class="headerlink" title="查看每个zookeeper对应的角色"></a>查看每个zookeeper对应的角色</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">./zkServer.sh status /opt/zookeeper-1/conf/zoo.cfg </span><br><span class="line">./zkServer.sh status /opt/zookeeper-2/conf/zoo.cfg </span><br><span class="line">./zkServer.sh status /opt/zookeeper-3/conf/zoo.cfg</span><br></pre></td></tr></table></figure><h5 id="停止zookeeper服务"><a href="#停止zookeeper服务" class="headerlink" title="停止zookeeper服务"></a>停止zookeeper服务</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zkServer stop /opt/zookeeper-1/conf/zoo.cfg</span><br><span class="line">zkServer stop /opt/zookeeper-2/conf/zoo.cfg</span><br><span class="line">zkServer stop /opt/zookeeper-3/conf/zoo.cfg</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;安装zookeeper&quot;&gt;&lt;a href=&quot;#安装zookeeper&quot; class=&quot;headerlink&quot; title=&quot;安装zookeeper&quot;&gt;&lt;/a&gt;安装zookeeper&lt;/h3&gt;&lt;p&gt;环境要求:JDK1.8&lt;/p&gt;
&lt;p&gt;下载&lt;/p&gt;
&lt;figure </summary>
      
    
    
    
    
    <category term="zookeeper" scheme="https://nmk0718.github.io/tag/zookeeper/"/>
    
  </entry>
  
  <entry>
    <title>nexus</title>
    <link href="https://nmk0718.github.io/2020/04/14/Nexus/"/>
    <id>https://nmk0718.github.io/2020/04/14/Nexus/</id>
    <published>2020-04-14T14:30:00.000Z</published>
    <updated>2024-11-29T06:45:20.053Z</updated>
    
    <content type="html"><![CDATA[<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>官方下载地址:<a href="https://help.sonatype.com/repomanager3/download/download-archives---repository-manager-3" target="_blank" rel="noopener">https://help.sonatype.com/repomanager3/download/download-archives---repository-manager-3</a></p><p>下载会很慢,请使用vpn下载</p><p>使用CRT或Xshell工具上传到服务器:/usr/local/nexus目录下</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar zxvf nexus-3.15.2-01-unix.tar.gz</span><br></pre></td></tr></table></figure><h3 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h3><p>可以在nexus-default.properties文件中（位于/nexus-3.9.0-01/etc/目录下）修改WEB访问端口等信息，默认为8081端口；防火墙放行8081端口；</p><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">./nexus run &amp;</span><br></pre></td></tr></table></figure><h3 id="检验是否安装成功"><a href="#检验是否安装成功" class="headerlink" title="检验是否安装成功"></a>检验是否安装成功</h3><p>打开浏览器，访问：<a href="http://localhost:8081/" target="_blank" rel="noopener">http://localhost:8081/</a><br>默认用户名 admin 默认密码 admin123</p><h3 id="仓库迁移"><a href="#仓库迁移" class="headerlink" title="仓库迁移"></a>仓库迁移</h3><p>Nexus的构件仓库都保存在sonatype-work目录中，该目录的位置由bin/nexus.vmoptions配置文件指定（Dkaraf.data）。<br>仓库迁移需要两个过程：备份和还原</p><p>备份仓库</p><p>将sonatype-work文件夹整体备份即可。</p><p>还原仓库</p><p>将备份好的sonatype-work文件拷贝到新的服务器中。然后修改bin/nexus.vmoptions配置文件，重新指定仓库的目录。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;下载&quot;&gt;&lt;a href=&quot;#下载&quot; class=&quot;headerlink&quot; title=&quot;下载&quot;&gt;&lt;/a&gt;下载&lt;/h3&gt;&lt;p&gt;官方下载地址:&lt;a href=&quot;https://help.sonatype.com/repomanager3/download/downlo</summary>
      
    
    
    
    
    <category term="nexus" scheme="https://nmk0718.github.io/tag/nexus/"/>
    
  </entry>
  
  <entry>
    <title>mysql</title>
    <link href="https://nmk0718.github.io/2020/04/09/mysql/"/>
    <id>https://nmk0718.github.io/2020/04/09/mysql/</id>
    <published>2020-04-08T16:20:00.000Z</published>
    <updated>2024-11-29T06:44:17.913Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#此次安装为mysql5.7版本,使用yum install mysql默认安装为mariadb</span><br><span class="line"></span><br><span class="line">wget https://repo.mysql.com/mysql80-community-release-el7-3.noarch.rpm</span><br><span class="line">#下载rpm包</span><br><span class="line">rpm -ivh mysql80-community-release-el7-3.noarch.rpm</span><br><span class="line">#安装rpm包</span><br><span class="line">yum repolist all | grep mysql </span><br><span class="line">#查看包版本</span><br><span class="line">yum-config-manager --disable mysql80-community</span><br><span class="line">#取消mysql80-community的默认安装</span><br><span class="line">yum-config-manager --enable mysql57-community</span><br><span class="line">#更改为mysql57-community默认安装版本</span><br><span class="line">#如不能使用使用yum-config-manager请使用yum -y install yum-utils</span><br><span class="line">yum install mysql-community-server</span><br><span class="line">yum -y install mysql-devel</span><br><span class="line">#安装完毕</span><br></pre></td></tr></table></figure><h3 id="mysql使用"><a href="#mysql使用" class="headerlink" title="mysql使用"></a>mysql使用</h3><h4 id="mysql服务"><a href="#mysql服务" class="headerlink" title="mysql服务"></a>mysql服务</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CentOS 7之前</span><br><span class="line">service mysqld start  ——启动mysql服务</span><br><span class="line">service mysqld stop              ——停止mysql服务</span><br><span class="line">service mysqld restart   ——重启mysql服务</span><br><span class="line">service mysqld status ——查看mysql服务</span><br><span class="line">CentOS 7.x开始，CentOS开始使用systemd服务来代替daemon</span><br><span class="line">systemctl start mysqld.service  ——启动mysql服务</span><br><span class="line">systemctl stop mysqld.service  ——停止mysql服务</span><br><span class="line">systemctl restart mysqld.service ——重启mysql服务</span><br><span class="line">systemctl status mysqld.service  ——查看mysql状态</span><br><span class="line">mysql -V --查看mysql版本</span><br></pre></td></tr></table></figure><h4 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br><span class="line">#本地登陆</span><br><span class="line"></span><br><span class="line">mysql -h主机地址 -P端口 -u用户名 －p用户密码</span><br><span class="line">#远程登陆</span><br><span class="line"></span><br><span class="line">grep &quot;temporary password&quot; /var/log/mysqld.log</span><br><span class="line">#获取临时密码</span><br></pre></td></tr></table></figure><h4 id="修改默认密码"><a href="#修改默认密码" class="headerlink" title="修改默认密码"></a>修改默认密码</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; ALTER USER USER() IDENTIFIED BY &apos;nmk0718&apos;;</span><br><span class="line">#如需弱密码请使用一下命令</span><br><span class="line">mysql&gt; set global validate_password_policy=LOW;</span><br><span class="line">mysql&gt; set global validate_password_length=6;</span><br></pre></td></tr></table></figure><h4 id="开启远程连接"><a href="#开启远程连接" class="headerlink" title="开启远程连接"></a>开启远程连接</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; grant all privileges on *.* to &apos;root&apos;@&apos;%&apos; identified by &apos;nmk0718&apos;;</span><br><span class="line">mysql&gt; flush privileges;</span><br></pre></td></tr></table></figure><h4 id="退出mysql"><a href="#退出mysql" class="headerlink" title="退出mysql"></a>退出mysql</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; exit/quit;</span><br></pre></td></tr></table></figure><h4 id="忘记密码"><a href="#忘记密码" class="headerlink" title="忘记密码"></a>忘记密码</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl stop mysqld.service</span><br><span class="line">#停止服务</span><br><span class="line"></span><br><span class="line">vi /etc/my.cnf</span><br><span class="line">#编辑配置文件在socket=/var/lib/mysql/mysql.sock下一行加入skip-grant-tables</span><br><span class="line">#作用为跳过密码验证</span><br><span class="line"></span><br><span class="line">systemctl start mysqld.service</span><br><span class="line">#启动服务</span><br><span class="line"></span><br><span class="line">mysql -u root</span><br><span class="line">mysql&gt;update mysql.user set authentication_string=password(&apos;nmk0718&apos;) where user=&apos;root&apos;;</span><br><span class="line">mysql&gt; flush privileges;</span><br><span class="line">mysql&gt; exit</span><br><span class="line">#进入mysql修改密码</span><br><span class="line"></span><br><span class="line">systemctl stop mysqld.service</span><br><span class="line"></span><br><span class="line">vi /etc/my.cnf</span><br><span class="line">#删除加入的skip-grant-tables</span><br><span class="line"></span><br><span class="line">systemctl start mysqld.service</span><br></pre></td></tr></table></figure><h4 id="查看密码策略"><a href="#查看密码策略" class="headerlink" title="查看密码策略"></a>查看密码策略</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#查看密码策略</span><br><span class="line">mysql&gt; show variables like &apos;%validate_password_policy%&apos;;</span><br><span class="line">+--------------------------+--------+</span><br><span class="line">| Variable_name            | Value  |</span><br><span class="line">+--------------------------+--------+</span><br><span class="line">| validate_password_policy | MEDIUM |</span><br><span class="line">+--------------------------+--------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show variables like &apos;%validate_password_length%&apos;;</span><br><span class="line">+--------------------------+-------+</span><br><span class="line">| Variable_name            | Value |</span><br><span class="line">+--------------------------+-------+</span><br><span class="line">| validate_password_length | 8     |</span><br><span class="line">+--------------------------+-------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line">#修改密码策略</span><br><span class="line">set global validate_password_policy=0;</span><br><span class="line">set global validate_password_length=1;</span><br></pre></td></tr></table></figure><p>validate_password.policy（校验规则），取值范围[0,1,2]，默认值1。0（LOW）：只校验长度；1（MEDIUM）：校验长度、大小写和特殊字符；2（STRONG）：校验长度、大小写、特殊字符和dictionary_file</p><p>密码策略的所有参数：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; SHOW VARIABLES LIKE &apos;validate_password%&apos;;</span><br><span class="line">+--------------------------------------+-------+</span><br><span class="line">| Variable_name                        | Value |</span><br><span class="line">+--------------------------------------+-------+</span><br><span class="line">| validate_password_check_user_name    | OFF   |</span><br><span class="line">| validate_password_dictionary_file    |       |</span><br><span class="line">| validate_password_length             | 4     |</span><br><span class="line">| validate_password_mixed_case_count   | 1     |</span><br><span class="line">| validate_password_number_count       | 1     |</span><br><span class="line">| validate_password_policy             | LOW   |</span><br><span class="line">| validate_password_special_char_count | 1     |</span><br><span class="line">+--------------------------------------+-------+</span><br><span class="line">7 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="mysql常用命令"><a href="#mysql常用命令" class="headerlink" title="mysql常用命令"></a>mysql常用命令</h3><h4 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; create database &lt;数据库名&gt; default character set &lt;编码格式&gt; collate &lt;校验集&gt;;</span><br></pre></td></tr></table></figure><h4 id="显示所有数据库"><a href="#显示所有数据库" class="headerlink" title="显示所有数据库"></a>显示所有数据库</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; show databases;</span><br></pre></td></tr></table></figure><h4 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; drop database &lt;数据库名&gt;;</span><br></pre></td></tr></table></figure><h4 id="选择数据库"><a href="#选择数据库" class="headerlink" title="选择数据库"></a>选择数据库</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; use &lt;数据库名&gt;;</span><br></pre></td></tr></table></figure><h4 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; create table &lt;表名&gt; (&lt;字段名1&gt; &lt;类型1&gt; [,..&lt;字段名n&gt; &lt;类型n&gt;]);</span><br></pre></td></tr></table></figure><h4 id="显示表"><a href="#显示表" class="headerlink" title="显示表"></a>显示表</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; show tables;</span><br></pre></td></tr></table></figure><h4 id="显示表结构"><a href="#显示表结构" class="headerlink" title="显示表结构"></a>显示表结构</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; desc &lt;表名&gt;；或者show columns from 表名;</span><br></pre></td></tr></table></figure><h4 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; drop table &lt;表名&gt;；</span><br></pre></td></tr></table></figure><h4 id="插入表数据"><a href="#插入表数据" class="headerlink" title="插入表数据"></a>插入表数据</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; insert into &lt;表名&gt; [( &lt;字段名1&gt;[,..&lt;字段名n &gt; ])] values ( 值1 )[, ( 值n )]</span><br></pre></td></tr></table></figure><h4 id="查询表数据"><a href="#查询表数据" class="headerlink" title="查询表数据"></a>查询表数据</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select &lt;目标列表表达式列表&gt; </span><br><span class="line"> from &lt; 表名或视图名 &gt; </span><br><span class="line"> where &lt; 条件 &gt; </span><br><span class="line"> group by &lt;分组表达式&gt;</span><br><span class="line"> having &lt;条件&gt;</span><br><span class="line"> order by &lt;排序表达式&gt;[ASC|DESC]</span><br></pre></td></tr></table></figure><h4 id="删除表数据"><a href="#删除表数据" class="headerlink" title="删除表数据"></a>删除表数据</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; delete from 表名 where 表达式;</span><br></pre></td></tr></table></figure><h4 id="修改表数据"><a href="#修改表数据" class="headerlink" title="修改表数据"></a>修改表数据</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; update 表名 set 字段=新值,… where 条件;</span><br></pre></td></tr></table></figure><h4 id="修改表名"><a href="#修改表名" class="headerlink" title="修改表名"></a>修改表名</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; rename table 原表名 to 新表名;</span><br></pre></td></tr></table></figure><h4 id="增加表字段"><a href="#增加表字段" class="headerlink" title="增加表字段"></a>增加表字段</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; alter table 表名 add 字段 类型 其他;</span><br></pre></td></tr></table></figure><h4 id="修改字段类型"><a href="#修改字段类型" class="headerlink" title="修改字段类型"></a>修改字段类型</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; alter table 表名 modify 字段 旧类型 新类型;</span><br></pre></td></tr></table></figure><h4 id="删除字段"><a href="#删除字段" class="headerlink" title="删除字段"></a>删除字段</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; alter table 表名 drop 字段;</span><br></pre></td></tr></table></figure><h4 id="修改字段的注释"><a href="#修改字段的注释" class="headerlink" title="修改字段的注释"></a>修改字段的注释</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; alter table `表名` modify column `id` comment &apos;学号&apos;;</span><br></pre></td></tr></table></figure><h4 id="加索引"><a href="#加索引" class="headerlink" title="加索引"></a>加索引</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; alter table 表名 add index 索引名 (字段名1[，字段名2 …]);</span><br></pre></td></tr></table></figure><h4 id="加主关键字的索引"><a href="#加主关键字的索引" class="headerlink" title="加主关键字的索引"></a>加主关键字的索引</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; alter table 表名 add primary key (字段名);</span><br></pre></td></tr></table></figure><h4 id="加唯一限制条件的索引"><a href="#加唯一限制条件的索引" class="headerlink" title="加唯一限制条件的索引"></a>加唯一限制条件的索引</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; alter table 表名 add unique 索引名 (字段名);</span><br></pre></td></tr></table></figure><h4 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; alter table 表名 drop index 索引名;</span><br></pre></td></tr></table></figure><h4 id="备份数据库"><a href="#备份数据库" class="headerlink" title="备份数据库"></a>备份数据库</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#mysqldump 在windows下进行备份需要cmd的管理员身份</span><br><span class="line">mysqldump -h主机名(ip) -P端口 -u 用户名 -p密码 数据库名1 数据库名2 &gt; 文件名.sql</span><br></pre></td></tr></table></figure><h4 id="备份数据库的某张表"><a href="#备份数据库的某张表" class="headerlink" title="备份数据库的某张表"></a>备份数据库的某张表</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysqldump -h主机名(ip) -u 用户名 -p 数据库名 表1 表2 表3 &gt; 文件名.sql</span><br></pre></td></tr></table></figure><h4 id="备份所有数据库"><a href="#备份所有数据库" class="headerlink" title="备份所有数据库"></a>备份所有数据库</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysqldump -uroot -p --all-databases &gt; 文件名.sql</span><br></pre></td></tr></table></figure><h4 id="还原数据库"><a href="#还原数据库" class="headerlink" title="还原数据库"></a>还原数据库</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysqldump -uroot -p 数据库名 &lt; 文件名.sql</span><br></pre></td></tr></table></figure><h4 id="删除数据库-1"><a href="#删除数据库-1" class="headerlink" title="删除数据库"></a>删除数据库</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; drop database 数据库名</span><br></pre></td></tr></table></figure><h4 id="恢复数据库"><a href="#恢复数据库" class="headerlink" title="恢复数据库"></a>恢复数据库</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#先创建同名数据库</span><br><span class="line">CREATE DATABASE 数据库名;</span><br><span class="line">use 数据库名;</span><br><span class="line">source 备份文件的路径 文件名.sql</span><br></pre></td></tr></table></figure><h3 id="mysql开启binlog"><a href="#mysql开启binlog" class="headerlink" title="mysql开启binlog"></a>mysql开启binlog</h3><h4 id="查看binlog日志的状态"><a href="#查看binlog日志的状态" class="headerlink" title="查看binlog日志的状态"></a>查看binlog日志的状态</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; show variables like &apos;%log_bin%&apos;;</span><br><span class="line">+---------------------------------+-------+</span><br><span class="line">| Variable_name                   | Value |</span><br><span class="line">+---------------------------------+-------+</span><br><span class="line">| log_bin                         | OFF   |</span><br><span class="line">| log_bin_basename                |       |</span><br><span class="line">| log_bin_index                   |       |</span><br><span class="line">| log_bin_trust_function_creators | OFF   |</span><br><span class="line">| log_bin_use_v1_row_events       | OFF   |</span><br><span class="line">| sql_log_bin                     | ON    |</span><br><span class="line">+---------------------------------+-------+</span><br><span class="line">6 rows in set (0.00 sec)</span><br><span class="line">得知 log_bin为OFF</span><br></pre></td></tr></table></figure><p>退出mysql,修改my.cnf</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server-id=1</span><br><span class="line">log-bin=/var/lib/mysql/mysql-bin</span><br><span class="line"># server-id表示单个结点的id，这里由于只有一个结点，所以可以把id随机指定为一个数，这里将id设置成1。若集群中有个结点，则id不能相同</span><br><span class="line"># 第二句是指定binlog日志文件的名字为mysql-bin，以及其存储路径</span><br></pre></td></tr></table></figure><h4 id="重启myql"><a href="#重启myql" class="headerlink" title="重启myql"></a>重启myql</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl restart mysqld</span><br></pre></td></tr></table></figure><p>进入mysql,查看binlog日志的状态</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt;  show variables like &apos;%log_bin%&apos;;</span><br><span class="line">+---------------------------------+--------------------------------+</span><br><span class="line">| Variable_name                   | Value                          |</span><br><span class="line">+---------------------------------+--------------------------------+</span><br><span class="line">| log_bin                         | ON                             |</span><br><span class="line">| log_bin_basename                | /var/lib/mysql/mysql-bin       |</span><br><span class="line">| log_bin_index                   | /var/lib/mysql/mysql-bin.index |</span><br><span class="line">| log_bin_trust_function_creators | OFF                            |</span><br><span class="line">| log_bin_use_v1_row_events       | OFF                            |</span><br><span class="line">| sql_log_bin                     | ON                             |</span><br><span class="line">+---------------------------------+--------------------------------+</span><br><span class="line">6 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="MySQL数据库-Too-many-connections"><a href="#MySQL数据库-Too-many-connections" class="headerlink" title="MySQL数据库 Too many connections"></a>MySQL数据库 Too many connections</h3><p>从官方文档知道Linux上面编译安装的mysql默认的连接为100个</p><p>文档：<a href="http://dev.mysql.com/doc/refman/5.0/en/too-many-connections.html" target="_blank" rel="noopener">http://dev.mysql.com/doc/refman/5.0/en/too-many-connections.html</a></p><p>mysql官方告诉我们需要修改max_connections的值,那么我们怎么去修改呢？有两种方法</p><p><strong>1、修改配置文件文件</strong></p><p>修改/etc/my.cnf这个文件，在[mysqld] 中新增max_connections=N，如果你没有这个文件请从编译源码中的support-files文件夹中复制你所需要的*.cnf文件为到 /etc/my.cnf。我使用的是my-medium.cnf,中型服务器配置。例如我的[mysqld]的内容如下</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[mysqld]` `port = 3306` `socket = ``/tmp/mysql``.sock` `skip-locking` `key_buffer = 160M` `max_allowed_packet = 1M` `table_cache = 64` `sort_buffer_size = 512K` `net_buffer_length = 8K` `read_buffer_size = 256K` `read_rnd_buffer_size = 512K` `myisam_sort_buffer_size = 8M` `max_connections=1000</span><br></pre></td></tr></table></figure><p>由于对mysql还不是很熟悉，所以很多参数没有修改。哈哈。。</p><p><strong>2、非使用mysqld脚本自动启动的用户。</strong></p><p>修改MYSQLHOME/bin/mysqldsafe文件例如：/usr/local/mysql/bin/mysqldsafe这个文件grep−n‘maxconnection′</p><p>MYSQLHOME/bin/mysqldsafe文件例如：/usr/local/mysql/bin/mysqldsafe这个文件grep−n‘maxconnection′MYSQL_HOME/bin/mysqld_safe</p><p>修改对应行号的max_connections参数值</p><p><strong>3、服务器登录mysql ： mysql -u root -p</strong></p><p>百分之九十进不去，进不去的执行重启命令 ：/etc/init.d/mysql restart（centos系统）</p><p>此时重启mysql就能连接mysql了，如果还有时间，可以继续下一步，治病要治本</p><p>打开配置文件 添加一下配置 vi /etc/my.cnf</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wait_timeout = 600` `interactive_timeout = 600</span><br></pre></td></tr></table></figure><p>再次重启mysql即可</p><p><strong>原理解答</strong></p><p>mysql 默认100 连接数，超过则连不上，实际工作的连接数远远没有100，大部分在sleep</p><p>所以要么增大连接数，要么杀掉无用连接，推荐后者。</p><p>使用Navicat工具连接&gt;服务器监控&gt;查看进程数,杀掉进程数到100以内即可</p><h3 id="Linux下配置mysql允许指定IP远程访问"><a href="#Linux下配置mysql允许指定IP远程访问" class="headerlink" title="Linux下配置mysql允许指定IP远程访问"></a>Linux下配置mysql允许指定IP远程访问</h3><h4 id="登录数据库"><a href="#登录数据库" class="headerlink" title="登录数据库"></a>登录数据库</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@dev-database ~]# mysql -uroot -p</span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 10511</span><br><span class="line">Server version: 5.7.32 MySQL Community Server (GPL)</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2020, Oracle and/or its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement.</span><br></pre></td></tr></table></figure><h4 id="查看用户表"><a href="#查看用户表" class="headerlink" title="查看用户表"></a>查看用户表</h4><p>进入mysql数据库,查看用户表</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; use mysql;</span><br><span class="line">Reading table information for completion of table and column names</span><br><span class="line">You can turn off this feature to get a quicker startup with -A</span><br><span class="line"></span><br><span class="line">Database changed</span><br><span class="line">mysql&gt;  select Host,User from user;</span><br><span class="line">+-----------+---------------+</span><br><span class="line">| Host      | User          |</span><br><span class="line">+-----------+---------------+</span><br><span class="line">| localhost | root          |</span><br><span class="line">| localhost | exporter      |</span><br><span class="line">| localhost | mysql.session |</span><br><span class="line">| localhost | mysql.sys     |</span><br><span class="line">| localhost | root          |</span><br><span class="line">+-----------+---------------+</span><br><span class="line">8 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><h4 id="更新-授权用户表"><a href="#更新-授权用户表" class="headerlink" title="更新/授权用户表"></a>更新/授权用户表</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//更新用户表</span><br><span class="line">mysql&gt; update user  set Host = &apos;%&apos; where Host = &apos;localhost&apos; and user = &apos;root&apos;; </span><br><span class="line">或</span><br><span class="line">mysql&gt; UPDATE `user` SET `Host` = &apos;192.168.50.*&apos; where `Host` = &apos;localhost&apos; and user = &apos;root&apos;;</span><br><span class="line"></span><br><span class="line">mysql&gt; flush privileges;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">192.168.50.*是允许远程访问的IP的值,root是账户名 </span><br><span class="line">即，允许来自10.42.*.*的连接并使用root账户进行访问。 </span><br><span class="line">而IP这里，可以使用%来表示所有IP。</span><br><span class="line">第二行是使设置立刻生效。</span><br></pre></td></tr></table></figure><h4 id="mysql-创建只读账户"><a href="#mysql-创建只读账户" class="headerlink" title="mysql 创建只读账户"></a>mysql 创建只读账户</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、创建账户 并授权SELECT查询权限。 dbname可使用*代替所有数据库</span><br><span class="line"></span><br><span class="line">&gt; GRANT SELECT ON dbname.* TO &apos;onlyread&apos;@&apos;%&apos; IDENTIFIED BY &quot;password&quot;;</span><br><span class="line"></span><br><span class="line">2.刷新mysql权限，使用户创建、授权生效。</span><br><span class="line"></span><br><span class="line">&gt; FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure><h3 id="性能测试-——-MySQL-基准测试"><a href="#性能测试-——-MySQL-基准测试" class="headerlink" title="性能测试 —— MySQL 基准测试"></a>性能测试 —— MySQL 基准测试</h3><p>主要是 4 个指标：</p><ul><li>TPS ：Transactions Per Second ，即数据库每秒执行的事务数，以 commit 成功次数为准。</li><li>QPS ：Queries Per Second ，即数据库每秒执行的 SQL 数（含 insert、select、update、delete 等）。</li><li>RT ：Response Time ，响应时间。包括平均响应时间、最小响应时间、最大响应时间、每个响应时间的查询占比。比较需要重点关注的是，前 95-99% 的最大响应时间。因为它决定了大多数情况下的短板。</li><li>Concurrency Threads ：并发量，每秒可处理的查询请求的数量。</li></ul><h4 id="sysbench"><a href="#sysbench" class="headerlink" title="sysbench"></a>sysbench</h4><blockquote><p>sysbench 是一个模块化的、跨平台、多线程基准测试工具，主要用于评估测试各种不同系统参数下的数据库负载情况。它主要包括以下几种方式的测试：</p></blockquote><ul><li>CPU 性能</li><li>磁盘 IO 性能</li><li>调度程序性能</li><li>内存分配及传输速度</li><li>POSIX 线程性能</li><li>数据库性能(OLTP 基准测试)</li></ul><p>目前 sysbench 主要支持 MySQL、PgSQL、Oracle 这 3 种数据库。</p><h5 id="安装工具"><a href="#安装工具" class="headerlink" title="安装工具"></a>安装工具</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -s https://packagecloud.io/install/repositories/akopytov/sysbench/script.rpm.sh | sudo bash</span><br><span class="line">sudo yum -y install sysbench</span><br></pre></td></tr></table></figure><p>查看版本号</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sysbench --version</span><br><span class="line"></span><br><span class="line">sysbench 1.0.20</span><br></pre></td></tr></table></figure><h5 id="准备数据"><a href="#准备数据" class="headerlink" title="准备数据"></a>准备数据</h5><p>需要先创建数据库sbtest</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd /usr/share/sysbench/</span><br><span class="line">sysbench oltp_common.lua --time=300 --mysql-host=127.0.0.1 --mysql-port=3306 --mysql-user=root --mysql-password=nmk@0718 --mysql-db=sbtest --table-size=1000000 --tables=10 --threads=32 --events=999999999 prepare</span><br></pre></td></tr></table></figure><p><code>oltp_common.lua</code> ：执行的测试脚本。 <code>/usr/share/sysbench/</code> 目录下，可看到 sysbench 自带的 lua 测试脚本。</p><p><code>--time</code> ：最大的总执行时间，以秒为单位，默认为 10 秒。</p><p><code>--events</code> ：最大允许的事件个数，默认为 0 个。<br> 应该和 <code>--time</code> 互相形成最大的执行时间与次数。</p><p><code>--mysql-host</code> ：MySQL server host 。</p><p><code>--mysql-port</code> ：MySQL server port 。</p><p><code>--mysql-user</code> ：MySQL server 账号。</p><p><code>--mysql-password</code> ：MySQL server 密码。</p><p><code>--mysql-db</code> ：MySQL Server 数据库名。</p><p><code>--table-size</code> ：表记录条数。</p><p><code>--tables</code> ：表名。</p><p><code>--threads</code> ：要使用的线程数，默认 1 个。</p><p><code>--report-interval</code> ：以秒为单位定期报告具有指定间隔的中间统计信息，默认为 0 ，表示禁用中间报告。</p><p><code>prepare</code> ：执行准备数据。</p><p>执行命令后，会自动生成数据库的表、和数据。如下：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sysbench oltp_common.lua --time=300 --mysql-host=127.0.0.1 --mysql-port=3306 --mysql-user=root --mysql-password=nmk@0718 --mysql-db=sbtest --table-size=1000000 --tables=10 --threads=32 --events=999999999 prepare</span><br><span class="line">sysbench 1.0.20 (using bundled LuaJIT 2.1.0-beta2)</span><br><span class="line"></span><br><span class="line">Initializing worker threads...</span><br><span class="line"></span><br><span class="line">Creating table 'sbtest10'...</span><br><span class="line">Creating table 'sbtest9'...</span><br><span class="line">Creating table 'sbtest1'...</span><br><span class="line">Creating table 'sbtest4'...</span><br><span class="line">Creating table 'sbtest7'...</span><br><span class="line">Creating table 'sbtest3'...</span><br><span class="line">Creating table 'sbtest8'...</span><br><span class="line">Creating table 'sbtest5'...</span><br><span class="line">Creating table 'sbtest6'...</span><br><span class="line">Creating table 'sbtest2'...</span><br><span class="line">Inserting 1000000 records into 'sbtest1'</span><br><span class="line">Inserting 1000000 records into 'sbtest4'</span><br><span class="line">Inserting 1000000 records into 'sbtest8'</span><br><span class="line">Inserting 1000000 records into 'sbtest10'</span><br><span class="line">Inserting 1000000 records into 'sbtest6'</span><br><span class="line">Inserting 1000000 records into 'sbtest9'</span><br><span class="line">Inserting 1000000 records into 'sbtest2'</span><br><span class="line">Inserting 1000000 records into 'sbtest3'</span><br><span class="line">Inserting 1000000 records into 'sbtest7'</span><br><span class="line">Inserting 1000000 records into 'sbtest5'</span><br><span class="line">Creating a secondary index on 'sbtest8'...</span><br><span class="line">Creating a secondary index on 'sbtest10'...</span><br><span class="line">Creating a secondary index on 'sbtest7'...</span><br><span class="line">Creating a secondary index on 'sbtest1'...</span><br><span class="line">Creating a secondary index on 'sbtest5'...</span><br><span class="line">Creating a secondary index on 'sbtest2'...</span><br><span class="line">Creating a secondary index on 'sbtest6'...</span><br><span class="line">Creating a secondary index on 'sbtest3'...</span><br><span class="line">Creating a secondary index on 'sbtest4'...</span><br><span class="line">Creating a secondary index on 'sbtest9'...</span><br></pre></td></tr></table></figure><h5 id="执行测试"><a href="#执行测试" class="headerlink" title="执行测试"></a>执行测试</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sysbench oltp_read_write.lua --time=300 --mysql-host=127.0.0.1 --mysql-port=3306 --mysql-user=root --mysql-password=nmk@0718 --mysql-db=sbtest --table-size=1000000 --tables=10 --threads=16 --events=999999999  --report-interval=10  run</span><br></pre></td></tr></table></figure><p><code>oltp_read_write.lua</code> ：执行的测试脚本。此时，我们在 <code>/usr/share/sysbench/</code> 下，寻找我们想要测试的场景。<br> <code>oltp_read_write.lua</code> ，表示混合读写，在一个事务中，默认比例是：<code>select:update_key:update_non_key:delete:insert = 14:1:1:1:1</code> 。这也是为什么，我们测试出来的 TPS 和 QPS 的比例，大概在 1:18~20 左右。相当于说，一个事务中，有 18 个读写操作。</p><p><code>run</code> ：执行测试。</p><p>执行后，效果如下：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sysbench 1.0.20 (using bundled LuaJIT 2.1.0-beta2)</span><br><span class="line"></span><br><span class="line">Running the test with following options:</span><br><span class="line">Number of threads: 16</span><br><span class="line">Report intermediate results every 10 second(s)</span><br><span class="line">Initializing random number generator from current time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Initializing worker threads...</span><br><span class="line"></span><br><span class="line">Threads started!</span><br><span class="line"></span><br><span class="line">[ 10s ] thds: 16 tps: 84.35 qps: 1712.07 (r/w/o: 1199.55/342.21/170.31) lat (ms,95%): 493.24 err/s: 0.00 reconn/s: 0.00</span><br><span class="line">[ 20s ] thds: 16 tps: 81.80 qps: 1636.72 (r/w/o: 1147.52/325.60/163.60) lat (ms,95%): 484.44 err/s: 0.00 reconn/s: 0.00</span><br><span class="line">[ 30s ] thds: 16 tps: 67.11 qps: 1323.22 (r/w/o: 923.59/265.42/134.21) lat (ms,95%): 484.44 err/s: 0.00 reconn/s: 0.00</span><br><span class="line">[ 40s ] thds: 16 tps: 69.40 qps: 1390.70 (r/w/o: 974.00/277.90/138.80) lat (ms,95%): 484.44 err/s: 0.00 reconn/s: 0.00</span><br><span class="line">[ 50s ] thds: 16 tps: 64.80 qps: 1296.69 (r/w/o: 907.10/260.00/129.60) lat (ms,95%): 520.62 err/s: 0.00 reconn/s: 0.00</span><br><span class="line">[ 60s ] thds: 16 tps: 57.20 qps: 1162.30 (r/w/o: 815.80/232.10/114.40) lat (ms,95%): 467.30 err/s: 0.00 reconn/s: 0.00</span><br><span class="line">[ 70s ] thds: 16 tps: 67.50 qps: 1332.64 (r/w/o: 932.26/265.39/134.99) lat (ms,95%): 458.96 err/s: 0.00 reconn/s: 0.00</span><br><span class="line">[ 80s ] thds: 16 tps: 75.90 qps: 1531.58 (r/w/o: 1073.65/306.12/151.81) lat (ms,95%): 493.24 err/s: 0.00 reconn/s: 0.00</span><br><span class="line">[ 90s ] thds: 16 tps: 66.60 qps: 1314.38 (r/w/o: 917.29/263.90/133.20) lat (ms,95%): 511.33 err/s: 0.00 reconn/s: 0.00</span><br><span class="line">[ 100s ] thds: 16 tps: 66.70 qps: 1346.71 (r/w/o: 944.91/268.40/133.40) lat (ms,95%): 442.73 err/s: 0.00 reconn/s: 0.00</span><br><span class="line">[ 110s ] thds: 16 tps: 78.30 qps: 1555.41 (r/w/o: 1086.40/312.40/156.60) lat (ms,95%): 442.73 err/s: 0.00 reconn/s: 0.00</span><br><span class="line">[ 120s ] thds: 16 tps: 67.00 qps: 1335.70 (r/w/o: 934.50/267.20/134.00) lat (ms,95%): 484.44 err/s: 0.00 reconn/s: 0.00</span><br><span class="line">[ 130s ] thds: 16 tps: 79.90 qps: 1602.00 (r/w/o: 1121.60/320.60/159.80) lat (ms,95%): 442.73 err/s: 0.00 reconn/s: 0.00</span><br><span class="line">[ 140s ] thds: 16 tps: 74.50 qps: 1492.78 (r/w/o: 1046.49/297.30/149.00) lat (ms,95%): 493.24 err/s: 0.00 reconn/s: 0.00</span><br><span class="line">[ 150s ] thds: 16 tps: 66.40 qps: 1320.31 (r/w/o: 922.11/265.40/132.80) lat (ms,95%): 502.20 err/s: 0.00 reconn/s: 0.00</span><br><span class="line">[ 160s ] thds: 16 tps: 72.40 qps: 1448.70 (r/w/o: 1014.20/289.70/144.80) lat (ms,95%): 493.24 err/s: 0.00 reconn/s: 0.00</span><br><span class="line">[ 170s ] thds: 16 tps: 61.20 qps: 1228.50 (r/w/o: 860.80/245.30/122.40) lat (ms,95%): 539.71 err/s: 0.00 reconn/s: 0.00</span><br><span class="line">[ 180s ] thds: 16 tps: 71.10 qps: 1421.40 (r/w/o: 994.90/284.30/142.20) lat (ms,95%): 493.24 err/s: 0.00 reconn/s: 0.00</span><br><span class="line">[ 190s ] thds: 16 tps: 85.50 qps: 1728.80 (r/w/o: 1211.20/346.60/171.00) lat (ms,95%): 475.79 err/s: 0.00 reconn/s: 0.00</span><br><span class="line">[ 200s ] thds: 16 tps: 83.10 qps: 1642.10 (r/w/o: 1148.00/327.90/166.20) lat (ms,95%): 484.44 err/s: 0.00 reconn/s: 0.00</span><br><span class="line">[ 210s ] thds: 16 tps: 73.40 qps: 1481.79 (r/w/o: 1040.30/294.70/146.80) lat (ms,95%): 530.08 err/s: 0.00 reconn/s: 0.00</span><br><span class="line">[ 220s ] thds: 16 tps: 66.00 qps: 1302.51 (r/w/o: 908.31/262.20/132.00) lat (ms,95%): 484.44 err/s: 0.00 reconn/s: 0.00</span><br><span class="line">[ 230s ] thds: 16 tps: 78.00 qps: 1560.70 (r/w/o: 1092.70/312.00/156.00) lat (ms,95%): 442.73 err/s: 0.00 reconn/s: 0.00</span><br><span class="line">[ 240s ] thds: 16 tps: 80.20 qps: 1624.76 (r/w/o: 1139.97/324.39/160.40) lat (ms,95%): 493.24 err/s: 0.00 reconn/s: 0.00</span><br><span class="line">[ 250s ] thds: 16 tps: 85.50 qps: 1692.85 (r/w/o: 1183.14/338.71/171.01) lat (ms,95%): 502.20 err/s: 0.00 reconn/s: 0.00</span><br><span class="line">[ 260s ] thds: 16 tps: 81.50 qps: 1627.90 (r/w/o: 1139.10/325.80/163.00) lat (ms,95%): 511.33 err/s: 0.00 reconn/s: 0.00</span><br><span class="line">[ 270s ] thds: 16 tps: 79.00 qps: 1579.80 (r/w/o: 1105.20/316.60/158.00) lat (ms,95%): 502.20 err/s: 0.00 reconn/s: 0.00</span><br><span class="line">[ 280s ] thds: 16 tps: 83.38 qps: 1688.98 (r/w/o: 1185.67/336.54/166.77) lat (ms,95%): 475.79 err/s: 0.00 reconn/s: 0.00</span><br><span class="line">[ 290s ] thds: 16 tps: 71.51 qps: 1412.67 (r/w/o: 986.29/283.35/143.03) lat (ms,95%): 467.30 err/s: 0.00 reconn/s: 0.00</span><br><span class="line">[ 300s ] thds: 16 tps: 87.60 qps: 1759.34 (r/w/o: 1234.26/350.19/174.89) lat (ms,95%): 493.24 err/s: 0.00 reconn/s: 0.00</span><br><span class="line">SQL statistics:</span><br><span class="line">    queries performed:</span><br><span class="line">        read:                            311990</span><br><span class="line">        write:                           89140</span><br><span class="line">        other:                           44570</span><br><span class="line">        total:                           445700</span><br><span class="line">    transactions:                        22285  (74.27 per sec.)</span><br><span class="line">    queries:                             445700 (1485.31 per sec.)</span><br><span class="line">    ignored errors:                      0      (0.00 per sec.)</span><br><span class="line">    reconnects:                          0      (0.00 per sec.)</span><br><span class="line"></span><br><span class="line">General statistics:</span><br><span class="line">    total time:                          300.0677s</span><br><span class="line">    total number of events:              22285</span><br><span class="line"></span><br><span class="line">Latency (ms):</span><br><span class="line">         min:                                    8.23</span><br><span class="line">         avg:                                  215.40</span><br><span class="line">         max:                                 1186.15</span><br><span class="line">         95th percentile:                      493.24</span><br><span class="line">         sum:                              4800079.56</span><br><span class="line"></span><br><span class="line">Threads fairness:</span><br><span class="line">    events (avg/stddev):           1392.8125/8.30</span><br><span class="line">    execution time (avg/stddev):   300.0050/0.01</span><br></pre></td></tr></table></figure><p>机械盘16 线程 + 每个表 100w 数据：74TPS+1485QPS+215ms延迟</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SQL statistics:</span><br><span class="line">    queries performed:</span><br><span class="line">        read:                            1076334</span><br><span class="line">        write:                           307524</span><br><span class="line">        other:                           153762</span><br><span class="line">        total:                           1537620</span><br><span class="line">    transactions:                        76881  (256.22 per sec.)</span><br><span class="line">    queries:                             1537620 (5124.31 per sec.)</span><br><span class="line">    ignored errors:                      0      (0.00 per sec.)</span><br><span class="line">    reconnects:                          0      (0.00 per sec.)</span><br><span class="line"></span><br><span class="line">General statistics:</span><br><span class="line">    total time:                          300.0601s</span><br><span class="line">    total number of events:              76881</span><br><span class="line"></span><br><span class="line">Latency (ms):</span><br><span class="line">         min:                                   12.82</span><br><span class="line">         avg:                                   62.43</span><br><span class="line">         max:                                  316.03</span><br><span class="line">         95th percentile:                      125.52</span><br><span class="line">         sum:                              4799650.04</span><br><span class="line"></span><br><span class="line">Threads fairness:</span><br><span class="line">    events (avg/stddev):           4805.0625/25.22</span><br><span class="line">    execution time (avg/stddev):   299.9781/0.01</span><br></pre></td></tr></table></figure><p>SSD盘16 线程 + 每个表 100w 数据：256TPS+5124QPS+62ms延迟</p><h5 id="清理数据"><a href="#清理数据" class="headerlink" title="清理数据"></a>清理数据</h5><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">sysbench oltp_read_write.lua --time=<span class="number">300</span> --mysql-host=<span class="number">127.0</span>.<span class="number">0.1</span> --mysql-port=<span class="number">3306</span> --mysql-user=root --mysql-password=<span class="type">MyNewPass4!</span> --mysql-db=sbtest --table-size=<span class="number">1000000</span> --tables=<span class="number">10</span> --threads=<span class="number">16</span> --events=<span class="number">999999999</span>  --report-interval=<span class="number">10</span>  cleanup</span><br></pre></td></tr></table></figure><ul><li><code>cleanup</code> ：执行清理数据。</li></ul><p>效果如下：</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[<span class="meta">root@iZuf6hci646px19gg3hpuwZ sysbench</span>]<span class="meta"># sysbench oltp_read_write.lua --time=300 --mysql-host=127.0.0.1 --mysql-port=3306 --mysql-user=root --mysql-password=MyNewPass4! --mysql-db=sbtest --table-size=1000000 --tables=10 --threads=16 --events=999999999 --rate=0 --histogram=on  --report-interval=10  runC^C</span></span><br><span class="line">[<span class="meta">root@iZuf6hci646px19gg3hpuwZ sysbench</span>]<span class="meta"># sysbench oltp_read_write.lua --time=300 --mysql-host=127.0.0.1 --mysql-port=3306 --mysql-user=root --mysql-password=MyNewPass4! --mysql-db=sbtest --table-size=1000000 --tables=10 --threads=16 --events=999999999  --report-interval=10  cleanup</span></span><br><span class="line">sysbench <span class="number">1.0</span><span class="number">.17</span> (<span class="keyword">using</span> system LuaJIT <span class="number">2.0</span><span class="number">.4</span>)</span><br><span class="line"></span><br><span class="line">Dropping table <span class="string">'sbtest1'</span>...</span><br><span class="line">Dropping table <span class="string">'sbtest2'</span>...</span><br><span class="line">Dropping table <span class="string">'sbtest3'</span>...</span><br><span class="line">Dropping table <span class="string">'sbtest4'</span>...</span><br><span class="line">Dropping table <span class="string">'sbtest5'</span>...</span><br><span class="line">Dropping table <span class="string">'sbtest6'</span>...</span><br><span class="line">Dropping table <span class="string">'sbtest7'</span>...</span><br><span class="line">Dropping table <span class="string">'sbtest8'</span>...</span><br><span class="line">Dropping table <span class="string">'sbtest9'</span>...</span><br><span class="line">Dropping table <span class="string">'sbtest10'</span>...</span><br></pre></td></tr></table></figure><h5 id="其他参数"><a href="#其他参数" class="headerlink" title="其他参数"></a>其他参数</h5><ul><li><code>--warmup_time</code> ：预热时间，预防冷数据对测试结果的影响。</li><li>这个参数加下也是有必要的，因为线上的数据，实际是一直在跑的，不会处于冷数据的状态。</li><li><code>-rate</code> ：指定数量多少事件(事务)平均每秒钟应该执行的所有线程。0(默认)意味着无限的速率，即事件尽快执行。</li><li>不是很理解这个参数，不过确实增加了这个参数，QPS 和 TPS 都有一定的提升。</li><li><code>-histogram</code> ：输出测试过程中系统响应时间的分布。</li><li>增加该参数，执行结果会多一个柱状图结果。</li><li><code>percentile</code> ：在延迟统计数据中计算的百分点 (1-100)，使用特殊值 0 来禁用百分比计算，默认为 95 。</li></ul><h5 id="mysqlslap"><a href="#mysqlslap" class="headerlink" title="mysqlslap"></a>mysqlslap</h5><blockquote><p> mysqlslap 是一个 MySQL 官方提供的压力测试工具。</p></blockquote><p>比较大的优势，在于 mysqlslap 是 MySQL 官方所提供，并且提供多种引擎的性能测试。</p><h5 id="测试过程"><a href="#测试过程" class="headerlink" title="测试过程"></a>测试过程</h5><p>相比 sysbench 来说，mysqlslap 的测试过程还是比较简洁的，一个命令，即可完成整个过程。如下：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">mysqlslap --concurrency=<span class="number">16</span>,<span class="number">32</span> --iterations=<span class="number">3</span> --number-<span class="keyword">int</span>-cols=<span class="number">1</span> --number-<span class="keyword">char</span>-cols=<span class="number">2</span> --<span class="keyword">auto</span>-generate-sql --<span class="keyword">auto</span>-generate-sql-add-autoincrement --engine=innodb --number-of-queries=<span class="number">10000</span> --create-schema=sbtest2 -uroot -pMyNewPass4!</span><br></pre></td></tr></table></figure><ul><li><code>--concurrency</code> ：并发量，也就是模拟多少个客户端同时执行命令。可指定多个值，以逗号或者 <code>–delimiter</code> 参数指定的值做为分隔符</li><li><code>--iterations</code> ：测试执行的迭代次数。</li><li><code>--number-int-cols</code> ：自动生成的测试表中包含多少个数字类型的列，默认 1 。此处设置为 1 的原因是，因为我们上面 sysbench 我们生成了一个 int 类型的字段。</li><li><code>--number-char-cols</code> ：自动生成的测试表中包含多少个字符类型的列，默认 1 。此处设置为 2 的原因是，因为我们上面 sysbench 我们生成了一个 char 类型的字段。</li><li><code>--auto-generate-sql</code> ：自动生成测试表和数据。这个命令，带来的效果，就类似 sysbench 命令的 prepare 指令。</li><li><code>--auto-generate-sql-add-autoincrement</code> ：增加 auto_increment 一列。</li><li>如果想看，生成的具体脚本，可以用 <code>–only-print</code> 指令，只打印测试语句而不实际执行。</li><li><code>--engine</code> ：创建测试表所使用的存储引擎，可指定多个。</li><li><code>--number-of-queries</code> ：总的测试查询次数(并发客户数×每客户查询次数)。</li><li><code>--create-schema</code> ：测试的 schema ，MySQL中 schema 也就是 database 数据库名。</li><li><code>-uroot -pMyNewPass4!</code> ：设置 MySQL 账号和密码。</li></ul><p>执行命令后，效果如下图：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@iZuf6hci646px19gg3hpuwZ sysbench]# mysqlslap --concurrency=16,32 --iterations=3 --number-int-cols=1 --number-char-cols=2 --auto-generate-sql --auto-generate-sql-add-autoincrement --engine=innodb --number-of-queries=10000 --create-schema=sbtest2 -uroot -pMyNewPass4!</span><br><span class="line">mysqlslap: [Warning] Using a password on the command line interface can be insecure.</span><br><span class="line">Benchmark</span><br><span class="line">    Running for engine innodb</span><br><span class="line">    Average number of seconds to run all queries: 0.489 seconds</span><br><span class="line">    Minimum number of seconds to run all queries: 0.486 seconds</span><br><span class="line">    Maximum number of seconds to run all queries: 0.496 seconds</span><br><span class="line">    Number of clients running queries: 16</span><br><span class="line">    Average number of queries per client: 625</span><br><span class="line"></span><br><span class="line">Benchmark</span><br><span class="line">    Running for engine innodb</span><br><span class="line">    Average number of seconds to run all queries: 0.379 seconds</span><br><span class="line">    Minimum number of seconds to run all queries: 0.377 seconds</span><br><span class="line">    Maximum number of seconds to run all queries: 0.382 seconds</span><br><span class="line">    Number of clients running queries: 32</span><br><span class="line">    Average number of queries per client: 312</span><br></pre></td></tr></table></figure><ul><li>第一个，使用 16 个线程（客户端），平均延迟在 0.489 秒。</li><li>第二个，使用 32 个线程（客户端），平均延迟在 0.379 秒。</li></ul><p>参考文档<br><a href="https://www.jianshu.com/p/d464e51aa026" target="_blank" rel="noopener">https://www.jianshu.com/p/d464e51aa026</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;安装mysql&quot;&gt;&lt;a href=&quot;#安装mysql&quot; class=&quot;headerlink&quot; title=&quot;安装mysql&quot;&gt;&lt;/a&gt;安装mysql&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=</summary>
      
    
    
    
    
    <category term="database" scheme="https://nmk0718.github.io/tag/database/"/>
    
    <category term="mysql" scheme="https://nmk0718.github.io/tag/mysql/"/>
    
  </entry>
  
  <entry>
    <title>redis</title>
    <link href="https://nmk0718.github.io/2020/04/08/Tomcat%E5%AE%9E%E7%8E%B0redis%E5%85%B1%E4%BA%AB/"/>
    <id>https://nmk0718.github.io/2020/04/08/Tomcat%E5%AE%9E%E7%8E%B0redis%E5%85%B1%E4%BA%AB/</id>
    <published>2020-04-08T14:30:00.000Z</published>
    <updated>2025-01-05T15:43:07.572Z</updated>
    
    <content type="html"><![CDATA[<p>官网地址:<a href="https://redis.io/" target="_blank" rel="noopener">https://redis.io/</a></p><p>下载</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget http://download.redis.io/releases/redis-5.0.8.tar.gz</span><br></pre></td></tr></table></figure><p>解压</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar zxvf redis-5.0.8.tar.gz</span><br></pre></td></tr></table></figure><p>安装</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd redis-5.0.8</span><br><span class="line">make (执行make，出现错误时，进行如下操作）</span><br><span class="line"></span><br><span class="line">yum install -y gcc g++ gcc-c++ make</span><br><span class="line">#因为Redis是C实现的，需要gcc来进行编译，所以原因是系统未安装gcc</span><br><span class="line">make MALLOC=libc</span><br><span class="line">#再次执行make，若make出现错误为：致命错误</span><br><span class="line"></span><br><span class="line">cd src</span><br><span class="line">./redis-server &amp; </span><br><span class="line">#启动服务 &amp;为后台启动</span><br></pre></td></tr></table></figure><p>修改配置</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd redis-5.0.8</span><br><span class="line">vi redis.conf</span><br><span class="line"></span><br><span class="line">port 9376</span><br><span class="line">#修改默认端口6379为9376</span><br><span class="line"></span><br><span class="line">requirepass nmk0718</span><br><span class="line">#添加密码</span><br><span class="line"></span><br><span class="line">bind 127.0.0.1</span><br><span class="line">#如绑定为127.0.0只能本地能连接,如果配置为内网ip,则局域网都能调用</span><br><span class="line"></span><br><span class="line">databases 10</span><br><span class="line">#设置数据库个数，默认使用的数据库为0</span><br><span class="line"></span><br><span class="line">logfile &quot;/home/redis/redis.log&quot;</span><br><span class="line">#用于配置log文件地址</span><br><span class="line"></span><br><span class="line">daemonize yes</span><br><span class="line">#修改daemonize no改为daemonize yes,让redis后台运行</span><br><span class="line"></span><br><span class="line">如修改redis.conf</span><br><span class="line">需要使用进入redis目录使用./src/redis-server redis.conf进行加载配置</span><br></pre></td></tr></table></figure><p>开机启动</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi /etc/rc.local</span><br><span class="line">/root/redis-4.0.6/src/redis-server /root/redis-4.0.6/src/redis.conf</span><br></pre></td></tr></table></figure><p>查看server进程</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ps -ef |grep redis</span><br></pre></td></tr></table></figure><p>启动 redis-cli ，测试是否成功：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@nmk src]# ./redis-cli</span><br><span class="line">127.0.0.1:6379&gt; set name nmk</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get name</span><br><span class="line">&quot;nmk&quot;</span><br></pre></td></tr></table></figure><h3 id="Tomcat实现redis共享"><a href="#Tomcat实现redis共享" class="headerlink" title="Tomcat实现redis共享"></a>Tomcat实现redis共享</h3><p>jedis.jar:<a href="https://repo1.maven.org/maven2/redis/clients/jedis/2.9.0/jedis-2.9.0.jar" target="_blank" rel="noopener">jedis.jar</a></p><p>commons-pool.jar:<a href="https://repo1.maven.org/maven2/org/apache/commons/commons-pool2/2.4.2/commons-pool2-2.4.2.jar" target="_blank" rel="noopener">commons-pool.jar</a></p><p>TomcatRedisSessionManager.jar:<a href="https://repo1.maven.org/maven2/com/bluejeans/tomcat-redis-session-manager/2.0.0/tomcat-redis-session-manager-2.0.0.jar" target="_blank" rel="noopener">TomcatRedisSessionManager.jar</a></p><p>把三个文件放入tomcat的lib文件夹下</p><p>修改tomcat/conf/context.xml,在前加入以下代码</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#请根据实际情况修改</span><br><span class="line">&lt;Valve className=&quot;com.orangefunction.tomcat.redissessions.RedisSessionHandlerValve&quot;/&gt;</span><br><span class="line">&lt;Manager className=&quot;com.orangefunction.tomcat.redissessions.RedisSessionManager&quot; </span><br><span class="line">        host=&quot;127.0.0.1&quot;       </span><br><span class="line">        port=&quot;6379&quot;                 </span><br><span class="line">        password=&quot;nmk@2020&quot;            </span><br><span class="line">        database=&quot;10&quot;                 </span><br><span class="line">        maxInactiveInterval=&quot;60&quot; /&gt;</span><br></pre></td></tr></table></figure><p>即可实现redis共享</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;官网地址:&lt;a href=&quot;https://redis.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://redis.io/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下载&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;tabl</summary>
      
    
    
    
    
    <category term="redis" scheme="https://nmk0718.github.io/tag/redis/"/>
    
  </entry>
  
  <entry>
    <title>easyimage</title>
    <link href="https://nmk0718.github.io/2020/04/02/easyimage/"/>
    <id>https://nmk0718.github.io/2020/04/02/easyimage/</id>
    <published>2020-04-02T06:00:00.000Z</published>
    <updated>2024-11-29T06:43:03.823Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简单图床"><a href="#简单图床" class="headerlink" title="简单图床"></a>简单图床</h2><h3 id="安装php"><a href="#安装php" class="headerlink" title="安装php"></a>安装php</h3><p>卸载php旧版本</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum remove php*</span><br></pre></td></tr></table></figure><p>安装拓展</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install php72w php72w-cli php72w-common php72w-devel php72w-embedded php72w-fpm php72w-gd php72w-mbstring php72w-mysqlnd php72w-opcache php72w-pdo php72w-xml php72w-ldap php72w-mcrypt</span><br></pre></td></tr></table></figure><p>查看php版本</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">php -v</span><br></pre></td></tr></table></figure><p>查看拓展</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">php -m</span><br></pre></td></tr></table></figure><p>修改php的配置文件</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#查看php安装位置</span><br><span class="line">whereis php</span><br><span class="line">#编辑php配置文件</span><br><span class="line">vim etc/php.ini</span><br><span class="line">#修改upload_max_size: 50M和post_max_size: 50M</span><br></pre></td></tr></table></figure><p>下载easyimage</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget https://github.com/icret/EasyImages2.0/archive/master.zip</span><br></pre></td></tr></table></figure><p>解压</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">unzip master.zip</span><br></pre></td></tr></table></figure><p>把解压出来文件夹内的所有文件放到/var/www/html下</p><p>安装Apache</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum -y install httpd httpd-devel</span><br></pre></td></tr></table></figure><p>启动httpd</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl start httpd</span><br></pre></td></tr></table></figure><p>访问</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http://ip:port/</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;简单图床&quot;&gt;&lt;a href=&quot;#简单图床&quot; class=&quot;headerlink&quot; title=&quot;简单图床&quot;&gt;&lt;/a&gt;简单图床&lt;/h2&gt;&lt;h3 id=&quot;安装php&quot;&gt;&lt;a href=&quot;#安装php&quot; class=&quot;headerlink&quot; title=&quot;安装php&quot;&gt;</summary>
      
    
    
    
    
    <category term="easyimage" scheme="https://nmk0718.github.io/tag/easyimage/"/>
    
  </entry>
  
  <entry>
    <title>Docker</title>
    <link href="https://nmk0718.github.io/2020/03/31/docker/"/>
    <id>https://nmk0718.github.io/2020/03/31/docker/</id>
    <published>2020-03-31T09:00:00.000Z</published>
    <updated>2024-11-29T06:43:00.553Z</updated>
    
    <content type="html"><![CDATA[<h4 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum -y install docker</span><br></pre></td></tr></table></figure><h4 id="查看docker容器版本"><a href="#查看docker容器版本" class="headerlink" title="查看docker容器版本"></a>查看docker容器版本</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker version</span><br></pre></td></tr></table></figure><h4 id="查看docker容器信息"><a href="#查看docker容器信息" class="headerlink" title="查看docker容器信息"></a>查看docker容器信息</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker info</span><br></pre></td></tr></table></figure><h4 id="修改存储路径"><a href="#修改存储路径" class="headerlink" title="修改存储路径"></a>修改存储路径</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#Docker的镜像需在大量的存储空间，默认的存储路径在 /var/lib/docker, 可以按实际需求修改存储路径。</span><br><span class="line">#停止docker</span><br><span class="line">service docker stop</span><br><span class="line">#创建目录</span><br><span class="line">mkdir -p /data/docker</span><br><span class="line">#移动目录到新路径</span><br><span class="line">mv /var/lib/docker /data/docker</span><br><span class="line">#做个软链接</span><br><span class="line">ln -s /data/docker /var/lib/docker </span><br><span class="line">#启动docker</span><br><span class="line">service docker start</span><br></pre></td></tr></table></figure><h4 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker pull tomcat</span><br><span class="line">#相当于 docker pull centos:latest 最新版本,可以手动指定版本</span><br></pre></td></tr></table></figure><h4 id="查看容器的所有镜像"><a href="#查看容器的所有镜像" class="headerlink" title="查看容器的所有镜像"></a>查看容器的所有镜像</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><h4 id="查看容器的运行状态"><a href="#查看容器的运行状态" class="headerlink" title="查看容器的运行状态"></a>查看容器的运行状态</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker stats</span><br></pre></td></tr></table></figure><h4 id="查看容器运行的镜像"><a href="#查看容器运行的镜像" class="headerlink" title="查看容器运行的镜像"></a>查看容器运行的镜像</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker ps</span><br><span class="line">#可以使用grep过滤镜像</span><br><span class="line">docker ps |grep tomcat</span><br></pre></td></tr></table></figure><h4 id="查看容器历史运行过的镜像"><a href="#查看容器历史运行过的镜像" class="headerlink" title="查看容器历史运行过的镜像"></a>查看容器历史运行过的镜像</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure><h4 id="显示运行容器总文件大小"><a href="#显示运行容器总文件大小" class="headerlink" title="显示运行容器总文件大小"></a>显示运行容器总文件大小</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker ps -s</span><br></pre></td></tr></table></figure><h4 id="镜像启动"><a href="#镜像启动" class="headerlink" title="镜像启动"></a>镜像启动</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run -d -p 8080:8080 -v /data:/data --name=mytomcat tomcat </span><br><span class="line">#-d: 后台运行容器，并返回容器ID；</span><br><span class="line">#-i: 以交互模式运行容器，通常与 -t 同时使用；</span><br><span class="line">#-t: 为容器重新分配一个伪输入终端，通常与 -i 同时使用；</span><br><span class="line">#-p：前者是外围访问端口：后者是容器内部端口</span><br><span class="line">#--volume,-v: 宿主机的目录/data映射到容器的/data</span><br><span class="line">#--name=&quot;nginx-lb&quot;: 为容器指定一个名称；</span><br></pre></td></tr></table></figure><h4 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker exec -it [CONTAINER ID] /bin/bash</span><br></pre></td></tr></table></figure><h4 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker rmi [CONTAINER ID]</span><br><span class="line"></span><br><span class="line">如果出现应用出错：Error response from daemon: conflict: unable to delete CONTAINER ID(cannot be forced) - image has dependent child images</span><br><span class="line">docker rmi REPOSITORY:TAG</span><br></pre></td></tr></table></figure><h4 id="删除运行失败的镜像"><a href="#删除运行失败的镜像" class="headerlink" title="删除运行失败的镜像"></a>删除运行失败的镜像</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker rm [CONTAINER ID]</span><br><span class="line">#删除运行中的镜像需要先停止该容器,然后使用上述命令。使用-f可强制删除</span><br></pre></td></tr></table></figure><h4 id="删除所有none镜像"><a href="#删除所有none镜像" class="headerlink" title="删除所有none镜像"></a>删除所有none镜像</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker rmi `docker images | grep  &quot;&lt;none&gt;&quot; | awk &apos;&#123;print $3&#125;&apos;`</span><br></pre></td></tr></table></figure><h4 id="删除不是latest的镜像"><a href="#删除不是latest的镜像" class="headerlink" title="删除不是latest的镜像"></a>删除不是latest的镜像</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker rmi `docker images|grep -v latest |awk &apos;&#123;print $3&#125;&apos;`</span><br></pre></td></tr></table></figure><h4 id="删除Exited状态的容器"><a href="#删除Exited状态的容器" class="headerlink" title="删除Exited状态的容器"></a>删除Exited状态的容器</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker rm `docker ps -a|grep Exited|awk &apos;&#123;print $1&#125;&apos;`</span><br></pre></td></tr></table></figure><h4 id="根据镜像名删除镜像"><a href="#根据镜像名删除镜像" class="headerlink" title="根据镜像名删除镜像"></a>根据镜像名删除镜像</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker images | grep wecloud | awk &apos;&#123;print $1&quot;:&quot;$2&#125;&apos; | xargs docker rmi</span><br></pre></td></tr></table></figure><h4 id="删除一周之前的镜像-一个月内"><a href="#删除一周之前的镜像-一个月内" class="headerlink" title="删除一周之前的镜像(一个月内)"></a>删除一周之前的镜像(一个月内)</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker images | grep weeks | awk &apos;&#123;print $3&#125;&apos;|xargs docker rmi</span><br></pre></td></tr></table></figure><h4 id="删除一周之前的所有镜像"><a href="#删除一周之前的所有镜像" class="headerlink" title="删除一周之前的所有镜像"></a>删除一周之前的所有镜像</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for i in &#123;&quot;weeks&quot;,&quot;months&quot;&#125;;</span><br><span class="line">docker images | grep $i | awk &apos;&#123;print $3&#125;&apos;|xargs docker rmi</span><br><span class="line">docker images | grep $i | awk &apos;&#123;print $3&#125;&apos;|xargs docker rmi</span><br><span class="line">;done</span><br></pre></td></tr></table></figure><h4 id="创建dockerfile"><a href="#创建dockerfile" class="headerlink" title="创建dockerfile"></a>创建dockerfile</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from tomcat #tomcat的镜像</span><br><span class="line">MAINTAINER nmk #作者</span><br><span class="line">RUN rm -rf /usr/local/tomcat/webapps/*  #运行的命令</span><br><span class="line">COPY nmk.war /usr/local/tomcat/webapps #复制war包到tomcat的webapps目录下</span><br><span class="line">EXPOSE 8080  #开放端口</span><br></pre></td></tr></table></figure><h4 id="镜像构建"><a href="#镜像构建" class="headerlink" title="镜像构建"></a>镜像构建</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker build -f /data/docker/dockerfile -t mytomcat:1.1</span><br><span class="line">#-f :指定要使用的Dockerfile路径；</span><br><span class="line">#--tag, -t: 镜像的名字及标签，通常 name:tag 或者 name 格式；</span><br></pre></td></tr></table></figure><h4 id="推送到阿里云镜像仓库"><a href="#推送到阿里云镜像仓库" class="headerlink" title="推送到阿里云镜像仓库"></a>推送到阿里云镜像仓库</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#登录阿里云Docker Registry</span><br><span class="line">docker login --username=aliyunaccount registry.cn-beijing.aliyuncs.com</span><br><span class="line">#镜像打tag</span><br><span class="line">docker tag [ImageId] registry.cn-beijing.aliyuncs.com/nmk/tomcat:[镜像版本号]</span><br><span class="line">#推送到阿里云</span><br><span class="line">docker push registry.cn-beijing.aliyuncs.com/nmk/tomcat:[镜像版本号]</span><br><span class="line">#拉取阿里云镜像</span><br><span class="line">docker pull registry.cn-beijing.aliyuncs.com/lepeng/tomcat:[镜像版本号]</span><br></pre></td></tr></table></figure><h4 id="从宿主机拷贝到容器"><a href="#从宿主机拷贝到容器" class="headerlink" title="从宿主机拷贝到容器"></a>从宿主机拷贝到容器</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker cp files.txt [CONTAINER ID或NAMES]:/home</span><br></pre></td></tr></table></figure><h4 id="从容器拷贝到宿主机"><a href="#从容器拷贝到宿主机" class="headerlink" title="从容器拷贝到宿主机"></a>从容器拷贝到宿主机</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker cp [CONTAINER ID或NAMES]:/home/files.txt  /home/</span><br></pre></td></tr></table></figure><h4 id="镜像导入导出有两种方法"><a href="#镜像导入导出有两种方法" class="headerlink" title="镜像导入导出有两种方法"></a>镜像导入导出有两种方法</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#指定镜像保存成tar归档文件</span><br><span class="line">docker save -o files.tar tomcat:7.5</span><br><span class="line">#载入打包的镜像</span><br><span class="line">docker load -i files.tar</span><br><span class="line">#指定镜像保存成tar归档文件</span><br><span class="line">docker export -o tomcat.tar [CONTAINER ID]</span><br><span class="line">#载入打包的镜像</span><br><span class="line">docker import tomcat.tar tomcat:latest</span><br><span class="line"></span><br><span class="line">#总结一下docker save和docker export的区别：</span><br><span class="line">1.docker save保存的是镜像（image），docker export保存的是容器（container）；</span><br><span class="line">2.docker load用来载入镜像包，docker import用来载入容器包，但两者都会恢复为镜像；</span><br><span class="line">3.docker load不能对载入的镜像重命名，而docker import可以为镜像指定新名称。</span><br><span class="line">#注:docker save保存的镜像docker load不能载入,docker export保存的镜像,docker import不能载入</span><br><span class="line">#详解请看:https://blog.csdn.net/liukuan73/article/details/78089138</span><br></pre></td></tr></table></figure><h4 id="删除repo不none空tag为none的镜像"><a href="#删除repo不none空tag为none的镜像" class="headerlink" title="删除repo不none空tag为none的镜像"></a>删除repo不none空tag为none的镜像</h4><p>在docker中，一个镜像的所有标记（TAG）都被删除，而镜像仍然还在时，我们称之为dangling状态。这种镜像，在通过docker images（或者docker image ls）时，会表现为REPOSITORY和TAG都是<none>，但是IMAGE ID有效。要删除这种镜像很简单，直接执行docker image prune即可清除。</none></p><p>还有另外一种状态的镜像，就是其REPOSITORY是有效的，但是其TAG是<none>，这个时候这种镜像既无法通过prune清除，也无法通过常规的docker image rm来删除。</none></p><p>在docker images查看镜像列表时，默认是不会显示镜像的digest的。需要手动加上–digests=true参数，才能看到形如“sha256:xxxxx”的digest信息。这个时候，用镜像的REPOSITORY➕@➕digest即可精确引用到该镜像，从而删除。</p><p>比如，通过docker images –digests=true看到如下镜像：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">REPOSITORY TAG DIGEST IMAGE ID CREATED SIZE</span><br><span class="line">node &lt;none&gt; sha256:016052a6780d578fff9ac8822e66dd483db6ffb94573028b36cdd6ea48e98082 993f38da6c6c 11 days ago 677MB</span><br></pre></td></tr></table></figure><p>可以看到，这个node镜像，他的TAG是none，DIGEST是sha256:016052a6780d578fff9ac8822e66dd483db6ffb94573028b36cdd6ea48e98082。这个镜像无法通过docker rmi node或者docker rmi node:<none>删除。如果要删除它，需要执行</none></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker rmi node@sha256:016052a6780d578fff9ac8822e66dd483db6ffb94573028b36cdd6ea48e98082</span><br></pre></td></tr></table></figure><h4 id="清理overlay2"><a href="#清理overlay2" class="headerlink" title="清理overlay2"></a>清理overlay2</h4><h5 id="查看Docker的磁盘使用情况"><a href="#查看Docker的磁盘使用情况" class="headerlink" title="查看Docker的磁盘使用情况"></a>查看Docker的磁盘使用情况</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost docker]# docker system df</span><br><span class="line">TYPE                TOTAL               ACTIVE              SIZE                RECLAIMABLE</span><br><span class="line">Images              70                  70                  9.231GB             1.601GB (17%)</span><br><span class="line">Containers          200                 138                 4.292GB             0B (0%)</span><br><span class="line">Local Volumes       0                   0                   0B                  0B</span><br><span class="line">Build Cache         0                   0                   0B                  0B</span><br></pre></td></tr></table></figure><h5 id="查看当前目录最大的文件或目录的前五个"><a href="#查看当前目录最大的文件或目录的前五个" class="headerlink" title="查看当前目录最大的文件或目录的前五个"></a>查看当前目录最大的文件或目录的前五个</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd /var/lib/docker/containers/</span><br><span class="line">du -h --max-depth=1 |sort -rn |head -n 5</span><br></pre></td></tr></table></figure><h5 id="可清理容器的启动日志"><a href="#可清理容器的启动日志" class="headerlink" title="可清理容器的启动日志"></a>可清理容器的启动日志</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ls -lh #查看占用最大的文件为id-json.log</span><br><span class="line">cat /dev/null &gt; *-json.log</span><br></pre></td></tr></table></figure><h5 id="自动清理磁盘"><a href="#自动清理磁盘" class="headerlink" title="自动清理磁盘"></a>自动清理磁盘</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker system prune</span><br><span class="line">该指令默认会清除所有如下资源：</span><br><span class="line">已停止的容器（container）</span><br><span class="line">未被任何容器所使用的卷（volume）</span><br><span class="line">未被任何容器所关联的网络（network）</span><br><span class="line">所有悬空镜像（image）</span><br><span class="line">该指令默认只会清除悬空镜像，未被使用的镜像不会被删除。</span><br><span class="line">添加 -a 或 --all 参数后，可以一并清除所有未使用的镜像和悬空镜像。</span><br><span class="line">可以添加 -f 或 --force 参数用以忽略相关告警确认信息</span><br><span class="line"></span><br><span class="line">注意:docker system prune -a命令清理得更加彻底，可以将没有容器使用Docker镜像都删掉。注意，这两个命令会把你暂时关闭的容器，以及暂时没有用到的Docker镜像都删掉了，所以使用之前一定要想清楚。</span><br></pre></td></tr></table></figure><h5 id="删除所有退出状态的容器"><a href="#删除所有退出状态的容器" class="headerlink" title="删除所有退出状态的容器"></a>删除所有退出状态的容器</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker container prune</span><br></pre></td></tr></table></figure><h5 id="删除未被使用的数据卷"><a href="#删除未被使用的数据卷" class="headerlink" title="删除未被使用的数据卷"></a>删除未被使用的数据卷</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker volume prune</span><br></pre></td></tr></table></figure><h5 id="删除-dangling-或所有未被使用的镜像-镜像ID和标签都已被删除，并以none-关键字表示-。称为-虚悬镜像dangling-image"><a href="#删除-dangling-或所有未被使用的镜像-镜像ID和标签都已被删除，并以none-关键字表示-。称为-虚悬镜像dangling-image" class="headerlink" title="删除 dangling 或所有未被使用的镜像(镜像ID和标签都已被删除，并以none 关键字表示 。称为 虚悬镜像dangling image)"></a>删除 dangling 或所有未被使用的镜像(镜像ID和标签都已被删除，并以none 关键字表示 。称为 虚悬镜像dangling image)</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker image prune #</span><br></pre></td></tr></table></figure><h5 id="查看僵尸目录"><a href="#查看僵尸目录" class="headerlink" title="查看僵尸目录"></a>查看僵尸目录</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker volume ls -qf dangling=true</span><br></pre></td></tr></table></figure><h5 id="删除僵尸目录"><a href="#删除僵尸目录" class="headerlink" title="删除僵尸目录"></a>删除僵尸目录</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker volume rm $(docker volume ls -qf dangling=true</span><br></pre></td></tr></table></figure><h5 id="查看容器的logs大小进行清理"><a href="#查看容器的logs大小进行清理" class="headerlink" title="查看容器的logs大小进行清理"></a>查看容器的logs大小进行清理</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ll /var/lib/docker/overlay2/197c3988758a714fd0affa0dbbc9137f74e92d5e249f58c29f75cf6dcb1f8bb2/diff/workspace/logs</span><br></pre></td></tr></table></figure><h5 id="通过目录名id查看对应的pod"><a href="#通过目录名id查看对应的pod" class="headerlink" title="通过目录名id查看对应的pod"></a>通过目录名id查看对应的pod</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker ps -q | xargs docker inspect --format &apos;&#123;&#123;.State.Pid&#125;&#125;, &#123;&#123;.Id&#125;&#125;, &#123;&#123;.Name&#125;&#125;, &#123;&#123;.GraphDriver.Data.WorkDir&#125;&#125;&apos; | egrep 8f06b3a04cedc6717e7d3b639d2be75006e6f897d75cc17fbf09f11a39b5d633</span><br></pre></td></tr></table></figure><h4 id="docker-build-命令行交互"><a href="#docker-build-命令行交互" class="headerlink" title="docker build 命令行交互"></a>docker build 命令行交互</h4><p>构建elasticsearch，想一起把 ik分词器整合进去，发现构建失败</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ubuntu@ubuntu:~/docker/elasticsearch-ik$ docker build -t elastic-ik . --no-cache</span><br><span class="line">Sending build context to Docker daemon  4.507MB</span><br><span class="line">Step 1/3 : FROM docker.elastic.co/elasticsearch/elasticsearch:6.5.4</span><br><span class="line"> ---&gt; 93109ce1d590</span><br><span class="line">Step 2/3 : ENV VERSION=6.5.4</span><br><span class="line"> ---&gt; Running in 520c5b73edc8</span><br><span class="line">Removing intermediate container 520c5b73edc8</span><br><span class="line"> ---&gt; 96e96aa28b66</span><br><span class="line">Step 3/3 : RUN /usr/share/elasticsearch/bin/elasticsearch-plugin install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v$&#123;VERSION&#125;/elasticsearch-analysis-ik-$VERSION.zip</span><br><span class="line"> ---&gt; Running in 5fd671edd1eb</span><br><span class="line">-&gt; Downloading https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v6.5.4/elasticsearch-analysis-ik-6.5.4.zip</span><br><span class="line">[=================================================] 100%?? </span><br><span class="line">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class="line">@     WARNING: plugin requires additional permissions     @</span><br><span class="line">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class="line">* java.net.SocketPermission * connect,resolve</span><br><span class="line">See Permissions in the JDK</span><br><span class="line">for descriptions of what these permissions allow and the associated risks.</span><br><span class="line"></span><br><span class="line">Exception in thread &quot;main&quot; java.lang.IllegalStateException: unable to read from standard input; is standard input open and a tty attached?</span><br><span class="line">at org.elasticsearch.cli.Terminal$SystemTerminal.readText(Terminal.java:173)</span><br><span class="line">at org.elasticsearch.plugins.PluginSecurity.prompt(PluginSecurity.java:74)</span><br><span class="line">at org.elasticsearch.plugins.PluginSecurity.confirmPolicyExceptions(PluginSecurity.java:67)</span><br><span class="line">at org.elasticsearch.plugins.InstallPluginCommand.installPlugin(InstallPluginCommand.java:801)</span><br><span class="line">at org.elasticsearch.plugins.InstallPluginCommand.install(InstallPluginCommand.java:775)</span><br><span class="line">at org.elasticsearch.plugins.InstallPluginCommand.execute(InstallPluginCommand.java:231)</span><br><span class="line">at org.elasticsearch.plugins.InstallPluginCommand.execute(InstallPluginCommand.java:216)</span><br><span class="line">at org.elasticsearch.cli.EnvironmentAwareCommand.execute(EnvironmentAwareCommand.java:86)</span><br><span class="line">at org.elasticsearch.cli.Command.mainWithoutErrorHandling(Command.java:124)</span><br><span class="line">at org.elasticsearch.cli.MultiCommand.execute(MultiCommand.java:77)</span><br><span class="line">at org.elasticsearch.cli.Command.mainWithoutErrorHandling(Command.java:124)</span><br><span class="line">at org.elasticsearch.cli.Command.main(Command.java:90)</span><br><span class="line">at org.elasticsearch.plugins.PluginCli.main(PluginCli.java:47)</span><br><span class="line">The command &apos;/bin/sh -c /usr/share/elasticsearch/bin/elasticsearch-plugin install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v$&#123;VERSION&#125;/elasticsearch-analysis-ik-$VERSION.zip&apos; returned a non-zero code: 1</span><br></pre></td></tr></table></figure><p>根据命令行提示可以看到， 再第三步的时候，也就是安装 ik分词器的时候，提示需要额外的权限 <code>WARNING: plugin requires additional permissions</code></p><p>然后进入到 第二步的镜像中查看原因 <code>docker run -it 96e96aa28b66 /bin/bash</code></p><p>安装 ik 分词器的时候需要一次确认交互</p><p>Dockerfile</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FROM docker.elastic.co/elasticsearch/elasticsearch:6.5.4</span><br><span class="line"></span><br><span class="line">ENV VERSION=6.5.4</span><br><span class="line"></span><br><span class="line">#COPY elasticsearch-analysis-ik-$VERSION.zip /tmp/</span><br><span class="line"></span><br><span class="line">RUN sh -c &apos;/bin/echo -e &quot;y&quot; | /usr/share/elasticsearch/bin/elasticsearch-plugin install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v$&#123;VERSION&#125;/elasticsearch-analysis-ik-$VERSION.zip&apos;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;安装docker&quot;&gt;&lt;a href=&quot;#安装docker&quot; class=&quot;headerlink&quot; title=&quot;安装docker&quot;&gt;&lt;/a&gt;安装docker&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl</summary>
      
    
    
    
    
    <category term="docker" scheme="https://nmk0718.github.io/tag/docker/"/>
    
  </entry>
  
  <entry>
    <title>shadowsocks</title>
    <link href="https://nmk0718.github.io/2020/03/27/shadowsocks/"/>
    <id>https://nmk0718.github.io/2020/03/27/shadowsocks/</id>
    <published>2020-03-27T07:32:00.000Z</published>
    <updated>2024-11-29T06:43:44.801Z</updated>
    
    <content type="html"><![CDATA[<p>执行脚本</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@iZj10kpmbmyt18Z ~]# wget --no-check-certificate -O shadowsocks-all.sh https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-all.sh</span><br><span class="line">[root@iZj10kpmbmyt18Z ~]# chmod +x shadowsocks-all.sh</span><br><span class="line">[root@iZj10kpmbmyt18Z ~]# ./shadowsocks-all.sh</span><br></pre></td></tr></table></figure><p>第一次可能会因为github原因失败,可再次尝试,出现以下页面即为安装成功</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Congratulations, Shadowsocks-Python server install completed!</span><br><span class="line">Your Server IP        :  182.92.103.141 </span><br><span class="line">Your Server Port      :  8989 </span><br><span class="line">Your Password         :  teddysun.com </span><br><span class="line">Your Encryption Method:  aes-256-gcm </span><br><span class="line"></span><br><span class="line">Welcome to visit: https://teddysun.com/486.html</span><br><span class="line">Enjoy it!</span><br></pre></td></tr></table></figure><p>修改配置文件 /etc/Shadowsocks-Python/config.json</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;server&quot;:&quot;0.0.0.0&quot;,        //配置服务端地址，不需要修改</span><br><span class="line">    &quot;server_port&quot;:8989,           //服务端端口，可以根据需要修改，建议改成大点的不会被占用的端口</span><br><span class="line">    &quot;local_address&quot;:&quot;127.0.0.1&quot;, //本地地址，不需要修改</span><br><span class="line">    &quot;local_port&quot;:1080,           //本地端口，可以根据需要修改</span><br><span class="line">    &quot;password&quot;:&quot;nmk1234567&quot;,         //密码</span><br><span class="line">    &quot;timeout&quot;:300,               //连接超时时间</span><br><span class="line">    &quot;method&quot;:&quot;rc4-md5&quot;,          //加密方式</span><br><span class="line">    &quot;auth&quot;: false                //需要验证</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sslocal -c /etc/shadowsocks-python/config.json</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line">/etc/init.d/shadowsocks restart</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;执行脚本&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[root@iZj10kpmbmyt18Z ~]# wget --no-check-ce</summary>
      
    
    
    
    
    <category term="shadowsocks" scheme="https://nmk0718.github.io/tag/shadowsocks/"/>
    
  </entry>
  
  <entry>
    <title>SonarQube</title>
    <link href="https://nmk0718.github.io/2020/03/27/SonarQube/"/>
    <id>https://nmk0718.github.io/2020/03/27/SonarQube/</id>
    <published>2020-03-27T07:23:00.000Z</published>
    <updated>2024-11-29T06:43:41.495Z</updated>
    
    <content type="html"><![CDATA[<h4 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker pull sonarqube:8.6-community</span><br></pre></td></tr></table></figure><h4 id="启动镜像"><a href="#启动镜像" class="headerlink" title="启动镜像"></a>启动镜像</h4><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">mkdir -p /data/sonarqube/data</span><br><span class="line">mkdir -p /data/sonarqube/extensions</span><br><span class="line">mkdir -p /data/sonarqube/logs</span><br><span class="line"></span><br><span class="line">docker run -d --name sonarqube --restart=always -p <span class="number">9000</span>:<span class="number">9000</span> -p <span class="number">9092</span>:<span class="number">9092</span> -v /data/sonarqube/data:<span class="regexp">/opt/</span>sonarqube/data -v /data/sonarqube/extensions:<span class="regexp">/opt/</span>sonarqube/extensions -v /data/sonarqube/logs:<span class="regexp">/opt/</span>sonarqube/logs  sonarqube:<span class="number">8.6</span><span class="number">.1</span>-community</span><br></pre></td></tr></table></figure><h4 id="登录SonarQube"><a href="#登录SonarQube" class="headerlink" title="登录SonarQube"></a>登录SonarQube</h4><p><a href="http://ip:9000/" target="_blank" rel="noopener">http://ip:9000/</a></p><img src="\image\image-20210220115917934.png"><p>默认账号密码 admin,admin</p><p>修改默认密码</p><img src="\image\image-20210220134327991.png"><p>安装中文插件</p><img src="\image\image-20210220134605819.png"><p>点击restart等待重启即可</p><img src="\image\image-20210220140802803.png"><h4 id="项目检测"><a href="#项目检测" class="headerlink" title="项目检测"></a>项目检测</h4><p>创建项目</p><img src="\image\image-20210220150454485.png"><p>创建令牌</p><img src="\image\image-20210220150549006.png"><p>分析项目</p><img src="\image\image-20210220150614630.png"><p>复制命令在代码目录下执行</p><img src="\image\image-20210220151026434.png"><p>看到Buiild Success代表代码检测完毕</p><img src="\image\image-20210220151048654.png"><p>可看到项目对应的bugs和漏洞</p><img src="\image\image-20210220151126791.png"><h4 id="常用插件："><a href="#常用插件：" class="headerlink" title="常用插件："></a>常用插件：</h4><ul><li>Chinese Pack – 中文语言包</li><li>Checkstyle – Java 代码规范检查</li><li>Crowd – Crowd 插件，实现统一登录</li><li>JaCoCo – Java 代码覆盖率</li><li>PMD – Java 静态代码扫描</li><li>ShellCheck Analyzer – Shell 代码规范检查</li><li>SonarCSS、SonarHTML、SonarJS等 – Sonar 针对不同编程语言代码分析</li></ul><h4 id="自动构建"><a href="#自动构建" class="headerlink" title="自动构建"></a>自动构建</h4><p>生成jenkins专属令牌 </p><img src="\image\image-20210220153830365.png"><p><strong>jenkins关联SonarQube</strong></p><p>安装插件</p><img src="\image\image-20210220154622214.png"><p>添加凭据 Secret对应创建的令牌</p><img src="\image\image-20210220154824249.png"><p>在系统配置中配置插件</p><img src="\image\image-20210220155101526.png"><p>在全局工具配置中配置</p><p>可使用自动安装或包,本文使用指定本地包</p><p>下载地址:<a href="https://github.com/SonarSource/sonar-scanner-cli/releases/download/4.4.0.2170/sonar-scanner-cli-4.4.0.2170-linux.zip" target="_blank" rel="noopener">https://github.com/SonarSource/sonar-scanner-cli/releases/download/4.4.0.2170/sonar-scanner-cli-4.4.0.2170-linux.zip</a></p><img src="\image\image-20210220160938832.png"><p>项目结构,该项目需要进入ymall目录进行打包</p><img src="\image\image-20210220170855724.png"><p>增加构建选项Execute SonarQube Scanner</p><img src="\image\image-20210220171202597.png"><p>构建控制台输出</p><img src="\image\image-20210220171336353.png"><p>查看SonarQube,<code>新代码</code>代表更新的代码漏洞是否新增,全部代码为老代码</p><img src="\image\image-20210220171358070.png"><h4 id="问题"><a href="#问题" class="headerlink" title="问题:"></a>问题:</h4><p>启动SonarQube时MySQL报错</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; org.sonar.process.MessageException: Unsupported JDBC driver provider: mysql</span><br></pre></td></tr></table></figure><p>原因是SonarQube 7.9以上版本已不再支持mysql,启动语句需要更改</p><p>以前版本的启动命令</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run -d --restart=always --name sonarqube -p 9000:9000 -p 9092:9092 -e &quot;SONARQUBE_JDBC_USERNAME=sonar&quot; -e &quot;SONARQUBE_JDBC_PASSWORD=sonar&quot; -e &quot;SONARQUBE_JDBC_URL=jdbc:mysql://192.168.50.57:3306/sonar?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false&quot;  -v /data/sonarqube/conf:/opt/sonarqube/conf -v /data/sonarqube/data:/opt/sonarqube/data -v /data/sonarqube/extensions:/opt/sonarqube/extensions -v /data/sonarqube/logs:/opt/sonarqube/logs  sonarqube:7.5-community</span><br></pre></td></tr></table></figure><p>现在版本的启动命令</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run -d --name sonarqube --restart=always -p 9000:9000 -p 9092:9092 -v /data/sonarqube/data:/opt/sonarqube/data -v /data/sonarqube/extensions:/opt/sonarqube/extensions -v /data/sonarqube/logs:/opt/sonarqube/logs  sonarqube:8.6.1-community</span><br></pre></td></tr></table></figure><p>jenkins构建时报错</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Cannot run program &quot;/opt/sonar-scanner-cli/bin/sonar-scanner&quot; (in directory /root/.jenkins/workspace/ymall&quot;) error=13, Permission denied</span><br></pre></td></tr></table></figure><p>授权sonar-scanner</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chmod -R 777 sonar-scanner-cli/</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;下载镜像&quot;&gt;&lt;a href=&quot;#下载镜像&quot; class=&quot;headerlink&quot; title=&quot;下载镜像&quot;&gt;&lt;/a&gt;下载镜像&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;</summary>
      
    
    
    
    
    <category term="SonarQube" scheme="https://nmk0718.github.io/tag/SonarQube/"/>
    
  </entry>
  
  <entry>
    <title>Packaging deployment</title>
    <link href="https://nmk0718.github.io/2020/01/21/deployment/"/>
    <id>https://nmk0718.github.io/2020/01/21/deployment/</id>
    <published>2020-01-21T13:00:00.000Z</published>
    <updated>2024-11-29T06:42:57.229Z</updated>
    
    <content type="html"><![CDATA[<h3 id="打包命令"><a href="#打包命令" class="headerlink" title="打包命令"></a>打包命令</h3><p>前台js打包  需要:node.js</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><p>普通WEB项目  需要:ant</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ant -buildfile build.xml</span><br><span class="line">#进入项目目录,在有build.xml的目录,使用命令打包</span><br></pre></td></tr></table></figure><p>maven项目  需要:maven</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">maven clean install -P&#123;profile&#125; -Dmaven.test.skip=true</span><br><span class="line">#clean清理本地库 install编译打包可执行的war -P指定多环境参数 -Dmaven.test.skip=true 跳过测试</span><br></pre></td></tr></table></figure><h3 id="启动命令"><a href="#启动命令" class="headerlink" title="启动命令"></a>启动命令</h3><h4 id="spring项目"><a href="#spring项目" class="headerlink" title="spring项目"></a>spring项目</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java -jar nmk.jar --spring.profiles.active=dev</span><br><span class="line">#可在java后配置启动参数 -Xms512m -Xmx1024m 限制项目使用内存</span><br><span class="line">#--spring.profiles.active 指定多环境</span><br><span class="line">#在linux启动请在启动命令最后加&amp; 代表后台运行,如果项目在你断掉连接时挂掉请使用nohup+&amp;</span><br><span class="line">#示例如下:</span><br><span class="line">#nohup java -Xms512m -Xmx1024m -jar nmk.jar --spring.profiles.active=prod &gt;&gt; catalina.out 2&gt;&amp;1 &amp;</span><br><span class="line">#指定程序后台启动,使用prod环境配置运行,最大堆内存为1024M,启动日志输出到catalina.out</span><br></pre></td></tr></table></figure><h4 id="tomcat项目"><a href="#tomcat项目" class="headerlink" title="tomcat项目"></a>tomcat项目</h4><ul><li><p>windows下</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">把war包或文件夹放入tomcat/webapps下,启动tomcat/bin目录下的startup.bat</span><br><span class="line">可在catalina.bat开头配置堆内存</span><br><span class="line">set JAVA_OPTS=-server -Xms512m -Xmx1024m</span><br></pre></td></tr></table></figure></li><li><p>linux下</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">把war包或文件夹放入tomcat/webapps下,进入tomcat/bin目录下</span><br><span class="line">chmod +x startup.sh #授权执行权限</span><br><span class="line">chmod +x catalina.sh </span><br><span class="line">./startup.sh 或sh startup.sh启动tomcat</span><br><span class="line">可在catalina.sh开头配置堆内存</span><br><span class="line">JAVA_OPTS=&quot;-Xms512m -Xmx1024m&quot;</span><br></pre></td></tr></table></figure></li></ul><p>*项目环境必须有安装JDK</p><h3 id="bug"><a href="#bug" class="headerlink" title="bug:"></a>bug:</h3><h4 id="项目中图片中文名称-访问页面不显示问题"><a href="#项目中图片中文名称-访问页面不显示问题" class="headerlink" title="项目中图片中文名称,访问页面不显示问题"></a>项目中图片中文名称,访问页面不显示问题</h4><p>修改tomcat的conf/server.xml,增加编码格式</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">修改前&lt;Connector port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot;</span><br><span class="line">               connectionTimeout=&quot;20000&quot;</span><br><span class="line">               redirectPort=&quot;18883&quot; URIEncoding=&quot;UTF-8&quot;/&gt;</span><br><span class="line">修改后&lt;Connector port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot; URIEncoding=&quot;UTF-8&quot;</span><br><span class="line">               connectionTimeout=&quot;20000&quot;</span><br><span class="line">               redirectPort=&quot;443&quot;/&gt;</span><br></pre></td></tr></table></figure><p>重启tomcat即可解决</p><h4 id="maven将jar包添加到本地仓库"><a href="#maven将jar包添加到本地仓库" class="headerlink" title="maven将jar包添加到本地仓库"></a>maven将jar包添加到本地仓库</h4><p>情景描述：当项目所需的jar包，maven中央仓库中没有该jar包时，如何将jar包添加到本地仓库呢？</p><p>错误做法：直接将jar包拷贝到本地仓库目录下</p><p>正确做法：　　1.首先，搭建maven运行环境；　　2. 使用maven命令，将jar包添加到本地仓库；</p><p>maven安装jar包的命令是：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mvn install:install-file -Dfile=jar包的位置 -DgroupId=设置groupId -DartifactId=设置artifactId -Dversion=设置version -Dpackaging=jar</span><br></pre></td></tr></table></figure><h4 id="前端打包失败"><a href="#前端打包失败" class="headerlink" title="前端打包失败"></a>前端打包失败</h4><p>在windows打包成功,在jenkins中打包失败,查看npm和node发现版本不一致<br>查看其版本</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">node -v</span><br><span class="line">v15.1.0</span><br><span class="line"></span><br><span class="line">npm -v</span><br><span class="line">7.0.8</span><br></pre></td></tr></table></figure><p>更新</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">更新npm ：</span><br><span class="line">npm install -g npm</span><br><span class="line">更新指定版本 ：</span><br><span class="line">npm install -g npm@6.9.0</span><br><span class="line">更新node版本：</span><br><span class="line">首先安装n模块</span><br><span class="line">npm install -g n</span><br><span class="line">安装好n模块后可以选择下面其一升级：</span><br><span class="line"></span><br><span class="line">选择一：升级node.js到最新稳定版</span><br><span class="line">n stable</span><br><span class="line"></span><br><span class="line">选择二：升级node.js到最新版</span><br><span class="line">n latest</span><br><span class="line"></span><br><span class="line">选择三：升级node.js到指定版本</span><br><span class="line">n v14.16.0</span><br><span class="line">如果出现没有n命令提示,请进入node安装目录的bin下进行执行</span><br></pre></td></tr></table></figure><p>还是出现报错</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ERROR in ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib/selector.js?type=script&amp;index=0!./src/project/views/hotword/components/recommend.vue</span><br><span class="line">Module not found: Error: Can&apos;t resolve &apos;./RecommendCreate&apos; in &apos;/home/jenkins/workspace/liang_jian_web_dev/src/project/views/hotword/components&apos;</span><br><span class="line"> @ ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib/selector.js?type=script&amp;index=0!./src/project/views/hotword/components/recommend.vue 15:23-51</span><br><span class="line"> @ ./src/project/views/hotword/components/recommend.vue</span><br><span class="line"> @ ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib/selector.js?type=script&amp;index=0!./src/project/views/hotword/list.vue</span><br><span class="line"> @ ./src/project/views/hotword/list.vue</span><br><span class="line"> @ ./src/project/router/hotword.js</span><br><span class="line"> @ ./src/project/router/index.js</span><br><span class="line"> @ ./src/main.js</span><br><span class="line"></span><br><span class="line">ERROR in ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib/selector.js?type=script&amp;index=0!./src/project/views/hotword/components/recommend.vue</span><br><span class="line">Module not found: Error: Can&apos;t resolve &apos;./RecommendEdit&apos; in &apos;/home/jenkins/workspace/liang_jian_web_dev/src/project/views/hotword/components&apos;</span><br><span class="line"> @ ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib/selector.js?type=script&amp;index=0!./src/project/views/hotword/components/recommend.vue 19:21-47</span><br><span class="line"> @ ./src/project/views/hotword/components/recommend.vue</span><br><span class="line"> @ ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib/selector.js?type=script&amp;index=0!./src/project/views/hotword/list.vue</span><br><span class="line"> @ ./src/project/views/hotword/list.vue</span><br><span class="line"> @ ./src/project/router/hotword.js</span><br><span class="line"> @ ./src/project/router/index.js</span><br><span class="line"> @ ./src/main.js</span><br><span class="line"></span><br><span class="line">ERROR in ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib/selector.js?type=script&amp;index=0!./src/project/views/video/list.vue</span><br><span class="line">Module not found: Error: Can&apos;t resolve &apos;./SetAmount&apos; in &apos;/home/jenkins/workspace/liang_jian_web_dev/src/project/views/video&apos;</span><br><span class="line"> @ ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib/selector.js?type=script&amp;index=0!./src/project/views/video/list.vue 31:17-39</span><br><span class="line"> @ ./src/project/views/video/list.vue</span><br><span class="line"> @ ./src/project/router/video.js</span><br><span class="line"> @ ./src/project/router/index.js</span><br><span class="line"> @ ./src/main.js</span><br><span class="line"></span><br><span class="line">ERROR in ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib/selector.js?type=script&amp;index=0!./src/project/views/waterMark/editWord.vue</span><br><span class="line">Module not found: Error: Can&apos;t resolve &apos;@/project/service/watermark&apos; in &apos;/home/jenkins/workspace/liang_jian_web_dev/src/project/views/waterMark&apos;</span><br><span class="line"> @ ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib/selector.js?type=script&amp;index=0!./src/project/views/waterMark/editWord.vue 11:17-55</span><br><span class="line"> @ ./src/project/views/waterMark/editWord.vue</span><br><span class="line"> @ ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib/selector.js?type=script&amp;index=0!./src/project/views/waterMark/list.vue</span><br><span class="line"> @ ./src/project/views/waterMark/list.vue</span><br><span class="line"> @ ./src/project/router/waterMark.js</span><br><span class="line"> @ ./src/project/router/index.js</span><br><span class="line"> @ ./src/main.js</span><br><span class="line"></span><br><span class="line">ERROR in ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib/selector.js?type=script&amp;index=0!./src/project/views/waterMark/editImage.vue</span><br><span class="line">Module not found: Error: Can&apos;t resolve &apos;@/project/service/watermark&apos; in &apos;/home/jenkins/workspace/liang_jian_web_dev/src/project/views/waterMark&apos;</span><br><span class="line"> @ ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib/selector.js?type=script&amp;index=0!./src/project/views/waterMark/editImage.vue 15:17-55</span><br><span class="line"> @ ./src/project/views/waterMark/editImage.vue</span><br><span class="line"> @ ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib/selector.js?type=script&amp;index=0!./src/project/views/waterMark/list.vue</span><br><span class="line"> @ ./src/project/views/waterMark/list.vue</span><br><span class="line"> @ ./src/project/router/waterMark.js</span><br><span class="line"> @ ./src/project/router/index.js</span><br><span class="line"> @ ./src/main.js</span><br><span class="line"></span><br><span class="line">ERROR in ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib/selector.js?type=script&amp;index=0!./src/project/views/waterMark/createWord.vue</span><br><span class="line">Module not found: Error: Can&apos;t resolve &apos;@/project/service/watermark&apos; in &apos;/home/jenkins/workspace/liang_jian_web_dev/src/project/views/waterMark&apos;</span><br><span class="line"> @ ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib/selector.js?type=script&amp;index=0!./src/project/views/waterMark/createWord.vue 11:17-55</span><br><span class="line"> @ ./src/project/views/waterMark/createWord.vue</span><br><span class="line"> @ ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib/selector.js?type=script&amp;index=0!./src/project/views/waterMark/list.vue</span><br><span class="line"> @ ./src/project/views/waterMark/list.vue</span><br><span class="line"> @ ./src/project/router/waterMark.js</span><br><span class="line"> @ ./src/project/router/index.js</span><br><span class="line"> @ ./src/main.js</span><br><span class="line"></span><br><span class="line">ERROR in ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib/selector.js?type=script&amp;index=0!./src/project/views/waterMark/createImage.vue</span><br><span class="line">Module not found: Error: Can&apos;t resolve &apos;@/project/service/watermark&apos; in &apos;/home/jenkins/workspace/liang_jian_web_dev/src/project/views/waterMark&apos;</span><br><span class="line"> @ ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib/selector.js?type=script&amp;index=0!./src/project/views/waterMark/createImage.vue 15:17-55</span><br><span class="line"> @ ./src/project/views/waterMark/createImage.vue</span><br><span class="line"> @ ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib/selector.js?type=script&amp;index=0!./src/project/views/waterMark/list.vue</span><br><span class="line"> @ ./src/project/views/waterMark/list.vue</span><br><span class="line"> @ ./src/project/router/waterMark.js</span><br><span class="line"> @ ./src/project/router/index.js</span><br><span class="line"> @ ./src/main.js</span><br><span class="line"></span><br><span class="line">  Build failed with errors.</span><br><span class="line"></span><br><span class="line">npm ERR! code 1</span><br><span class="line">npm ERR! path /home/jenkins/workspace/liang_jian_web_dev</span><br><span class="line">npm ERR! command failed</span><br><span class="line">npm ERR! command sh -c node build/build.js</span><br><span class="line"></span><br><span class="line">npm ERR! A complete log of this run can be found in:</span><br><span class="line">npm ERR!     /root/.npm/_logs/2021-03-08T06_33_52_235Z-debug.log</span><br></pre></td></tr></table></figure><p>百度找到问题原因</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">注意大小写,</span><br><span class="line">windows对大小写不敏感,大小写都是对的,</span><br><span class="line">linux对大小写很敏感,不对就会报错</span><br></pre></td></tr></table></figure><p>修改项目中的大小写,再次编译打包成功</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;打包命令&quot;&gt;&lt;a href=&quot;#打包命令&quot; class=&quot;headerlink&quot; title=&quot;打包命令&quot;&gt;&lt;/a&gt;打包命令&lt;/h3&gt;&lt;p&gt;前台js打包  需要:node.js&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;</summary>
      
    
    
    
    
    <category term="Packaging deployment" scheme="https://nmk0718.github.io/tag/Packaging-deployment/"/>
    
  </entry>
  
  <entry>
    <title>FTP</title>
    <link href="https://nmk0718.github.io/2020/01/06/ftp/"/>
    <id>https://nmk0718.github.io/2020/01/06/ftp/</id>
    <published>2020-01-06T03:30:00.000Z</published>
    <updated>2024-11-29T06:43:21.675Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、linux"><a href="#一、linux" class="headerlink" title="一、linux"></a>一、linux</h3><ul><li><h4 id="FTP"><a href="#FTP" class="headerlink" title="FTP"></a>FTP</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install vsftpd -y</span><br><span class="line"></span><br><span class="line">touch ftp.sh</span><br><span class="line"></span><br><span class="line">chmod +x ftp.sh</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">name=nmk</span><br><span class="line"></span><br><span class="line">filePath=/sftp/$name</span><br><span class="line">lnPath=/files/sftp/$name</span><br><span class="line"></span><br><span class="line">#groupadd sftp</span><br><span class="line"></span><br><span class="line">echo create $name ....</span><br><span class="line"></span><br><span class="line">useradd -g sftp -s /sbin/nologin -M $name</span><br><span class="line">usermod -d $filePath $name</span><br><span class="line"></span><br><span class="line">#mkdir $filePath</span><br><span class="line"></span><br><span class="line">mkdir $lnPath</span><br><span class="line">mkdir $lnPath/cmpay</span><br><span class="line"></span><br><span class="line">ln -s $lnPath /sftp</span><br><span class="line"></span><br><span class="line">chown root:root  $filePath      </span><br><span class="line">chmod 755 $filePath</span><br><span class="line"></span><br><span class="line">chown $name:sftp  $lnPath/cmpay  </span><br><span class="line">chmod 755 $lnPath/cmpay</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">echo &quot;password&quot; | passwd $name --stdin &gt; /dev/null 2&gt;&amp;1</span><br><span class="line">echo $name &gt;&gt; /etc/vsftpd/chroot_list</span><br><span class="line"></span><br><span class="line">service vsftpd restart</span><br><span class="line"></span><br><span class="line">echo create $name success.</span><br></pre></td></tr></table></figure></li><li><h4 id="SFTP"><a href="#SFTP" class="headerlink" title="SFTP"></a>SFTP</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">touch sftp.sh</span><br><span class="line"></span><br><span class="line">chmod +x sftp.sh</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">name=nmk</span><br><span class="line"></span><br><span class="line">filePath=/sftp/$name/</span><br><span class="line">lnPath=/files/sftp/$name/</span><br><span class="line"></span><br><span class="line">#groupadd sftp</span><br><span class="line"></span><br><span class="line">echo create $name ....</span><br><span class="line"></span><br><span class="line">useradd -g sftp -s /sbin/nologin -M $name</span><br><span class="line">usermod -d $filePath $name</span><br><span class="line"></span><br><span class="line">#mkdir $filePath</span><br><span class="line"></span><br><span class="line">mkdir $lnPath</span><br><span class="line">mkdir $lnPath/cmpay</span><br><span class="line"></span><br><span class="line">ln -s $lnPath /sftp</span><br><span class="line"></span><br><span class="line">chown root:root  $filePath      </span><br><span class="line">chmod 755 $filePath</span><br><span class="line"></span><br><span class="line">chown $name:sftp  $lnPath/cmpay</span><br><span class="line">chmod 755 $lnPath/cmpay</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">echo &quot;password&quot; | passwd $name --stdin &gt; /dev/null 2&gt;&amp;1</span><br><span class="line"></span><br><span class="line">echo create $name success.</span><br></pre></td></tr></table></figure><p>修改/etc/ssh/sshd_config配置</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># override default of no subsystems</span><br><span class="line">#Subsystem      sftp    /usr/libexec/openssh/sftp-server</span><br><span class="line"></span><br><span class="line">Subsystem sftp internal-sftp</span><br><span class="line"></span><br><span class="line"># Example of overriding settings on a per-user basis</span><br><span class="line">#Match User anoncvs</span><br><span class="line">#       X11Forwarding no</span><br><span class="line">#       AllowTcpForwarding no</span><br><span class="line">#       PermitTTY no</span><br><span class="line">#       ForceCommand cvs server</span><br><span class="line"></span><br><span class="line">UseDNS no</span><br><span class="line">AddressFamily inet</span><br><span class="line">SyslogFacility AUTHPRIV</span><br><span class="line">PermitRootLogin yes</span><br><span class="line">PasswordAuthentication yes</span><br><span class="line"></span><br><span class="line"># #注意，以下要 放在 本文件的最后行，否则 root用户无法登陆</span><br><span class="line">Match Group sftp</span><br><span class="line">X11Forwarding no</span><br><span class="line">AllowTcpForwarding no</span><br><span class="line"></span><br><span class="line">ChrootDirectory %h</span><br><span class="line">ForceCommand internal-sftp</span><br></pre></td></tr></table></figure></li></ul><h3 id="二、windows"><a href="#二、windows" class="headerlink" title="二、windows"></a>二、windows</h3><ul><li><h4 id="FTP-1"><a href="#FTP-1" class="headerlink" title="FTP"></a>FTP</h4><p>通过启用windows自带的IIS功能建立FTP</p><p><img src="/image/IIS1.png" alt="image-20200107011735061"></p><p>添加FTP站点</p><p><img src="/image/IIS2.png" alt="image-20200107012103410"></p><p>定义FTP名称和映射目录</p><p><img src="/image/IIS3.png" alt="image-20200107231204818"></p><p>定义FTP的IP和端口</p><p><img src="/image/IIS4.png" alt="image-20200107231240035"></p><p>如需不用账号访问,请勾选匿名.可在允许授权定义哪些用户可访问和读写权限</p><p><img src="/image/IIS5.png" alt="image-20200107231403866"></p><h5 id="FTP拓展"><a href="#FTP拓展" class="headerlink" title="FTP拓展"></a>FTP拓展</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#FTP用户隔离</span><br><span class="line">  创建D:/FTP</span><br><span class="line">  IIS中指定D:/FTP为ftp根目录</span><br><span class="line">  在D:/FTP下建立localuser</span><br><span class="line">  在localuser下建立jack和rose目录</span><br><span class="line">  创建两个用户</span><br><span class="line">  jack目录添加jack用户完全控制</span><br><span class="line">  rose目录添加rose用户完全控制</span><br><span class="line">  IIS授权规则&gt;允许两个用户</span><br><span class="line">  用户验证&gt;基本验证启用 匿名禁用</span><br><span class="line">  用户隔离&gt;用户名目录(禁用全局虚拟目录)</span><br><span class="line">  </span><br><span class="line">  #此功能实现每个用户进入用户自己的目录</span><br><span class="line">  #此场景适用于windows下多用户使用同一端口的FTP</span><br></pre></td></tr></table></figure></li></ul><ul><li><h4 id="SFTP-1"><a href="#SFTP-1" class="headerlink" title="SFTP"></a>SFTP</h4><p>OpenSSH下载链接:<a href="https://github.com/PowerShell/Win32-OpenSSH/releases" target="_blank" rel="noopener">OpenSSH</a></p></li></ul><p>  1、进入链接下载最新 OpenSSH-Win64.zip，解压至D:\OpenSSH</p><p>  2、打开cmd,进入安装目录cd D:\OpenSSH，执行命令：</p>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">powershell.exe -ExecutionPolicy Bypass -File install-sshd.ps1</span><br></pre></td></tr></table></figure><p>  3、设置服务自动启动并启动服务：</p>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sc config sshd start= auto</span><br><span class="line"></span><br><span class="line">net start sshd</span><br></pre></td></tr></table></figure><p>  服务安装完毕，默认端口是22，默认用户名密码为Window账户名和密码</p><p>  配置文件会存放在C:\ProgramData\ssh\</p><p>  主要配置文件为sshd_config</p>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#此配置指定SFTP连接的根目录,如果默认注释则为windows的用户目录</span><br><span class="line">ChrootDirectory D:\SFTP\</span><br><span class="line"></span><br><span class="line">#密钥访问</span><br><span class="line">PasswordAuthentication yes</span><br><span class="line"></span><br><span class="line">#允许哪些用户访问</span><br><span class="line">AllowUsers  nmk</span><br></pre></td></tr></table></figure><p>  具体可参考sshd_config配置,此处只列举使用到的一部分</p>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#window下SFTP目录配置</span><br><span class="line">创建用户&gt;管理用户&gt;隶属于的组&gt;删除users</span><br><span class="line">右键D:\SFTP目录&gt;权限&gt;高级&gt;禁用继承</span><br><span class="line">只给nmk用户读写D:\SFTP文件夹权限</span><br><span class="line">这样用户就访问不到系统目录,只能访问D:/SFTP目录了</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、linux&quot;&gt;&lt;a href=&quot;#一、linux&quot; class=&quot;headerlink&quot; title=&quot;一、linux&quot;&gt;&lt;/a&gt;一、linux&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;h4 id=&quot;FTP&quot;&gt;&lt;a href=&quot;#FTP&quot; class=&quot;headerlin</summary>
      
    
    
    
    
    <category term="FTP" scheme="https://nmk0718.github.io/tag/FTP/"/>
    
  </entry>
  
  <entry>
    <title>Rsync</title>
    <link href="https://nmk0718.github.io/2020/01/03/Rsync/"/>
    <id>https://nmk0718.github.io/2020/01/03/Rsync/</id>
    <published>2020-01-03T02:30:00.000Z</published>
    <updated>2024-11-29T06:45:22.642Z</updated>
    
    <content type="html"><![CDATA[<p>1、认识</p><p>Rsync（remote synchronize）是一个远程数据同步工具，可通过LAN/WAN快速同步多台主机间的文件。Rsync使用所谓的“Rsync算法”来使本地和远 程两个主机之间的文件达到同步，这个算法只传送两个文件的不同部分，而不是每次都整份传送，因此速度相当快</p><p>2、原理</p><p>Rsync本来是用于替代rcp的一个工具，目前由rsync.samba.org维护，所以rsync.conf文件的格式类似于samba的主配 置文件；Rsync可以通过rsh或ssh使用，也能以daemon模式去运行</p><p>在以daemon方式运行时Rsync server会打开一个873 端口，等待客户端去连接。连接时，Rsync server会检查口令是否相符，若通过口令查核，则可以开始进行文件传输。第一次连通完成时，会把整份文件传输一次，以后则就只需进行增量备份</p><p>3、特点</p><p>1、可以镜像保存整个目录树和文件系统；</p><p>2、可以很容易做到保持原来文件的权限、时间、软硬链接等；</p><p>3、无须特殊权限即可安装；</p><p>4、优化的流程，文件传输效率高；</p><p>5、可以使用rsh、ssh等方式来传输文件，当然也可以通过直接的socket连接；</p><p>6、支持匿名传输</p><p><strong>rsync命令</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-v：显示rsync过程中详细信息。可以使用&quot;-vvvv&quot;获取更详细信息。</span><br><span class="line">-a --archive  ：归档模式，表示递归传输并保持文件属性。等同于&quot;-rtopgDl&quot;。</span><br><span class="line">-r --recursive：递归到目录中去。</span><br><span class="line">-t --times：保持mtime属性。强烈建议任何时候都加上&quot;-t&quot;，否则目标文件mtime会设置为系统时间，导致下次更新</span><br><span class="line">-z：传输时进行压缩提高效率。</span><br></pre></td></tr></table></figure><p>最常用的选项组合是”avz”，即压缩和显示部分信息，并以归档模式传输。</p><ul><li><h4 id="linux下使用rsync同步"><a href="#linux下使用rsync同步" class="headerlink" title="linux下使用rsync同步"></a>linux下使用rsync同步</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#新建脚本</span><br><span class="line">touch rsync.sh</span><br><span class="line">#授予执行权限</span><br><span class="line">chmod +x rsync.sh</span><br></pre></td></tr></table></figure><p>脚本内容如下</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line"></span><br><span class="line">#安装rsync</span><br><span class="line">yum -y install rsync   </span><br><span class="line"></span><br><span class="line">#修改rsync配置文件</span><br><span class="line">cat &gt;&gt;/etc/rsyncd.conf&lt;&lt;MUL  </span><br><span class="line">uid = root</span><br><span class="line">gid = root</span><br><span class="line">use chroot = no</span><br><span class="line">max connections = 100</span><br><span class="line">address=127.0.0.1</span><br><span class="line">port=8173</span><br><span class="line">log file = /var/log/rsyncd.log</span><br><span class="line">pid file = /var/run/rsyncd.pid</span><br><span class="line">lock file = /var/run/rsync.lock</span><br><span class="line">MUL</span><br><span class="line"></span><br><span class="line">#获取本地ip,替换address为本地ip</span><br><span class="line">eth0_ip=`ip addr |grep inet |grep eth0|awk &apos;&#123;print $2&#125;&apos; |awk -F &quot;/&quot; &apos;&#123;print $1&#125;&apos;`</span><br><span class="line">sed  -i  &quot;s/127.0.0.1/$eth0_ip/g&quot;     /etc/rsyncd.conf </span><br><span class="line"></span><br><span class="line">#启动rsync</span><br><span class="line">/usr/bin/rsync --daemon</span><br><span class="line">cat&gt;&gt;/etc/rc.local&lt;&lt;&apos;MUL&apos;</span><br><span class="line">/usr/bin/rsync --daemon</span><br><span class="line">MUL</span><br><span class="line"></span><br><span class="line">#定义密钥config供客户端连接</span><br><span class="line">rsync_datalogs=`grep  -rn  &quot;/data/logs&quot;  /etc/rsyncd.conf |wc  -l`</span><br><span class="line">if   [  &quot;$rsync_datalogs&quot; -eq &quot;0&quot;  ] ;then</span><br><span class="line">cat &gt;&gt;/etc/rsyncd.conf&lt;&lt;&apos;MUL&apos;</span><br><span class="line">[config]</span><br><span class="line">path = /data/logs/</span><br><span class="line">ignore errors = yes</span><br><span class="line">read only = no</span><br><span class="line">MUL</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></li><li><h4 id="windows下使用rsync同步"><a href="#windows下使用rsync同步" class="headerlink" title="windows下使用rsync同步"></a>windows下使用rsync同步</h4><p>server下载地址:<a href="https://nmk0718.github.io/Rsync/cwRsyncServer_4.1.0_Installer.exe">Rsync server</a><br>client下载地址:<a href="https://nmk0718.github.io/Rsync/cwRsync_4.1.0_Installer.exe">Rsync client</a></p></li></ul><p>  server端可自定义用户名密码</p><p>  windows server默认安装server端才可出现rsync server服务,windows使用服务来启动和停止rsync</p><p>  client端直接安装即可</p>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#server端配置文件示例</span><br><span class="line"></span><br><span class="line">use chroot = false</span><br><span class="line">strict modes = false</span><br><span class="line">hosts allow = *</span><br><span class="line">log file = rsyncd.log</span><br><span class="line">uid = 0 #不指定uid，不加这一行将无法使用任何账户 </span><br><span class="line">gid = 0 #不指定gid </span><br><span class="line">max connections = 10 #最大连接数10 </span><br><span class="line">port =8173</span><br><span class="line"></span><br><span class="line">[config]</span><br><span class="line">path = /cygdrive/e/log</span><br><span class="line">read only = false</span><br><span class="line">transfer logging = yes</span><br><span class="line">lock file = rsyncd.lock</span><br></pre></td></tr></table></figure><ul><li><h4 id="客户端拉取"><a href="#客户端拉取" class="headerlink" title="客户端拉取"></a>客户端拉取</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#同步语句</span><br><span class="line">rsync -av rsync://172.17.30.7:8173/config /cygdrive/e/logs</span><br><span class="line"></span><br><span class="line">#端口后的config对应server端的config模块并不是目录,可加入定时任务每1分钟运行</span><br><span class="line">#/cygdrive/e/logs 因为windows端为盘符,所以用/cygdrive/e/</span><br><span class="line">#rsync://ip:port/模块  /本地保存目录</span><br><span class="line">#linux可直接运行rsync拉取,windows需要进入rsync/bin目录下运行或加入环境变量</span><br><span class="line">rsync -vrt rsync://172.17.30.7:8173/config /cygdrive/e/logs</span><br><span class="line">#推荐使用-vrt拉取,如果windows同步linux的数据使用-a会保持文件属性,但windows没有root，故会报错</span><br></pre></td></tr></table></figure></li></ul><h4 id="sersync-rsync-实现服务器文件实时双向同步"><a href="#sersync-rsync-实现服务器文件实时双向同步" class="headerlink" title="sersync+rsync 实现服务器文件实时双向同步"></a>sersync+rsync 实现服务器文件实时双向同步</h4><p>实现双向同步，不存在服务端与客户端。也可以说，是服务端的同时，也是客户端；他们是相互作用的。</p><p>所以我们需要让服务器的rsync服务即可被访问，也可以访问其他服务器的rsync服务；</p><p>我们分三步安装。</p><p>第一步 ， rsync服务端配置。</p><p>第二步， rsync客户端配置。</p><p>第三步，安装 sersync</p><h5 id="安装部署rsync服务端配置（服务端）"><a href="#安装部署rsync服务端配置（服务端）" class="headerlink" title="安装部署rsync服务端配置（服务端）"></a>安装部署rsync服务端配置（服务端）</h5><p>1.安装rsync</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@k8s-work3 ~]# yum install rsync -y</span><br></pre></td></tr></table></figure><p>2.创建用户认证文件</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@k8s-work3 ~]# echo  &quot;root:123456&quot;&gt;/etc/rsync.servicePwd</span><br></pre></td></tr></table></figure><p>3.设置用户认证文件权限</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@k8s-work3 ~]# chmod 600 /etc/rsync.servicePwd</span><br></pre></td></tr></table></figure><p>4.创建配置文件</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@k8s-work3 ~]# vi /etc/rsyncd.conf</span><br><span class="line">#Rsync server</span><br><span class="line">uid = root</span><br><span class="line">gid = root</span><br><span class="line">port = 873</span><br><span class="line">use chroot = no</span><br><span class="line">max connections = 2000</span><br><span class="line">timeout = 600</span><br><span class="line">pid file = /var/run/rsyncd.pid</span><br><span class="line">lock file = /var/run/rsync.lock</span><br><span class="line">log file = /var/log/rsyncd.log</span><br><span class="line">ignore errors</span><br><span class="line">read only = false</span><br><span class="line">list = false</span><br><span class="line">hosts allow = 192.168.233.10</span><br><span class="line">hosts deny = 0.0.0.0/32</span><br><span class="line">auth users = root</span><br><span class="line">secrets file = /etc/rsync.servicePwd</span><br><span class="line">[www]</span><br><span class="line">comment = www</span><br><span class="line">path = /data/</span><br></pre></td></tr></table></figure><p>5.启动守护进程并加入开机自启：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@k8s-work3 ~]# rsync --daemon --config=/etc/rsyncd.conf</span><br><span class="line">[root@k8s-work3 ~]# vi /etc/rc.local</span><br><span class="line">/usr/bin/rsync --daemon</span><br></pre></td></tr></table></figure><p>6.创建相关待同步的目录</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@S1 ~]# mkdir -p /data   #此目录就是与配置文件中 模板www 对应的目录</span><br><span class="line">[root@M1 ~]# touch /data/test.log</span><br></pre></td></tr></table></figure><h5 id="rsync客户端配置"><a href="#rsync客户端配置" class="headerlink" title="rsync客户端配置"></a>rsync客户端配置</h5><p>1.创建客户端密码文件</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@k8s-work3 ~]# echo &quot;123456&quot;&gt;/etc/rsync.clientPwd</span><br></pre></td></tr></table></figure><p>2.设置密码文件权限</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@k8s-work3 ~]# chmod 600 /etc/rsync.clientPwd</span><br></pre></td></tr></table></figure><h5 id="rsync测试"><a href="#rsync测试" class="headerlink" title="rsync测试"></a>rsync测试</h5><p>1.服务器A 作为客户端，从服务器B的模板www中 同步数据</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@k8s-work2 data]# rsync -av  root@192.168.50.54::www/ /data/ --password-file=/etc/rsync.clientPwd</span><br><span class="line">receiving incremental file list</span><br><span class="line">qrcode/</span><br><span class="line">qrcode/permanent_34_service_seniorPartner20201228102732.jpg</span><br><span class="line"></span><br><span class="line">sent 51 bytes  received 29,081 bytes  19,421.33 bytes/sec</span><br><span class="line">total size is 28,854  speedup is 0.99</span><br></pre></td></tr></table></figure><p>2.显示成功,查看</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@k8s-work2 data]# ls</span><br><span class="line">qrcode  test.log</span><br></pre></td></tr></table></figure><h5 id="安装部署sersync服务"><a href="#安装部署sersync服务" class="headerlink" title="安装部署sersync服务"></a>安装部署sersync服务</h5><p>1.下载</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget https://storage.googleapis.com/google-code-archive-downloads/v2/code.google.com/sersync/sersync2.5_64bit_binary_stable_final.tar.gz</span><br></pre></td></tr></table></figure><p>2.配置sersync</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@k8s-work3 data]# mkdir /usr/local/sersync/</span><br><span class="line">[root@k8s-work3 data]# cd /usr/local/sersync/</span><br><span class="line">[root@k8s-work3 sersync]# mv /root/sersync2.5_64bit_binary_stable_final.tar.gz .</span><br><span class="line">[root@k8s-work3 sersync]# tar zxvf sersync2.5_64bit_binary_stable_final.tar.gz </span><br><span class="line">GNU-Linux-x86/</span><br><span class="line">GNU-Linux-x86/confxml.xml</span><br><span class="line">GNU-Linux-x86/sersync2</span><br><span class="line">[root@k8s-work3 sersync]# mkdir -p conf bin log</span><br><span class="line">[root@k8s-work3 sersync]# mv GNU-Linux-x86/confxml.xml  conf/ </span><br><span class="line">[root@k8s-work3 sersync]# cp conf/confxml.xml conf/confxml.xml.bak</span><br><span class="line">[root@k8s-work3 sersync]# mv GNU-Linux-x86/sersync2  bin/</span><br></pre></td></tr></table></figure><p>3.修改配置文件</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi  /usr/local/sersync/conf/confxml.xml</span><br><span class="line">修改24--28行</span><br><span class="line"> 24         &lt;localpath watch=&quot;/opt/tongbu&quot;&gt;</span><br><span class="line"> 25             &lt;remote ip=&quot;127.0.0.1&quot; name=&quot;tongbu1&quot;/&gt;</span><br><span class="line"> 26             &lt;!--&lt;remote ip=&quot;192.168.8.39&quot; name=&quot;tongbu&quot;/&gt;--&gt;</span><br><span class="line"> 27             &lt;!--&lt;remote ip=&quot;192.168.8.40&quot; name=&quot;tongbu&quot;/&gt;--&gt;</span><br><span class="line"> 28         &lt;/localpath&gt;</span><br><span class="line">修改后的内容为： watch:为模块对应的目录。会将服务器 ip:xxxx 模块www下的文件 同步到 watch=“/data/www”下 </span><br><span class="line">如果有多个同步模块，则按下面格式依次去写，仅更改</span><br><span class="line">24         &lt;localpath watch=&quot;/data&quot;&gt;</span><br><span class="line">25             &lt;remote ip=&quot;192.168.50.54&quot; name=&quot;www&quot;/&gt;</span><br><span class="line">26             &lt;remote ip=&quot;192.168.50.55&quot; name=&quot;www&quot;/&gt;</span><br><span class="line">27         &lt;/localpath&gt;</span><br><span class="line">修改29--35行，认证部分(rsync密码认证)</span><br><span class="line">29         &lt;rsync&gt;</span><br><span class="line">30             &lt;commonParams params=&quot;-artuz&quot;/&gt;</span><br><span class="line">31             &lt;auth start=&quot;false&quot; users=&quot;root&quot; passwordfile=&quot;/etc/rsync.pas&quot;/&gt;</span><br><span class="line">32             &lt;userDefinedPort start=&quot;false&quot; port=&quot;874&quot;/&gt;&lt;!-- port=874 --&gt;</span><br><span class="line">33             &lt;timeout start=&quot;false&quot; time=&quot;100&quot;/&gt;&lt;!-- timeout=100 --&gt;</span><br><span class="line">34             &lt;ssh start=&quot;false&quot;/&gt;</span><br><span class="line">35         &lt;/rsync&gt;</span><br><span class="line">修改后的内容如下：start改完true打开用户认证。 users为服务端配置文件中的users passwordfile密码文件 此处为：/etc/rsync.clientPwd 客户端密码文件</span><br><span class="line">27         &lt;rsync&gt;</span><br><span class="line">28             &lt;commonParams params=&quot;-artuz&quot;/&gt;</span><br><span class="line">29             &lt;auth start=&quot;true&quot; users=&quot;root&quot; passwordfile=&quot;/etc/rsync.clientPwd&quot;/&gt;</span><br><span class="line">30             &lt;userDefinedPort start=&quot;false&quot; port=&quot;874&quot;/&gt;&lt;!-- port=874 --&gt;</span><br><span class="line">31             &lt;timeout start=&quot;true&quot; time=&quot;100&quot;/&gt;&lt;!-- timeout=100 --&gt;</span><br><span class="line">32             &lt;ssh start=&quot;false&quot;/&gt;</span><br><span class="line">33         &lt;/rsync&gt;</span><br><span class="line">修改同步失败日志位置，并且每60分钟对失败的log进行重新同步</span><br><span class="line"></span><br><span class="line">&lt;failLog path=&quot;/usr/local/sersync/logs/rsync_fail_log.sh&quot; timeToExecute=&quot;60&quot;/&gt;&lt;!--default ev    ery 60mins execute once--&gt;</span><br></pre></td></tr></table></figure><p>4.创建相关文件:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@k8s-work3 sersync]# mkdir logs</span><br><span class="line">[root@k8s-work3 sersync]# touch /usr/local/sersync/log/rsync_fail_log.sh</span><br></pre></td></tr></table></figure><p>5.开启sersync守护进程同步数据</p><p>⚠执行命令前,请进行备份数据,该命令会删除远程的资源文件</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@k8s-work3 sersync]# /usr/local/sersync/bin/sersync2 -d -r -o /usr/local/sersync/conf/confxml.xml</span><br><span class="line">set the system param</span><br><span class="line">execute：echo 50000000 &gt; /proc/sys/fs/inotify/max_user_watches</span><br><span class="line">execute：echo 327679 &gt; /proc/sys/fs/inotify/max_queued_events</span><br><span class="line">parse the command param</span><br><span class="line">option: -d      run as a daemon</span><br><span class="line">option: -r      rsync all the local files to the remote servers before the sersync work</span><br><span class="line">option: -o      config xml name：  /usr/local/sersync/conf/confxml.xml</span><br><span class="line">daemon thread num: 10</span><br><span class="line">parse xml config file</span><br><span class="line">host ip : localhost     host port: 8008</span><br><span class="line">daemon start，sersync run behind the console </span><br><span class="line">use rsync password-file :</span><br><span class="line">user is root</span><br><span class="line">passwordfile is         /etc/rsync.clientPwd</span><br><span class="line">config xml parse success</span><br><span class="line">please set /etc/rsyncd.conf max connections=0 Manually</span><br><span class="line">sersync working thread 12  = 1(primary thread) + 1(fail retry thread) + 10(daemon sub threads) </span><br><span class="line">Max threads numbers is: 32 = 12(Thread pool nums) + 20(Sub threads)</span><br><span class="line">please according your cpu ，use -n param to adjust the cpu rate</span><br><span class="line">------------------------------------------</span><br><span class="line">rsync the directory recursivly to the remote servers once</span><br><span class="line">working please wait...</span><br><span class="line">execute command: cd /data &amp;&amp; rsync -artuz -R --delete ./ root@192.168.50.54::www --password-file=/etc/rsync.clientPwd &gt;/dev/null 2&gt;&amp;1 </span><br><span class="line">run the sersync: </span><br><span class="line">watch path is: /data</span><br><span class="line">[root@k8s-work3 sersync]# echo &quot;PATH=$PATH:/usr/local/sersync&quot; &gt; /etc/profile.d/sersync.sh</span><br><span class="line">[root@k8s-work3 sersync]# source /etc/profile.d/sersync.sh</span><br></pre></td></tr></table></figure><p>参考文档：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https://blog.csdn.net/weixin_40134742/article/details/110950845</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1、认识&lt;/p&gt;
&lt;p&gt;Rsync（remote synchronize）是一个远程数据同步工具，可通过LAN/WAN快速同步多台主机间的文件。Rsync使用所谓的“Rsync算法”来使本地和远 程两个主机之间的文件达到同步，这个算法只传送两个文件的不同部分，而不是每次都整</summary>
      
    
    
    
    
    <category term="Rsync" scheme="https://nmk0718.github.io/tag/Rsync/"/>
    
  </entry>
  
  <entry>
    <title>oracle</title>
    <link href="https://nmk0718.github.io/2019/09/30/oracle/"/>
    <id>https://nmk0718.github.io/2019/09/30/oracle/</id>
    <published>2019-09-30T01:15:45.000Z</published>
    <updated>2024-11-29T06:44:13.201Z</updated>
    
    <content type="html"><![CDATA[<h3 id="管理员操作数据库"><a href="#管理员操作数据库" class="headerlink" title="管理员操作数据库"></a>管理员操作数据库</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; sqlplus / as sysdba  --本地system登陆数据</span><br><span class="line">&gt; shutdown immediate;  --立即关闭数据库</span><br><span class="line">&gt; startup;             --启动数据库</span><br><span class="line">&gt; startup force;       --强制重启数据库</span><br><span class="line">&gt; <span class="built_in">exit</span>;                --退出sqlplus</span><br></pre></td></tr></table></figure><p>当使用linux时请使用<br></p><ul><li>su - oracle  切换oracle用户<br></li></ul><ul><li>lsnrctl stop  停止监听<br></li></ul><ul><li>lsnrctl start  启动监听</li></ul><h3 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; select  *　from dba_users;                                --查找用户</span><br><span class="line">&gt; create user username identified by password;              --创建用户 </span><br><span class="line">&gt; grant connect to username;                                --授予连接权限</span><br><span class="line">&gt; grant resource to username;                               --授予开发权限</span><br><span class="line">&gt; grant dba to username;                                    --授予最高权限</span><br><span class="line">&gt; grant resource,connect,dba to username;                   --授予所有权限</span><br><span class="line">&gt; drop user name cascade;                                   --删除用户</span><br><span class="line">&gt; select username,account_status,lock_date from dba_users;  --查看被锁用户</span><br><span class="line">&gt; alter user username account unlock;                       --解锁用户</span><br><span class="line">&gt; alter user username account lock;                         --锁定用户</span><br></pre></td></tr></table></figure><p>创建用户时如需默认表空间,示例:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; create user username identified by password default tablespace tablespacename;</span><br></pre></td></tr></table></figure><details><summary>深入了解</summary><pre><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">GRANT授权</span><br><span class="line">GRANT 赋予一个用户，一个组或所有用户访问权限</span><br><span class="line">GRANT privilege [, ...] ON object [, ...]    TO &#123; PUBLIC | GROUP group | username &#125;</span><br><span class="line"></span><br><span class="line">privilege的权限有:  </span><br><span class="line">  SELECT 访问声明的表/视图的所有列/字段．</span><br><span class="line">  INSERT 向声明的表中插入所有列字段．</span><br><span class="line">  UPDATE 更新声明的所有列/字段．</span><br><span class="line">  DELETE 从声明的表中删除所有行．</span><br><span class="line">  RULE   在表/视图上定义规则 （参见 CREATE RULE 语句）．</span><br><span class="line">  ALL    赋予所有权限．</span><br><span class="line">object赋予权限的对象名.可能的对象是:  </span><br><span class="line">                                      table     (表)</span><br><span class="line">                                      view      (视图)</span><br><span class="line">                                      sequence  (序列)</span><br><span class="line">                                      index     (索引)</span><br><span class="line">PUBLIC      代表是所有用户的简写.</span><br><span class="line">GROUP group 将要赋予权限的组 </span><br><span class="line">username    将要赋予权限的用户名．</span><br><span class="line"></span><br><span class="line">示例: GRANT SELECT,DELETE,UPDATE,INSERT ON TABLENAME TO USERNAME;  --授权用户对表的增删改查</span><br><span class="line">      GRANT ALL PRIVILEGES ON TABLENAME to USERNAME;               --授权用户对表的所有权限</span><br><span class="line"></span><br><span class="line">如果成功,输出 CHANGE</span><br><span class="line">如果所声明的对象不可用或不可能对声明的组或用户赋予权限．</span><br><span class="line">输出 ERROR: ChangeAcl: class <span class="string">"object"</span> not found</span><br><span class="line">描述：GRANT允许对象的创建者给某用户或某组或所有用户（PUBLIC）某些特定的权限．对象创建后,</span><br><span class="line">  除了创建者外，除非创建者赋予（GRANT）权限，其他人没有访问对象的权限．</span><br><span class="line">  一旦用户有某对象的权限，他就可以使用那个特权．不需要给创建者赋予（GRANT）对象的权限，</span><br><span class="line">  创建者自动拥有对象的所有权限，包括删除它的权限.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">REVOKE回收权限</span><br><span class="line">REVOKE INSERT ON TABLENAME FROM USERNAME         回收USERNAME在TABLENAME上的插入权限</span><br><span class="line">REVOKE ALL PRIVILEGES ON TABLENAME FROM USERNAME 回收用户USERNAME对TABLENAME的所有权限</span><br></pre></td></tr></table></figure><p></p></pre></details><p></p><h3 id="表空间"><a href="#表空间" class="headerlink" title="表空间"></a>表空间</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; select *from DBA_TABLESPACES <span class="built_in">where</span> TABLESPACE_NAME =<span class="string">'TABLESPACENAME'</span>; 查看表空间</span><br><span class="line">&gt; drop tablespace TABLESPACENAME including contents and datafiles cascade constraint; 删除表空间</span><br><span class="line">&gt; CREATE TABLESPACE TABLESPACENAME DATAFILE <span class="string">'D:\APP\ADMINISTRATOR\ORADATA\oracle\TABLESPACENAME.DBF'</span></span><br><span class="line">  SIZE 500M AUTOEXTEND ON NEXT 100M MAXSIZE UNLIMITED; windows创建表空间</span><br><span class="line">&gt; CREATE TABLESPACE TABLESPACENAME DATAFILE <span class="string">'/u01/oracle/oradata/wlzy/ECMSSTATS.DBF'</span></span><br><span class="line">  SIZE 500M AUTOEXTEND ON NEXT 100M MAXSIZE UNLIMITED;  linux创建表空间 表空间大小自动增长</span><br><span class="line"></span><br><span class="line">数据库所有表空间使用率</span><br><span class="line">&gt; SELECT to_date(sysdate),</span><br><span class="line">      Upper(F.TABLESPACE_NAME)         <span class="string">"表空间名"</span>,</span><br><span class="line">      D.TOT_GROOTTE_MB                 <span class="string">"表空间大小M)"</span>,</span><br><span class="line">      D.TOT_GROOTTE_MB - F.TOTAL_BYTES <span class="string">"已使用空间M)"</span>,</span><br><span class="line">      To_char(Round(( D.TOT_GROOTTE_MB - F.TOTAL_BYTES ) / D.TOT_GROOTTE_MB * 100, 2), <span class="string">'990.99'</span>)</span><br><span class="line">      || <span class="string">'%'</span>                           <span class="string">"使用率"</span>,</span><br><span class="line">      F.TOTAL_BYTES                    <span class="string">"空闲空间(M)"</span>,</span><br><span class="line">      F.MAX_BYTES                      <span class="string">"最大块(M)"</span></span><br><span class="line"> FROM (SELECT TABLESPACE_NAME,</span><br><span class="line">             Round(Sum(BYTES) / ( 1024 * 1024 ), 2) TOTAL_BYTES,</span><br><span class="line">             Round(Max(BYTES) / ( 1024 * 1024 ), 2) MAX_BYTES</span><br><span class="line">      FROM   SYS.DBA_FREE_SPACE</span><br><span class="line">       GROUP  BY TABLESPACE_NAME) F,</span><br><span class="line">      (SELECT DD.TABLESPACE_NAME,</span><br><span class="line">              Round(Sum(DD.BYTES) / ( 1024 * 1024 ), 2) TOT_GROOTTE_MB</span><br><span class="line">       FROM   SYS.DBA_DATA_FILES DD</span><br><span class="line">       GROUP  BY DD.TABLESPACE_NAME) D</span><br><span class="line"> WHERE  D.TABLESPACE_NAME = F.TABLESPACE_NAME</span><br><span class="line"> ORDER  BY 1;</span><br><span class="line"></span><br><span class="line">表空间大小</span><br><span class="line">&gt; select</span><br><span class="line"> b.file_name 物理文件名,</span><br><span class="line"> b.tablespace_name 表空间,</span><br><span class="line"> b.bytes/1024/1024 大小M,</span><br><span class="line"> (b.bytes-sum(nvl(a.bytes,0)))/1024/1024 已使用M,</span><br><span class="line"> substr((b.bytes-sum(nvl(a.bytes,0)))/(b.bytes)*100,1,5) 利用率</span><br><span class="line"> from dba_free_space a,dba_data_files b</span><br><span class="line"> <span class="built_in">where</span> a.file_id=b.file_id</span><br><span class="line"> group by b.tablespace_name,b.file_name,b.bytes</span><br><span class="line"> order by b.tablespace_name</span><br></pre></td></tr></table></figure><h3 id="备份和还原"><a href="#备份和还原" class="headerlink" title="备份和还原"></a>备份和还原</h3><p>查找数据文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">select * from dba_data_files; </span><br><span class="line">select * from dba_tablespaces;</span><br><span class="line">select * from dba_directories 查看备份目录</span><br></pre></td></tr></table></figure><p>导出</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; expdp username/password  directory=manualbackup dumpfile=dumpname.dmp schemas=username;</span><br><span class="line">&gt; expdp username/password tables=tablename dumpfile=dumpname.dmp directory=manualbackup; 导出数据库中一个表的数据</span><br><span class="line">&gt; expdp username/password directory=manualbackup dumpfile=dumpname.dmp tables=tablename query=’<span class="built_in">where</span> ID=123’; 导出数据库中一个表中的一行数据</span><br></pre></td></tr></table></figure><p>导入</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; impdp ecmsintf/ecms  directory= manualbackup dumpfile=ecms_dp_20190401.dmp schemas=ecms TABLE_EXISTS_ACTION=replace 导入数据库</span><br><span class="line">&gt; impdp ecms/ecms directory=manualbackup dumpfile=ELECTRICITY_BILL_FILE.dmp tables=ELECTRICITY_BILL_FILE remap_schema=ecms:ecms; 导入数据库中一个表的数据</span><br></pre></td></tr></table></figure><p>oracle备份分为exp和expdp</p><h3 id="杂谈"><a href="#杂谈" class="headerlink" title="杂谈"></a>杂谈</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">创建表来自另外一个表</span><br><span class="line">Create table a as select field from b</span><br><span class="line"></span><br><span class="line">在表中增加列</span><br><span class="line">alter table a add 字段名 类型</span><br><span class="line"></span><br><span class="line">删除表中的列</span><br><span class="line">alter table a drop cloumnc 列名</span><br><span class="line"></span><br><span class="line">更新表内容</span><br><span class="line">update a <span class="built_in">set</span> 列名  = null</span><br><span class="line"></span><br><span class="line">创建索引</span><br><span class="line">create index 索引名 on 表(字段) tablespace 表空间</span><br><span class="line"></span><br><span class="line">去重函数 distinct</span><br><span class="line">相加函数 sum</span><br><span class="line"><span class="keyword">case</span> when 符合条件则为1 否则为0</span><br><span class="line"></span><br><span class="line">查看符合条件的有多少条</span><br><span class="line">select sum(<span class="keyword">case</span> when 条件 <span class="keyword">then</span> 1 <span class="keyword">else</span> 0 end) from a</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">新增表列对应的值</span><br><span class="line">insert into 表名 (列名) values (值)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">select * from (select a.*,rownum rn from (select * from table_name)a <span class="built_in">where</span> rownum &lt;= 40) <span class="built_in">where</span> rn &gt;=21</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">select jcwdm from (select row_number() over(partition by jcwdm order by jcwdm) rn,a.* from tablename a</span><br><span class="line">) <span class="built_in">where</span> rn =1</span><br><span class="line"></span><br><span class="line"> DBLink</span><br><span class="line"></span><br><span class="line">create database link cnjzzsp</span><br><span class="line">    connect  to admin identified password</span><br><span class="line">     using <span class="string">'(DESCRIPTION=</span></span><br><span class="line"><span class="string">         (ADDRESS_LIST=</span></span><br><span class="line"><span class="string">               (ADDRESS=(PROTOCOL = TCP)(HOST =10.16.163.41)(PORT=1521))</span></span><br><span class="line"><span class="string">)</span></span><br><span class="line"><span class="string">(CONNECT_DATA =</span></span><br><span class="line"><span class="string">        (SERVICE =Oracle)</span></span><br><span class="line"><span class="string">   ) </span></span><br><span class="line"><span class="string">)'</span>; </span><br><span class="line"></span><br><span class="line"> 查看锁表进程SQL语句： </span><br><span class="line">      select sess.sid, </span><br><span class="line">      sess.serial<span class="comment">#, </span></span><br><span class="line">      lo.oracle_username, </span><br><span class="line">      lo.os_user_name, </span><br><span class="line">      ao.object_name, </span><br><span class="line">      lo.locked_mode </span><br><span class="line">      from v<span class="variable">$locked_object</span> lo, </span><br><span class="line">      dba_objects ao, </span><br><span class="line">      v<span class="variable">$session</span> sess </span><br><span class="line">      <span class="built_in">where</span> ao.object_id = lo.object_id and lo.session_id = sess.sid; </span><br><span class="line"></span><br><span class="line">如有记录则表示有lock，记录下SID和serial<span class="comment"># ，将记录的ID替换下面的xx,xxx，即可解除LOCK </span></span><br><span class="line">      alter system <span class="built_in">kill</span> session <span class="string">'xx,xxx'</span></span><br><span class="line"></span><br><span class="line">空闲率</span><br><span class="line">select sum(m.all_g),sum(n.free_g),</span><br><span class="line">sum(n.free_g)/sum(m.all_g) from</span><br><span class="line">(select tablespace_name,sum(bytes)/1024/1024 as all_g from dba_data_files group by tablespace_name) m,</span><br><span class="line">(select tablespace_name,sum(bytes)/1024/1024 as free_g from dba_free_space group by tablespace_name) n</span><br><span class="line"><span class="built_in">where</span> m.tablespace_name = n.tablespace_name</span><br><span class="line"></span><br><span class="line">使用率</span><br><span class="line">select m.tablespace_name,m.all_g,</span><br><span class="line">n.free_g ,n.free_g/m.all_g from</span><br><span class="line">(select tablespace_name,sum(bytes)/1024/1024 as all_g from dba_data_files group by tablespace_name) m,</span><br><span class="line">(select tablespace_name,sum(bytes)/1024/1024 as free_g from dba_free_space group by tablespace_name) n</span><br><span class="line"><span class="built_in">where</span> m.tablespace_name = n.tablespace_name</span><br></pre></td></tr></table></figure><h3 id="数据库命令"><a href="#数据库命令" class="headerlink" title="数据库命令"></a>数据库命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; oracle SGA使用情况</span><br><span class="line">&gt; select * from v<span class="variable">$sga</span>;</span><br><span class="line">固定SGA(MB)  Fixed Size </span><br><span class="line">数据缓冲区(MB) Database Buffers</span><br><span class="line">日志缓冲区(MB) Redo Buffers</span><br><span class="line">&gt; select * from v<span class="variable">$logfile</span>;  日志表</span><br><span class="line">&gt; select count(*) from v<span class="variable">$session</span>; --数据库当前配置会话数</span><br><span class="line">&gt; select * from dba_jobs  数据库所有的job</span><br><span class="line">&gt; select * from dba_jobs_running 正在运行的job</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;管理员操作数据库&quot;&gt;&lt;a href=&quot;#管理员操作数据库&quot; class=&quot;headerlink&quot; title=&quot;管理员操作数据库&quot;&gt;&lt;/a&gt;管理员操作数据库&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cla</summary>
      
    
    
    
    
    <category term="database" scheme="https://nmk0718.github.io/tag/database/"/>
    
    <category term="oracle" scheme="https://nmk0718.github.io/tag/oracle/"/>
    
  </entry>
  
</feed>
